
project.elf:     file format elf32-littlenios2
project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08040244

Program Header:
    LOAD off    0x00001000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x08040020 align 2**12
         filesz 0x000074a4 memsz 0x000074a4 flags r-x
    LOAD off    0x000084c4 vaddr 0x080474c4 paddr 0x08048fdc align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x0000aaf4 vaddr 0x0804aaf4 paddr 0x0804aaf4 align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08040020  08040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007074  08040244  08040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000020c  080472b8  080472b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  080474c4  08048fdc  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  0804aaf4  0804aaf4  0000aaf4  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  00009fdc  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0804ac7c  0804ac7c  00009fdc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009fdc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b50  00000000  00000000  0000a000  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000190c5  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006cad  00000000  00000000  00023c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007650  00000000  00000000  0002a8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001ce4  00000000  00000000  00031f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000321a  00000000  00000000  00033bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004396  00000000  00000000  00036e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0003b1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007c8  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003ebce  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003ebd1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003ebdd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003ebde  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003ebdf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003ebe3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003ebe7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003ebeb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0003ebf6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0003ec01  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000d  00000000  00000000  0003ec0c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  0003ec19  2**0
                  CONTENTS, READONLY
 30 .jdi          0000540e  00000000  00000000  0003ec72  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008de3c  00000000  00000000  00044080  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
08040244 l    d  .text	00000000 .text
080472b8 l    d  .rodata	00000000 .rodata
080474c4 l    d  .rwdata	00000000 .rwdata
0804aaf4 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0804ac7c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/smail/Desktop/College/MA2/Real_Time_Embedded_Systems/final_projectCCC/sw/nios/project_bsp//obj/HAL/src/crt0.o
0804028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
080474c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
08041a24 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_times.c
08041df4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08041ea8 l     F .text	00000034 alt_dev_reg
080478e8 l     O .rwdata	00001060 jtag_uart_0
08048948 l     O .rwdata	0000002c adc_0
08048974 l     O .rwdata	00000030 audio_and_video_config_0
080489a4 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080421c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080423cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08042a04 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08043ac8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08043c1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08043c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08043f48 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08044088 l     F .text	0000003c alt_get_errno
080440c4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08045340 l     F .text	00000008 __fp_unlock
08045354 l     F .text	0000019c __sinit.part.1
080454f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08046c78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08046d64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
08046e44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08046f9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
08048fd8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08047184 l     F .text	0000003c alt_get_errno
0804ab38 g     O .bss	00000004 alt_instruction_exception_handler
080433e4 g     F .text	00000038 alt_up_av_config_reset
0804383c g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
08046b30 g     F .text	00000054 _isatty_r
08043454 g     F .text	00000034 alt_up_av_config_disable_interrupt
08041b10 g     F .text	0000007c alt_main
0804ab00 g     O .bss	00000004 effect2_avg
0804ab7c g     O .bss	00000100 alt_irq
08046b84 g     F .text	00000060 _lseek_r
08048fdc g       *ABS*	00000000 __flash_rwdata_start
08042da0 g     F .text	00000060 alt_up_audio_read_fifo_avail
0804ac7c g       *ABS*	00000000 __alt_heap_start
08043518 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
08048f94 g     O .rwdata	00000004 effect3_buffer
08042e00 g     F .text	00000068 alt_up_audio_record_r
080468b8 g     F .text	0000005c __sseek
08045690 g     F .text	00000010 __sinit
08044b54 g     F .text	00000140 __swbuf_r
080454f8 g     F .text	00000068 __sfmoreglue
08046f78 g     F .text	00000024 __malloc_unlock
08042d0c g     F .text	00000094 alt_up_audio_reset_audio_core
08045678 g     F .text	00000018 _cleanup
080444e4 g     F .text	00000024 altera_nios2_gen2_irq_init
08040000 g     F .entry	0000001c __reset
08041e30 g     F .text	00000078 times
08040788 g     F .text	00000134 recording_isr
08040020 g       *ABS*	00000000 __flash_exceptions_start
0804ab0c g     O .bss	00000004 interrupted
08046ad4 g     F .text	0000005c _fstat_r
0804ab44 g     O .bss	00000004 errno
08046834 g     F .text	00000008 __seofread
08042ccc g     F .text	00000040 alt_up_audio_write_interrupt_pending
0804ab30 g     O .bss	00000004 alt_argv
08050f84 g       *ABS*	00000000 _gp
080489fc g     O .rwdata	00000180 alt_fd_list
0804aaf8 g     O .bss	00000004 buffer2_avg
08043de8 g     F .text	00000090 alt_find_dev
0804480c g     F .text	00000148 memcpy
0804177c g     F .text	00000008 _times_r
08045348 g     F .text	0000000c _cleanup_r
0804400c g     F .text	0000007c alt_io_redirect
080472b8 g       *ABS*	00000000 __DTOR_END__
08043eac g     F .text	0000009c alt_exception_cause_generated_bad_addr
080431e8 g     F .text	00000050 alt_up_audio_read_fifo_head
080425c4 g     F .text	0000021c altera_avalon_jtag_uart_read
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08040f90 g     F .text	00000064 .hidden __udivsi3
08046da0 g     F .text	000000a4 isatty
08041514 g     F .text	000000c8 .hidden __lesf2
080446b4 g     F .text	00000090 alt_icache_flush
0804ab50 g     O .bss	00000004 __malloc_top_pad
08043364 g     F .text	00000080 alt_up_av_config_read_data
0804ab20 g     O .bss	00000004 audio_dev
0804678c g     F .text	00000054 _sbrk_r
08046be4 g     F .text	00000060 _read_r
08048fc0 g     O .rwdata	00000004 alt_max_fd
08043238 g     F .text	00000068 alt_up_audio_write_fifo_head
080469d0 g     F .text	000000f0 _fclose_r
08045310 g     F .text	00000030 fflush
08048f8c g     O .rwdata	00000004 effect1_buffer
0804ab4c g     O .bss	00000004 __malloc_max_sbrked_mem
0804ab1c g     O .bss	00000004 current_index2
08046e80 g     F .text	000000d4 lseek
08040458 g     F .text	00000188 combined_play
08048fa4 g     O .rwdata	00000004 _global_impure_ptr
0804ac7c g       *ABS*	00000000 __bss_end
08041934 g     F .text	000000f0 alt_iic_isr_register
080443dc g     F .text	00000108 alt_tick
08042af8 g     F .text	0000003c alt_up_audio_open_dev
0804ab08 g     O .bss	00000004 effect4_avg
080456b0 g     F .text	00000018 __fp_lock_all
080418e8 g     F .text	0000004c alt_ic_irq_enabled
0804ab10 g     O .bss	00000004 state
08042f30 g     F .text	00000068 alt_up_audio_play_r
08044340 g     F .text	0000009c alt_alarm_stop
080406dc g     F .text	000000ac effects_isr
0804aaf4 g     O .bss	00000004 buffer_avg
0804ab28 g     O .bss	00000004 alt_irq_active
080400fc g     F .exceptions	000000d4 alt_irq_handler
080489d4 g     O .rwdata	00000028 alt_dev_null
0804ab14 g     O .bss	00000004 beat_state
08043bd4 g     F .text	00000048 alt_dcache_flush_all
08048fdc g       *ABS*	00000000 __ram_rwdata_end
08048fb8 g     O .rwdata	00000008 alt_dev_list
080471c0 g     F .text	000000f8 write
08044954 g     F .text	000000a0 _putc_r
080474c4 g       *ABS*	00000000 __ram_rodata_end
08046cb4 g     F .text	000000b0 fstat
0804ab24 g     O .bss	00000004 audio_conf
08040ff4 g     F .text	00000058 .hidden __umodsi3
0804ac7c g       *ABS*	00000000 end
08042100 g     F .text	000000c0 altera_avalon_jtag_uart_init
080401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080472b8 g       *ABS*	00000000 __CTOR_LIST__
08080000 g       *ABS*	00000000 __alt_stack_pointer
08042a7c g     F .text	0000007c alt_avalon_timer_sc_init
080416cc g     F .text	00000064 .hidden __clzsi2
080427e0 g     F .text	00000224 altera_avalon_jtag_uart_write
080456a0 g     F .text	00000004 __sfp_lock_acquire
08048f88 g     O .rwdata	00000004 audio_buffer2
08045804 g     F .text	00000310 _free_r
08041b8c g     F .text	0000022c alt_printf
08044f18 g     F .text	00000180 __call_exitprocs
08048fd0 g     O .rwdata	00000004 __malloc_sbrk_base
08040244 g     F .text	0000004c _start
0804ab3c g     O .bss	00000004 _alt_tick_rate
080430e0 g     F .text	00000108 alt_up_audio_write_fifo
08043300 g     F .text	00000064 alt_up_av_config_write_data
0804ab40 g     O .bss	00000004 _alt_nticks
080405e0 g     F .text	000000fc play
08046fd8 g     F .text	000000fc read
08041f14 g     F .text	00000088 alt_sys_init
08043000 g     F .text	000000e0 alt_up_audio_read_fifo
08044e00 g     F .text	00000118 __register_exitproc
08043944 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
08042c34 g     F .text	00000058 alt_up_audio_disable_write_interrupt
0804246c g     F .text	00000068 altera_avalon_jtag_uart_close
080474c4 g       *ABS*	00000000 __ram_rwdata_start
080472b8 g       *ABS*	00000000 __ram_rodata_start
0804ab54 g     O .bss	00000028 __malloc_current_mallinfo
08041f9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08044610 g     F .text	000000a4 alt_get_fd
0804697c g     F .text	00000054 _close_r
08042be0 g     F .text	00000054 alt_up_audio_enable_write_interrupt
08044790 g     F .text	0000007c memcmp
0804205c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0804ac7c g       *ABS*	00000000 __alt_stack_base
080420ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08044cac g     F .text	00000154 __swsetup_r
08042b88 g     F .text	00000058 alt_up_audio_disable_read_interrupt
08045560 g     F .text	00000118 __sfp
08048f90 g     O .rwdata	00000004 effect2_buffer
08048b7c g     O .rwdata	00000408 __malloc_av_
080456ac g     F .text	00000004 __sinit_lock_release
080467e0 g     F .text	00000054 __sread
08044508 g     F .text	00000108 alt_find_file
08043c84 g     F .text	000000a4 alt_dev_llist_insert
08046f54 g     F .text	00000024 __malloc_lock
080470d4 g     F .text	000000b0 sbrk
080452b4 g     F .text	0000005c _fflush_r
0804aaf4 g       *ABS*	00000000 __bss_start
08046664 g     F .text	00000128 memset
080408bc g     F .text	000005dc main
08042ed0 g     F .text	00000060 alt_up_audio_write_fifo_space
0804ab34 g     O .bss	00000004 alt_envp
0804ab48 g     O .bss	00000004 __malloc_max_total_mem
08041ffc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08044c94 g     F .text	00000018 __swbuf
08041514 g     F .text	000000c8 .hidden __ltsf2
08046914 g     F .text	00000008 __sclose
08080000 g       *ABS*	00000000 __alt_heap_limit
08046ac0 g     F .text	00000014 fclose
08045e58 g     F .text	0000080c _malloc_r
08048fc4 g     O .rwdata	00000004 alt_errno
08045b14 g     F .text	000000c4 _fwalk
080449f4 g     F .text	000000c8 putc
08040e98 g     F .text	00000084 .hidden __divsi3
080456e0 g     F .text	00000124 _malloc_trim_r
080472b8 g       *ABS*	00000000 __CTOR_END__
080472b8 g       *ABS*	00000000 __flash_rodata_start
080472b8 g       *ABS*	00000000 __DTOR_LIST__
08040290 g     F .text	00000080 delay
080432a0 g     F .text	00000060 alt_up_av_config_open_dev
08041edc g     F .text	00000038 alt_irq_init
080442dc g     F .text	00000064 alt_release_fd
08048f98 g     O .rwdata	00000004 effect4_buffer
0804734f g     O .rodata	00000100 .hidden __clz_tab
08044744 g     F .text	00000014 atexit
0804691c g     F .text	00000060 _write_r
080434e0 g     F .text	00000038 alt_up_av_config_read_ready
08048fa8 g     O .rwdata	00000004 _impure_ptr
0804ab2c g     O .bss	00000004 alt_argc
08045098 g     F .text	0000021c __sflush_r
08043d88 g     F .text	00000060 _do_dtors
0804ab18 g     O .bss	00000004 current_index
0804aafc g     O .bss	00000004 effect1_avg
08048f84 g     O .rwdata	00000004 audio_buffer
08040020 g       .exceptions	00000000 alt_irq_entry
080456c8 g     F .text	00000018 __fp_unlock_all
08048fb0 g     O .rwdata	00000008 alt_fs_list
08042e68 g     F .text	00000068 alt_up_audio_record_l
08040020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0804341c g     F .text	00000038 alt_up_av_config_enable_interrupt
08041784 g     F .text	00000050 alt_ic_isr_register
08043488 g     F .text	00000058 alt_up_av_config_read_acknowledge
080437e4 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
08048fdc g       *ABS*	00000000 _edata
0804ac7c g       *ABS*	00000000 _end
08040244 g       *ABS*	00000000 __ram_exceptions_end
080424d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08048f9c g     O .rwdata	00000004 captured_val
08042f98 g     F .text	00000068 alt_up_audio_play_l
0804185c g     F .text	0000008c alt_ic_irq_disable
0804683c g     F .text	0000007c __swrite
08048fd4 g     O .rwdata	00000004 __malloc_trim_threshold
08044758 g     F .text	00000038 exit
08045bd8 g     F .text	000000c4 _fwalk_reent
080415dc g     F .text	000000f0 .hidden __floatunsisf
080438ec g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
08040f1c g     F .text	00000074 .hidden __modsi3
0804ab04 g     O .bss	00000004 effect3_avg
08080000 g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
080456a4 g     F .text	00000004 __sfp_lock_release
08046c44 g     F .text	00000034 _exit
0804399c g     F .text	0000012c alt_alarm_start
08045c9c g     F .text	000001bc __smakebuf_r
08044abc g     F .text	00000098 strlen
08044188 g     F .text	00000154 open
08041db8 g     F .text	0000003c alt_putchar
08041730 g     F .text	0000004c clock
080435bc g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
08040310 g     F .text	00000148 record
08043e78 g     F .text	00000034 alt_icache_flush_all
08048fac g     O .rwdata	00000004 alt_priority_mask
080417d4 g     F .text	00000088 alt_ic_irq_enable
08043894 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
08048fc8 g     O .rwdata	00000008 alt_alarm_list
08043d28 g     F .text	00000060 _do_ctors
08048fa0 g     O .rwdata	00000004 sw_val
08043b04 g     F .text	000000d0 close
0804104c g     F .text	000004c8 .hidden __addsf3
08041a8c g     F .text	00000084 alt_load
08042b34 g     F .text	00000054 alt_up_audio_enable_read_interrupt
080436a4 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
080456a8 g     F .text	00000004 __sinit_lock_acquire
0804378c g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
08042c8c g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

08040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 804000c:	00bffd16 	blt	zero,r2,8040004 <__alt_data_end+0xfffc0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040010:	00420134 	movhi	at,2052
    ori r1, r1, %lo(_start)
 8040014:	08409114 	ori	at,at,580
    jmp r1
 8040018:	0800683a 	jmp	at
 804001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8040098:	80401d00 	call	80401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0fffb17 	ldw	r3,-20(fp)
 8040130:	e0bffc17 	ldw	r2,-16(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001426 	beq	r2,zero,804018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 804013c:	00820174 	movhi	r2,2053
 8040140:	10aadf04 	addi	r2,r2,-21636
 8040144:	e0fffd17 	ldw	r3,-12(fp)
 8040148:	180690fa 	slli	r3,r3,3
 804014c:	10c5883a 	add	r2,r2,r3
 8040150:	10c00017 	ldw	r3,0(r2)
 8040154:	00820174 	movhi	r2,2053
 8040158:	10aadf04 	addi	r2,r2,-21636
 804015c:	e13ffd17 	ldw	r4,-12(fp)
 8040160:	200890fa 	slli	r4,r4,3
 8040164:	1105883a 	add	r2,r2,r4
 8040168:	10800104 	addi	r2,r2,4
 804016c:	10800017 	ldw	r2,0(r2)
 8040170:	1009883a 	mov	r4,r2
 8040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 804017c:	0005313a 	rdctl	r2,ipending
 8040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8040184:	e0bfff17 	ldw	r2,-4(fp)
 8040188:	00000706 	br	80401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 804018c:	e0bffc17 	ldw	r2,-16(fp)
 8040190:	1085883a 	add	r2,r2,r2
 8040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8040198:	e0bffd17 	ldw	r2,-12(fp)
 804019c:	10800044 	addi	r2,r2,1
 80401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80401a4:	003fe106 	br	804012c <__alt_data_end+0xfffc012c>

    active = alt_irq_pending ();
 80401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80401ac:	e0bffb17 	ldw	r2,-20(fp)
 80401b0:	103fdb1e 	bne	r2,zero,8040120 <__alt_data_end+0xfffc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401b4:	0001883a 	nop
}
 80401b8:	0001883a 	nop
 80401bc:	e037883a 	mov	sp,fp
 80401c0:	dfc00117 	ldw	ra,4(sp)
 80401c4:	df000017 	ldw	fp,0(sp)
 80401c8:	dec00204 	addi	sp,sp,8
 80401cc:	f800283a 	ret

080401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401d0:	defffb04 	addi	sp,sp,-20
 80401d4:	dfc00415 	stw	ra,16(sp)
 80401d8:	df000315 	stw	fp,12(sp)
 80401dc:	df000304 	addi	fp,sp,12
 80401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80401e4:	000531fa 	rdctl	r2,exception
 80401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80401ec:	e0bffd17 	ldw	r2,-12(fp)
 80401f0:	10801f0c 	andi	r2,r2,124
 80401f4:	1004d0ba 	srli	r2,r2,2
 80401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80401fc:	0005333a 	rdctl	r2,badaddr
 8040200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8040204:	d0a6ed17 	ldw	r2,-25676(gp)
 8040208:	10000726 	beq	r2,zero,8040228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 804020c:	d0a6ed17 	ldw	r2,-25676(gp)
 8040210:	e0fffd17 	ldw	r3,-12(fp)
 8040214:	e1bffe17 	ldw	r6,-8(fp)
 8040218:	e17fff17 	ldw	r5,-4(fp)
 804021c:	1809883a 	mov	r4,r3
 8040220:	103ee83a 	callr	r2
 8040224:	00000206 	br	8040230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8040228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 804022c:	0005883a 	mov	r2,zero
}
 8040230:	e037883a 	mov	sp,fp
 8040234:	dfc00117 	ldw	ra,4(sp)
 8040238:	df000017 	ldw	fp,0(sp)
 804023c:	dec00204 	addi	sp,sp,8
 8040240:	f800283a 	ret

Disassembly of section .text:

08040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8040244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8040248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 804024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8040250:	00bffd16 	blt	zero,r2,8040248 <__alt_data_end+0xfffc0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8040254:	06c20234 	movhi	sp,2056
    ori sp, sp, %lo(__alt_stack_pointer)
 8040258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 804025c:	06820174 	movhi	gp,2053
    ori gp, gp, %lo(_gp)
 8040260:	d683e114 	ori	gp,gp,3972
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8040264:	00820134 	movhi	r2,2052
    ori r2, r2, %lo(__bss_start)
 8040268:	10aabd14 	ori	r2,r2,43764

    movhi r3, %hi(__bss_end)
 804026c:	00c20134 	movhi	r3,2052
    ori r3, r3, %lo(__bss_end)
 8040270:	18eb1f14 	ori	r3,r3,44156

    beq r2, r3, 1f
 8040274:	10c00326 	beq	r2,r3,8040284 <_start+0x40>

0:
    stw zero, (r2)
 8040278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 804027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8040280:	10fffd36 	bltu	r2,r3,8040278 <__alt_data_end+0xfffc0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8040284:	8041a8c0 	call	8041a8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8040288:	8041b100 	call	8041b10 <alt_main>

0804028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 804028c:	003fff06 	br	804028c <__alt_data_end+0xfffc028c>

08040290 <delay>:
unsigned int current_index2 = 0;
alt_up_audio_dev * audio_dev;
alt_up_av_config_dev *audio_conf;

void delay(float milli_seconds)
{
 8040290:	defffb04 	addi	sp,sp,-20
 8040294:	dfc00415 	stw	ra,16(sp)
 8040298:	df000315 	stw	fp,12(sp)
 804029c:	dc000215 	stw	r16,8(sp)
 80402a0:	df000304 	addi	fp,sp,12
 80402a4:	e13ffe15 	stw	r4,-8(fp)
    // Stroing start time
    clock_t start_time = clock();
 80402a8:	80417300 	call	8041730 <clock>
 80402ac:	e0bffd15 	stw	r2,-12(fp)

    // looping till required time is not acheived
    while (clock() < start_time + milli_seconds)
 80402b0:	0001883a 	nop
 80402b4:	80417300 	call	8041730 <clock>
 80402b8:	1009883a 	mov	r4,r2
 80402bc:	80415dc0 	call	80415dc <__floatunsisf>
 80402c0:	1021883a 	mov	r16,r2
 80402c4:	e13ffd17 	ldw	r4,-12(fp)
 80402c8:	80415dc0 	call	80415dc <__floatunsisf>
 80402cc:	1007883a 	mov	r3,r2
 80402d0:	e17ffe17 	ldw	r5,-8(fp)
 80402d4:	1809883a 	mov	r4,r3
 80402d8:	804104c0 	call	804104c <__addsf3>
 80402dc:	1007883a 	mov	r3,r2
 80402e0:	1805883a 	mov	r2,r3
 80402e4:	100b883a 	mov	r5,r2
 80402e8:	8009883a 	mov	r4,r16
 80402ec:	80415140 	call	8041514 <__lesf2>
 80402f0:	103ff016 	blt	r2,zero,80402b4 <__alt_data_end+0xfffc02b4>
        ;
}
 80402f4:	0001883a 	nop
 80402f8:	e6ffff04 	addi	sp,fp,-4
 80402fc:	dfc00217 	ldw	ra,8(sp)
 8040300:	df000117 	ldw	fp,4(sp)
 8040304:	dc000017 	ldw	r16,0(sp)
 8040308:	dec00304 	addi	sp,sp,12
 804030c:	f800283a 	ret

08040310 <record>:

void record(unsigned int* addr,unsigned int duration,unsigned int* avg,alt_up_audio_dev * audio_dev){
 8040310:	defff804 	addi	sp,sp,-32
 8040314:	dfc00715 	stw	ra,28(sp)
 8040318:	df000615 	stw	fp,24(sp)
 804031c:	df000604 	addi	fp,sp,24
 8040320:	e13ffc15 	stw	r4,-16(fp)
 8040324:	e17ffd15 	stw	r5,-12(fp)
 8040328:	e1bffe15 	stw	r6,-8(fp)
 804032c:	e1ffff15 	stw	r7,-4(fp)
	alt_printf("Get ready to mingle\n");
 8040330:	01020134 	movhi	r4,2052
 8040334:	211cae04 	addi	r4,r4,29368
 8040338:	8041b8c0 	call	8041b8c <alt_printf>
	alt_up_audio_reset_audio_core(audio_dev);
 804033c:	e13fff17 	ldw	r4,-4(fp)
 8040340:	8042d0c0 	call	8042d0c <alt_up_audio_reset_audio_core>
	for(int index=0;index<duration*SAMPLING_RATE;index++){
 8040344:	e03ffa15 	stw	zero,-24(fp)
 8040348:	00002f06 	br	8040408 <record+0xf8>
		int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);
 804034c:	01400044 	movi	r5,1
 8040350:	e13fff17 	ldw	r4,-4(fp)
 8040354:	8042da00 	call	8042da0 <alt_up_audio_read_fifo_avail>
 8040358:	e0bffb15 	stw	r2,-20(fp)
		if ( fifospace > 0 ) // check if data is available
 804035c:	e0bffb17 	ldw	r2,-20(fp)
 8040360:	0080230e 	bge	zero,r2,80403f0 <record+0xe0>
		{
			alt_up_audio_read_fifo (audio_dev, (addr+index), 1, ALT_UP_AUDIO_RIGHT);
 8040364:	e0bffa17 	ldw	r2,-24(fp)
 8040368:	1085883a 	add	r2,r2,r2
 804036c:	1085883a 	add	r2,r2,r2
 8040370:	1007883a 	mov	r3,r2
 8040374:	e0bffc17 	ldw	r2,-16(fp)
 8040378:	10c5883a 	add	r2,r2,r3
 804037c:	01c00044 	movi	r7,1
 8040380:	01800044 	movi	r6,1
 8040384:	100b883a 	mov	r5,r2
 8040388:	e13fff17 	ldw	r4,-4(fp)
 804038c:	80430000 	call	8043000 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo (audio_dev, (addr+index), 1, ALT_UP_AUDIO_LEFT);
 8040390:	e0bffa17 	ldw	r2,-24(fp)
 8040394:	1085883a 	add	r2,r2,r2
 8040398:	1085883a 	add	r2,r2,r2
 804039c:	1007883a 	mov	r3,r2
 80403a0:	e0bffc17 	ldw	r2,-16(fp)
 80403a4:	10c5883a 	add	r2,r2,r3
 80403a8:	000f883a 	mov	r7,zero
 80403ac:	01800044 	movi	r6,1
 80403b0:	100b883a 	mov	r5,r2
 80403b4:	e13fff17 	ldw	r4,-4(fp)
 80403b8:	80430000 	call	8043000 <alt_up_audio_read_fifo>
			*avg=*avg+*(addr+index);
 80403bc:	e0bffe17 	ldw	r2,-8(fp)
 80403c0:	10c00017 	ldw	r3,0(r2)
 80403c4:	e0bffa17 	ldw	r2,-24(fp)
 80403c8:	1085883a 	add	r2,r2,r2
 80403cc:	1085883a 	add	r2,r2,r2
 80403d0:	1009883a 	mov	r4,r2
 80403d4:	e0bffc17 	ldw	r2,-16(fp)
 80403d8:	1105883a 	add	r2,r2,r4
 80403dc:	10800017 	ldw	r2,0(r2)
 80403e0:	1887883a 	add	r3,r3,r2
 80403e4:	e0bffe17 	ldw	r2,-8(fp)
 80403e8:	10c00015 	stw	r3,0(r2)
 80403ec:	00000306 	br	80403fc <record+0xec>
		}
		else{
			index=index-1;
 80403f0:	e0bffa17 	ldw	r2,-24(fp)
 80403f4:	10bfffc4 	addi	r2,r2,-1
 80403f8:	e0bffa15 	stw	r2,-24(fp)
}

void record(unsigned int* addr,unsigned int duration,unsigned int* avg,alt_up_audio_dev * audio_dev){
	alt_printf("Get ready to mingle\n");
	alt_up_audio_reset_audio_core(audio_dev);
	for(int index=0;index<duration*SAMPLING_RATE;index++){
 80403fc:	e0bffa17 	ldw	r2,-24(fp)
 8040400:	10800044 	addi	r2,r2,1
 8040404:	e0bffa15 	stw	r2,-24(fp)
 8040408:	e0fffd17 	ldw	r3,-12(fp)
 804040c:	00aee014 	movui	r2,48000
 8040410:	1885383a 	mul	r2,r3,r2
 8040414:	e0fffa17 	ldw	r3,-24(fp)
 8040418:	18bfcc36 	bltu	r3,r2,804034c <__alt_data_end+0xfffc034c>
		}
		else{
			index=index-1;
		}
	}
	*avg=*avg/(DURATION*SAMPLING_RATE);
 804041c:	e0bffe17 	ldw	r2,-8(fp)
 8040420:	10800017 	ldw	r2,0(r2)
 8040424:	01400134 	movhi	r5,4
 8040428:	296a6004 	addi	r5,r5,-22144
 804042c:	1009883a 	mov	r4,r2
 8040430:	8040f900 	call	8040f90 <__udivsi3>
 8040434:	1007883a 	mov	r3,r2
 8040438:	e0bffe17 	ldw	r2,-8(fp)
 804043c:	10c00015 	stw	r3,0(r2)
}
 8040440:	0001883a 	nop
 8040444:	e037883a 	mov	sp,fp
 8040448:	dfc00117 	ldw	ra,4(sp)
 804044c:	df000017 	ldw	fp,0(sp)
 8040450:	dec00204 	addi	sp,sp,8
 8040454:	f800283a 	ret

08040458 <combined_play>:



void combined_play(unsigned int* first_sound,unsigned int first_duration,unsigned int* second_sound,unsigned int second_duration,alt_up_audio_dev * audio_dev,unsigned int volume){
 8040458:	defff404 	addi	sp,sp,-48
 804045c:	dfc00b15 	stw	ra,44(sp)
 8040460:	df000a15 	stw	fp,40(sp)
 8040464:	df000a04 	addi	fp,sp,40
 8040468:	e13ffc15 	stw	r4,-16(fp)
 804046c:	e17ffd15 	stw	r5,-12(fp)
 8040470:	e1bffe15 	stw	r6,-8(fp)
 8040474:	e1ffff15 	stw	r7,-4(fp)
	unsigned int intermediate=0;
 8040478:	e03ffb15 	stw	zero,-20(fp)
	unsigned int min_duration=first_duration;
 804047c:	e0bffd17 	ldw	r2,-12(fp)
 8040480:	e0bff615 	stw	r2,-40(fp)
	unsigned int max_duration=second_duration;
 8040484:	e0bfff17 	ldw	r2,-4(fp)
 8040488:	e0bff715 	stw	r2,-36(fp)
	unsigned int* max_sound =second_sound;
 804048c:	e0bffe17 	ldw	r2,-8(fp)
 8040490:	e0bff815 	stw	r2,-32(fp)
	unsigned int* min_sound =first_sound;
 8040494:	e0bffc17 	ldw	r2,-16(fp)
 8040498:	e0bff915 	stw	r2,-28(fp)
	if(first_duration>second_duration){
 804049c:	e0bffd17 	ldw	r2,-12(fp)
 80404a0:	e0ffff17 	ldw	r3,-4(fp)
 80404a4:	1880082e 	bgeu	r3,r2,80404c8 <combined_play+0x70>
		min_duration=second_duration;
 80404a8:	e0bfff17 	ldw	r2,-4(fp)
 80404ac:	e0bff615 	stw	r2,-40(fp)
		max_duration=first_duration;
 80404b0:	e0bffd17 	ldw	r2,-12(fp)
 80404b4:	e0bff715 	stw	r2,-36(fp)
		max_sound=first_sound;
 80404b8:	e0bffc17 	ldw	r2,-16(fp)
 80404bc:	e0bff815 	stw	r2,-32(fp)
		min_sound =second_sound;
 80404c0:	e0bffe17 	ldw	r2,-8(fp)
 80404c4:	e0bff915 	stw	r2,-28(fp)
	}
	for(int index=current_index2;index<max_duration*SAMPLING_RATE;index++){
 80404c8:	d0a6e617 	ldw	r2,-25704(gp)
 80404cc:	e0bffa15 	stw	r2,-24(fp)
 80404d0:	00003506 	br	80405a8 <combined_play+0x150>
		delay((1000/SAMPLING_RATE));
 80404d4:	0009883a 	mov	r4,zero
 80404d8:	80402900 	call	8040290 <delay>
		if(index<min_duration*SAMPLING_RATE)
 80404dc:	e0fff617 	ldw	r3,-40(fp)
 80404e0:	00aee014 	movui	r2,48000
 80404e4:	1885383a 	mul	r2,r3,r2
 80404e8:	e0fffa17 	ldw	r3,-24(fp)
 80404ec:	1880132e 	bgeu	r3,r2,804053c <combined_play+0xe4>
			intermediate = volume*((*(max_sound+index))+(*(min_sound+index)));
 80404f0:	e0bffa17 	ldw	r2,-24(fp)
 80404f4:	1085883a 	add	r2,r2,r2
 80404f8:	1085883a 	add	r2,r2,r2
 80404fc:	1007883a 	mov	r3,r2
 8040500:	e0bff817 	ldw	r2,-32(fp)
 8040504:	10c5883a 	add	r2,r2,r3
 8040508:	10c00017 	ldw	r3,0(r2)
 804050c:	e0bffa17 	ldw	r2,-24(fp)
 8040510:	1085883a 	add	r2,r2,r2
 8040514:	1085883a 	add	r2,r2,r2
 8040518:	1009883a 	mov	r4,r2
 804051c:	e0bff917 	ldw	r2,-28(fp)
 8040520:	1105883a 	add	r2,r2,r4
 8040524:	10800017 	ldw	r2,0(r2)
 8040528:	1887883a 	add	r3,r3,r2
 804052c:	e0800317 	ldw	r2,12(fp)
 8040530:	1885383a 	mul	r2,r3,r2
 8040534:	e0bffb15 	stw	r2,-20(fp)
 8040538:	00000a06 	br	8040564 <combined_play+0x10c>
		else
			intermediate = volume*(*(max_sound+index));
 804053c:	e0bffa17 	ldw	r2,-24(fp)
 8040540:	1085883a 	add	r2,r2,r2
 8040544:	1085883a 	add	r2,r2,r2
 8040548:	1007883a 	mov	r3,r2
 804054c:	e0bff817 	ldw	r2,-32(fp)
 8040550:	10c5883a 	add	r2,r2,r3
 8040554:	10c00017 	ldw	r3,0(r2)
 8040558:	e0800317 	ldw	r2,12(fp)
 804055c:	1885383a 	mul	r2,r3,r2
 8040560:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_write_fifo (audio_dev, &intermediate, 1, ALT_UP_AUDIO_RIGHT);
 8040564:	e0bffb04 	addi	r2,fp,-20
 8040568:	01c00044 	movi	r7,1
 804056c:	01800044 	movi	r6,1
 8040570:	100b883a 	mov	r5,r2
 8040574:	e1000217 	ldw	r4,8(fp)
 8040578:	80430e00 	call	80430e0 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, &intermediate, 1, ALT_UP_AUDIO_LEFT);
 804057c:	e0bffb04 	addi	r2,fp,-20
 8040580:	000f883a 	mov	r7,zero
 8040584:	01800044 	movi	r6,1
 8040588:	100b883a 	mov	r5,r2
 804058c:	e1000217 	ldw	r4,8(fp)
 8040590:	80430e00 	call	80430e0 <alt_up_audio_write_fifo>
		delay((1000/SAMPLING_RATE));
 8040594:	0009883a 	mov	r4,zero
 8040598:	80402900 	call	8040290 <delay>
		min_duration=second_duration;
		max_duration=first_duration;
		max_sound=first_sound;
		min_sound =second_sound;
	}
	for(int index=current_index2;index<max_duration*SAMPLING_RATE;index++){
 804059c:	e0bffa17 	ldw	r2,-24(fp)
 80405a0:	10800044 	addi	r2,r2,1
 80405a4:	e0bffa15 	stw	r2,-24(fp)
 80405a8:	e0fff717 	ldw	r3,-36(fp)
 80405ac:	00aee014 	movui	r2,48000
 80405b0:	1885383a 	mul	r2,r3,r2
 80405b4:	e0fffa17 	ldw	r3,-24(fp)
 80405b8:	18bfc636 	bltu	r3,r2,80404d4 <__alt_data_end+0xfffc04d4>
			intermediate = volume*(*(max_sound+index));
		alt_up_audio_write_fifo (audio_dev, &intermediate, 1, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_write_fifo (audio_dev, &intermediate, 1, ALT_UP_AUDIO_LEFT);
		delay((1000/SAMPLING_RATE));
	}
	current_index2 = 0;
 80405bc:	d026e615 	stw	zero,-25704(gp)
	alt_up_audio_reset_audio_core(audio_dev);
 80405c0:	e1000217 	ldw	r4,8(fp)
 80405c4:	8042d0c0 	call	8042d0c <alt_up_audio_reset_audio_core>
}
 80405c8:	0001883a 	nop
 80405cc:	e037883a 	mov	sp,fp
 80405d0:	dfc00117 	ldw	ra,4(sp)
 80405d4:	df000017 	ldw	fp,0(sp)
 80405d8:	dec00204 	addi	sp,sp,8
 80405dc:	f800283a 	ret

080405e0 <play>:

void play(unsigned int* addr,unsigned int duration,unsigned int volume,alt_up_audio_dev * audio_dev,unsigned int delaying){
 80405e0:	defff804 	addi	sp,sp,-32
 80405e4:	dfc00715 	stw	ra,28(sp)
 80405e8:	df000615 	stw	fp,24(sp)
 80405ec:	df000604 	addi	fp,sp,24
 80405f0:	e13ffc15 	stw	r4,-16(fp)
 80405f4:	e17ffd15 	stw	r5,-12(fp)
 80405f8:	e1bffe15 	stw	r6,-8(fp)
 80405fc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int intermediate=0;
 8040600:	e03ffb15 	stw	zero,-20(fp)
	for(int index=0;(index<duration*SAMPLING_RATE) && (beat_state==IDLE);index++){
 8040604:	e03ffa15 	stw	zero,-24(fp)
 8040608:	00002306 	br	8040698 <play+0xb8>
		current_index = index;
 804060c:	e0bffa17 	ldw	r2,-24(fp)
 8040610:	d0a6e515 	stw	r2,-25708(gp)
		delay((8000/SAMPLING_RATE));
 8040614:	0009883a 	mov	r4,zero
 8040618:	80402900 	call	8040290 <delay>
		alt_up_audio_write_fifo_head(audio_dev, (*(addr+index))*volume, ALT_UP_AUDIO_RIGHT);
 804061c:	e0bffa17 	ldw	r2,-24(fp)
 8040620:	1085883a 	add	r2,r2,r2
 8040624:	1085883a 	add	r2,r2,r2
 8040628:	1007883a 	mov	r3,r2
 804062c:	e0bffc17 	ldw	r2,-16(fp)
 8040630:	10c5883a 	add	r2,r2,r3
 8040634:	10c00017 	ldw	r3,0(r2)
 8040638:	e0bffe17 	ldw	r2,-8(fp)
 804063c:	1885383a 	mul	r2,r3,r2
 8040640:	01800044 	movi	r6,1
 8040644:	100b883a 	mov	r5,r2
 8040648:	e13fff17 	ldw	r4,-4(fp)
 804064c:	80432380 	call	8043238 <alt_up_audio_write_fifo_head>
		alt_up_audio_write_fifo_head(audio_dev, (*(addr+index))*volume, ALT_UP_AUDIO_LEFT);
 8040650:	e0bffa17 	ldw	r2,-24(fp)
 8040654:	1085883a 	add	r2,r2,r2
 8040658:	1085883a 	add	r2,r2,r2
 804065c:	1007883a 	mov	r3,r2
 8040660:	e0bffc17 	ldw	r2,-16(fp)
 8040664:	10c5883a 	add	r2,r2,r3
 8040668:	10c00017 	ldw	r3,0(r2)
 804066c:	e0bffe17 	ldw	r2,-8(fp)
 8040670:	1885383a 	mul	r2,r3,r2
 8040674:	000d883a 	mov	r6,zero
 8040678:	100b883a 	mov	r5,r2
 804067c:	e13fff17 	ldw	r4,-4(fp)
 8040680:	80432380 	call	8043238 <alt_up_audio_write_fifo_head>
		delay((8000/SAMPLING_RATE));
 8040684:	0009883a 	mov	r4,zero
 8040688:	80402900 	call	8040290 <delay>
	alt_up_audio_reset_audio_core(audio_dev);
}

void play(unsigned int* addr,unsigned int duration,unsigned int volume,alt_up_audio_dev * audio_dev,unsigned int delaying){
	unsigned int intermediate=0;
	for(int index=0;(index<duration*SAMPLING_RATE) && (beat_state==IDLE);index++){
 804068c:	e0bffa17 	ldw	r2,-24(fp)
 8040690:	10800044 	addi	r2,r2,1
 8040694:	e0bffa15 	stw	r2,-24(fp)
 8040698:	e0fffd17 	ldw	r3,-12(fp)
 804069c:	00aee014 	movui	r2,48000
 80406a0:	1885383a 	mul	r2,r3,r2
 80406a4:	e0fffa17 	ldw	r3,-24(fp)
 80406a8:	1880022e 	bgeu	r3,r2,80406b4 <play+0xd4>
 80406ac:	d0a6e417 	ldw	r2,-25712(gp)
 80406b0:	103fd626 	beq	r2,zero,804060c <__alt_data_end+0xfffc060c>
		alt_up_audio_write_fifo_head(audio_dev, (*(addr+index))*volume, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_write_fifo_head(audio_dev, (*(addr+index))*volume, ALT_UP_AUDIO_LEFT);
		delay((8000/SAMPLING_RATE));
	}

	if(!interrupted)
 80406b4:	d0a6e217 	ldw	r2,-25720(gp)
 80406b8:	1000021e 	bne	r2,zero,80406c4 <play+0xe4>
		alt_up_audio_reset_audio_core(audio_dev);
 80406bc:	e13fff17 	ldw	r4,-4(fp)
 80406c0:	8042d0c0 	call	8042d0c <alt_up_audio_reset_audio_core>
}
 80406c4:	0001883a 	nop
 80406c8:	e037883a 	mov	sp,fp
 80406cc:	dfc00117 	ldw	ra,4(sp)
 80406d0:	df000017 	ldw	fp,0(sp)
 80406d4:	dec00204 	addi	sp,sp,8
 80406d8:	f800283a 	ret

080406dc <effects_isr>:
//    printf("Hello from task2\n");
//    OSTimeDlyHMSM(0, 0, 3, 0);
//  }
//}
/* The main function creates two task and starts multi-tasking */
void effects_isr(void* context){
 80406dc:	defffe04 	addi	sp,sp,-8
 80406e0:	df000115 	stw	fp,4(sp)
 80406e4:	df000104 	addi	fp,sp,4
 80406e8:	e13fff15 	stw	r4,-4(fp)

	captured_val=IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BUTTONS_BASE);
 80406ec:	00820234 	movhi	r2,2056
 80406f0:	10845304 	addi	r2,r2,4428
 80406f4:	10800037 	ldwio	r2,0(r2)
 80406f8:	d0a00615 	stw	r2,-32744(gp)
	if(captured_val==1){ // Right Button
 80406fc:	d0a00617 	ldw	r2,-32744(gp)
 8040700:	10800058 	cmpnei	r2,r2,1
 8040704:	1000031e 	bne	r2,zero,8040714 <effects_isr+0x38>
		beat_state=FIRST_COMBO;
 8040708:	00800044 	movi	r2,1
 804070c:	d0a6e415 	stw	r2,-25712(gp)
 8040710:	00001106 	br	8040758 <effects_isr+0x7c>
	}
	else if(captured_val==0xd){
 8040714:	d0a00617 	ldw	r2,-32744(gp)
 8040718:	10800358 	cmpnei	r2,r2,13
 804071c:	1000031e 	bne	r2,zero,804072c <effects_isr+0x50>
		beat_state=SECOND_COMBO;
 8040720:	00800084 	movi	r2,2
 8040724:	d0a6e415 	stw	r2,-25712(gp)
 8040728:	00000b06 	br	8040758 <effects_isr+0x7c>
	}
	else if(captured_val==0xb){
 804072c:	d0a00617 	ldw	r2,-32744(gp)
 8040730:	108002d8 	cmpnei	r2,r2,11
 8040734:	1000031e 	bne	r2,zero,8040744 <effects_isr+0x68>
		beat_state=THIRD_COMBO;
 8040738:	008000c4 	movi	r2,3
 804073c:	d0a6e415 	stw	r2,-25712(gp)
 8040740:	00000506 	br	8040758 <effects_isr+0x7c>
	}
	else if(captured_val==0x7){
 8040744:	d0a00617 	ldw	r2,-32744(gp)
 8040748:	108001d8 	cmpnei	r2,r2,7
 804074c:	1000021e 	bne	r2,zero,8040758 <effects_isr+0x7c>
		beat_state=FOURTH_COMBO;
 8040750:	00800104 	movi	r2,4
 8040754:	d0a6e415 	stw	r2,-25712(gp)
	}
	interrupted=1;
 8040758:	00800044 	movi	r2,1
 804075c:	d0a6e215 	stw	r2,-25720(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BUTTONS_BASE, 0xFFFFF);
 8040760:	00c00434 	movhi	r3,16
 8040764:	18ffffc4 	addi	r3,r3,-1
 8040768:	00820234 	movhi	r2,2056
 804076c:	10845304 	addi	r2,r2,4428
 8040770:	10c00035 	stwio	r3,0(r2)

}
 8040774:	0001883a 	nop
 8040778:	e037883a 	mov	sp,fp
 804077c:	df000017 	ldw	fp,0(sp)
 8040780:	dec00104 	addi	sp,sp,4
 8040784:	f800283a 	ret

08040788 <recording_isr>:
void recording_isr(void* context){
 8040788:	defffe04 	addi	sp,sp,-8
 804078c:	df000115 	stw	fp,4(sp)
 8040790:	df000104 	addi	fp,sp,4
 8040794:	e13fff15 	stw	r4,-4(fp)

	sw_val=IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_SW_BASE);
 8040798:	00820234 	movhi	r2,2056
 804079c:	10845704 	addi	r2,r2,4444
 80407a0:	10800037 	ldwio	r2,0(r2)
 80407a4:	d0a00715 	stw	r2,-32740(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_SW_BASE, 0xFFFFF);
 80407a8:	00c00434 	movhi	r3,16
 80407ac:	18ffffc4 	addi	r3,r3,-1
 80407b0:	00820234 	movhi	r2,2056
 80407b4:	10845704 	addi	r2,r2,4444
 80407b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_SW_BASE, 0);
 80407bc:	0007883a 	mov	r3,zero
 80407c0:	00820234 	movhi	r2,2056
 80407c4:	10845604 	addi	r2,r2,4440
 80407c8:	10c00035 	stwio	r3,0(r2)
	switch(sw_val)
 80407cc:	d0a00717 	ldw	r2,-32740(gp)
 80407d0:	10c00420 	cmpeqi	r3,r2,16
 80407d4:	1800271e 	bne	r3,zero,8040874 <recording_isr+0xec>
 80407d8:	10c00468 	cmpgeui	r3,r2,17
 80407dc:	1800091e 	bne	r3,zero,8040804 <recording_isr+0x7c>
 80407e0:	10c000a0 	cmpeqi	r3,r2,2
 80407e4:	18002b1e 	bne	r3,zero,8040894 <recording_isr+0x10c>
 80407e8:	10c000e8 	cmpgeui	r3,r2,3
 80407ec:	18002b26 	beq	r3,zero,804089c <recording_isr+0x114>
 80407f0:	10c00120 	cmpeqi	r3,r2,4
 80407f4:	1800241e 	bne	r3,zero,8040888 <recording_isr+0x100>
 80407f8:	10800220 	cmpeqi	r2,r2,8
 80407fc:	1000201e 	bne	r2,zero,8040880 <recording_isr+0xf8>
 8040800:	00002706 	br	80408a0 <recording_isr+0x118>
 8040804:	10c02020 	cmpeqi	r3,r2,128
 8040808:	1800111e 	bne	r3,zero,8040850 <recording_isr+0xc8>
 804080c:	10c02068 	cmpgeui	r3,r2,129
 8040810:	1800051e 	bne	r3,zero,8040828 <recording_isr+0xa0>
 8040814:	10c00820 	cmpeqi	r3,r2,32
 8040818:	1800131e 	bne	r3,zero,8040868 <recording_isr+0xe0>
 804081c:	10801020 	cmpeqi	r2,r2,64
 8040820:	10000e1e 	bne	r2,zero,804085c <recording_isr+0xd4>
 8040824:	00001e06 	br	80408a0 <recording_isr+0x118>
 8040828:	10c04020 	cmpeqi	r3,r2,256
 804082c:	1800051e 	bne	r3,zero,8040844 <recording_isr+0xbc>
 8040830:	10808020 	cmpeqi	r2,r2,512
 8040834:	10001a26 	beq	r2,zero,80408a0 <recording_isr+0x118>
	{
	case 0x200:
		state=FIRST_RECORDING;
 8040838:	00800044 	movi	r2,1
 804083c:	d0a6e315 	stw	r2,-25716(gp)
		break;
 8040840:	00001706 	br	80408a0 <recording_isr+0x118>
	case 0x100:
		state=SECOND_RECORDING;
 8040844:	00800084 	movi	r2,2
 8040848:	d0a6e315 	stw	r2,-25716(gp)
		break;
 804084c:	00001406 	br	80408a0 <recording_isr+0x118>
	case 0x80:
		state=THIRD_RECORDING;
 8040850:	008000c4 	movi	r2,3
 8040854:	d0a6e315 	stw	r2,-25716(gp)
		break;
 8040858:	00001106 	br	80408a0 <recording_isr+0x118>
	case 0x40:
		state=FOURTH_RECORDING;
 804085c:	00800104 	movi	r2,4
 8040860:	d0a6e315 	stw	r2,-25716(gp)
		break;
 8040864:	00000e06 	br	80408a0 <recording_isr+0x118>
	case 0x20:
		state=FIFTH_RECORDING;
 8040868:	00800144 	movi	r2,5
 804086c:	d0a6e315 	stw	r2,-25716(gp)
		break;
 8040870:	00000b06 	br	80408a0 <recording_isr+0x118>
	case 0x10:
		state=CONTINUOUS_PLAYBACK;
 8040874:	00800184 	movi	r2,6
 8040878:	d0a6e315 	stw	r2,-25716(gp)
		break;
 804087c:	00000806 	br	80408a0 <recording_isr+0x118>
	case 0x8:
		state=IDLE;
 8040880:	d026e315 	stw	zero,-25716(gp)
		break;
 8040884:	00000606 	br	80408a0 <recording_isr+0x118>
	case 0x4:
		state=FIRST_PLAYBACK;
 8040888:	008001c4 	movi	r2,7
 804088c:	d0a6e315 	stw	r2,-25716(gp)
		break;
 8040890:	00000306 	br	80408a0 <recording_isr+0x118>
	case 0x2:

		break;
 8040894:	0001883a 	nop
 8040898:	00000106 	br	80408a0 <recording_isr+0x118>
	case 0x1:

	break;
 804089c:	0001883a 	nop
	}

	interrupted=1;
 80408a0:	00800044 	movi	r2,1
 80408a4:	d0a6e215 	stw	r2,-25720(gp)
}
 80408a8:	0001883a 	nop
 80408ac:	e037883a 	mov	sp,fp
 80408b0:	df000017 	ldw	fp,0(sp)
 80408b4:	dec00104 	addi	sp,sp,4
 80408b8:	f800283a 	ret

080408bc <main>:
int main(void)
{
 80408bc:	defff804 	addi	sp,sp,-32
 80408c0:	dfc00715 	stw	ra,28(sp)
 80408c4:	df000615 	stw	fp,24(sp)
 80408c8:	df000604 	addi	fp,sp,24
	unsigned int l_buf=0;
 80408cc:	e03ffc15 	stw	zero,-16(fp)
	unsigned int curr_idx=0;
 80408d0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int start_idx=0;
 80408d4:	e03ffe15 	stw	zero,-8(fp)
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
 80408d8:	01020134 	movhi	r4,2052
 80408dc:	211cb404 	addi	r4,r4,29392
 80408e0:	8042af80 	call	8042af8 <alt_up_audio_open_dev>
 80408e4:	d0a6e715 	stw	r2,-25700(gp)
	audio_conf = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
 80408e8:	01020134 	movhi	r4,2052
 80408ec:	211cb804 	addi	r4,r4,29408
 80408f0:	80432a00 	call	80432a0 <alt_up_av_config_open_dev>
 80408f4:	d0a6e815 	stw	r2,-25696(gp)
		if ( audio_dev == NULL)
 80408f8:	d0a6e717 	ldw	r2,-25700(gp)
 80408fc:	1000041e 	bne	r2,zero,8040910 <main+0x54>
			alt_printf ("Error: could not open audio device \n");
 8040900:	01020134 	movhi	r4,2052
 8040904:	211cc004 	addi	r4,r4,29440
 8040908:	8041b8c0 	call	8041b8c <alt_printf>
 804090c:	00000306 	br	804091c <main+0x60>
		else
			alt_printf ("Opened audio device \n");
 8040910:	01020134 	movhi	r4,2052
 8040914:	211cca04 	addi	r4,r4,29480
 8040918:	8041b8c0 	call	8041b8c <alt_printf>
		/* read and echo audio data */
	alt_up_av_config_reset(audio_conf);
 804091c:	d0a6e817 	ldw	r2,-25696(gp)
 8040920:	1009883a 	mov	r4,r2
 8040924:	80433e40 	call	80433e4 <alt_up_av_config_reset>
	alt_up_audio_reset_audio_core(audio_dev);
 8040928:	d0a6e717 	ldw	r2,-25700(gp)
 804092c:	1009883a 	mov	r4,r2
 8040930:	8042d0c0 	call	8042d0c <alt_up_audio_reset_audio_core>
	alt_ic_isr_register(PIO_BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, PIO_BUTTONS_IRQ,effects_isr, NULL, NULL);
 8040934:	d8000015 	stw	zero,0(sp)
 8040938:	000f883a 	mov	r7,zero
 804093c:	01820134 	movhi	r6,2052
 8040940:	3181b704 	addi	r6,r6,1756
 8040944:	014000c4 	movi	r5,3
 8040948:	0009883a 	mov	r4,zero
 804094c:	80417840 	call	8041784 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_BUTTONS_BASE, 0xFF);
 8040950:	00c03fc4 	movi	r3,255
 8040954:	00820234 	movhi	r2,2056
 8040958:	10845204 	addi	r2,r2,4424
 804095c:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(PIO_SW_IRQ_INTERRUPT_CONTROLLER_ID, PIO_SW_IRQ,recording_isr, NULL, NULL);
 8040960:	d8000015 	stw	zero,0(sp)
 8040964:	000f883a 	mov	r7,zero
 8040968:	01820134 	movhi	r6,2052
 804096c:	3181e204 	addi	r6,r6,1928
 8040970:	01400084 	movi	r5,2
 8040974:	0009883a 	mov	r4,zero
 8040978:	80417840 	call	8041784 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_SW_BASE, 0xFFFF);
 804097c:	00ffffd4 	movui	r3,65535
 8040980:	00820234 	movhi	r2,2056
 8040984:	10845604 	addi	r2,r2,4440
 8040988:	10c00035 	stwio	r3,0(r2)
//	alt_ic_isr_register(PIO_SW_IRQ_INTERRUPT_CONTROLLER_ID, PIO_SW_IRQ,effects_isr, NULL, NULL);
//	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_SW_BASE, 0xFF);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, 0xFF);
 804098c:	00c03fc4 	movi	r3,255
 8040990:	00820234 	movhi	r2,2056
 8040994:	10842004 	addi	r2,r2,4224
 8040998:	10c00035 	stwio	r3,0(r2)
	alt_printf("Getting there\n");
 804099c:	01020134 	movhi	r4,2052
 80409a0:	211cd004 	addi	r4,r4,29504
 80409a4:	8041b8c0 	call	8041b8c <alt_printf>
	unsigned int current_idx=0;
 80409a8:	e03fff15 	stw	zero,-4(fp)
	while(1){
		if(state==CONTINUOUS_PLAYBACK){
 80409ac:	d0a6e317 	ldw	r2,-25716(gp)
 80409b0:	10800198 	cmpnei	r2,r2,6
 80409b4:	1000581e 	bne	r2,zero,8040b18 <main+0x25c>
			if(interrupted!=1)
 80409b8:	d0a6e217 	ldw	r2,-25720(gp)
 80409bc:	10800060 	cmpeqi	r2,r2,1
 80409c0:	1000091e 	bne	r2,zero,80409e8 <main+0x12c>
				play(audio_buffer,DURATION,6,audio_dev,0);
 80409c4:	d0a00017 	ldw	r2,-32768(gp)
 80409c8:	d0e6e717 	ldw	r3,-25700(gp)
 80409cc:	d8000015 	stw	zero,0(sp)
 80409d0:	180f883a 	mov	r7,r3
 80409d4:	01800184 	movi	r6,6
 80409d8:	01400144 	movi	r5,5
 80409dc:	1009883a 	mov	r4,r2
 80409e0:	80405e00 	call	80405e0 <play>
 80409e4:	003ff106 	br	80409ac <__alt_data_end+0xfffc09ac>
			else
			{
				current_index2=current_index;
 80409e8:	d0a6e517 	ldw	r2,-25708(gp)
 80409ec:	d0a6e615 	stw	r2,-25704(gp)
				switch(beat_state){
 80409f0:	d0a6e417 	ldw	r2,-25712(gp)
 80409f4:	10c000a0 	cmpeqi	r3,r2,2
 80409f8:	1800191e 	bne	r3,zero,8040a60 <main+0x1a4>
 80409fc:	10c000e8 	cmpgeui	r3,r2,3
 8040a00:	1800031e 	bne	r3,zero,8040a10 <main+0x154>
 8040a04:	10800060 	cmpeqi	r2,r2,1
 8040a08:	1000061e 	bne	r2,zero,8040a24 <main+0x168>
 8040a0c:	00012106 	br	8040e94 <main+0x5d8>
 8040a10:	10c000e0 	cmpeqi	r3,r2,3
 8040a14:	1800211e 	bne	r3,zero,8040a9c <main+0x1e0>
 8040a18:	10800120 	cmpeqi	r2,r2,4
 8040a1c:	10002e1e 	bne	r2,zero,8040ad8 <main+0x21c>
 8040a20:	00011c06 	br	8040e94 <main+0x5d8>
				case FIRST_COMBO:
					combined_play(audio_buffer,DURATION,effect1_buffer,EFFECT_DURATION,audio_dev,6);
 8040a24:	d1200017 	ldw	r4,-32768(gp)
 8040a28:	d1600217 	ldw	r5,-32760(gp)
 8040a2c:	d0a6e717 	ldw	r2,-25700(gp)
 8040a30:	00c00184 	movi	r3,6
 8040a34:	d8c00115 	stw	r3,4(sp)
 8040a38:	d8800015 	stw	r2,0(sp)
 8040a3c:	01c00104 	movi	r7,4
 8040a40:	280d883a 	mov	r6,r5
 8040a44:	01400144 	movi	r5,5
 8040a48:	80404580 	call	8040458 <combined_play>
					state= CONTINUOUS_PLAYBACK;
 8040a4c:	00800184 	movi	r2,6
 8040a50:	d0a6e315 	stw	r2,-25716(gp)
					beat_state=IDLE;
 8040a54:	d026e415 	stw	zero,-25712(gp)
					interrupted=0;
 8040a58:	d026e215 	stw	zero,-25720(gp)
					break;
 8040a5c:	00010d06 	br	8040e94 <main+0x5d8>
				case SECOND_COMBO:
					combined_play(audio_buffer,DURATION,effect2_buffer,EFFECT_DURATION,audio_dev,6);
 8040a60:	d1200017 	ldw	r4,-32768(gp)
 8040a64:	d1600317 	ldw	r5,-32756(gp)
 8040a68:	d0a6e717 	ldw	r2,-25700(gp)
 8040a6c:	00c00184 	movi	r3,6
 8040a70:	d8c00115 	stw	r3,4(sp)
 8040a74:	d8800015 	stw	r2,0(sp)
 8040a78:	01c00104 	movi	r7,4
 8040a7c:	280d883a 	mov	r6,r5
 8040a80:	01400144 	movi	r5,5
 8040a84:	80404580 	call	8040458 <combined_play>
					state= CONTINUOUS_PLAYBACK;
 8040a88:	00800184 	movi	r2,6
 8040a8c:	d0a6e315 	stw	r2,-25716(gp)
					beat_state=IDLE;
 8040a90:	d026e415 	stw	zero,-25712(gp)
					interrupted=0;
 8040a94:	d026e215 	stw	zero,-25720(gp)
					break;
 8040a98:	0000fe06 	br	8040e94 <main+0x5d8>
				case THIRD_COMBO:
					combined_play(audio_buffer,DURATION,effect3_buffer,EFFECT_DURATION,audio_dev,6);
 8040a9c:	d1200017 	ldw	r4,-32768(gp)
 8040aa0:	d1600417 	ldw	r5,-32752(gp)
 8040aa4:	d0a6e717 	ldw	r2,-25700(gp)
 8040aa8:	00c00184 	movi	r3,6
 8040aac:	d8c00115 	stw	r3,4(sp)
 8040ab0:	d8800015 	stw	r2,0(sp)
 8040ab4:	01c00104 	movi	r7,4
 8040ab8:	280d883a 	mov	r6,r5
 8040abc:	01400144 	movi	r5,5
 8040ac0:	80404580 	call	8040458 <combined_play>
					state= CONTINUOUS_PLAYBACK;
 8040ac4:	00800184 	movi	r2,6
 8040ac8:	d0a6e315 	stw	r2,-25716(gp)
					beat_state=IDLE;
 8040acc:	d026e415 	stw	zero,-25712(gp)
					interrupted=0;
 8040ad0:	d026e215 	stw	zero,-25720(gp)
					break;
 8040ad4:	0000ef06 	br	8040e94 <main+0x5d8>
				case FOURTH_COMBO:
					combined_play(audio_buffer,DURATION,effect4_buffer,EFFECT_DURATION,audio_dev,6);
 8040ad8:	d1200017 	ldw	r4,-32768(gp)
 8040adc:	d1600517 	ldw	r5,-32748(gp)
 8040ae0:	d0a6e717 	ldw	r2,-25700(gp)
 8040ae4:	00c00184 	movi	r3,6
 8040ae8:	d8c00115 	stw	r3,4(sp)
 8040aec:	d8800015 	stw	r2,0(sp)
 8040af0:	01c00104 	movi	r7,4
 8040af4:	280d883a 	mov	r6,r5
 8040af8:	01400144 	movi	r5,5
 8040afc:	80404580 	call	8040458 <combined_play>
					state= CONTINUOUS_PLAYBACK;
 8040b00:	00800184 	movi	r2,6
 8040b04:	d0a6e315 	stw	r2,-25716(gp)
					beat_state=IDLE;
 8040b08:	d026e415 	stw	zero,-25712(gp)
					interrupted=0;
 8040b0c:	d026e215 	stw	zero,-25720(gp)
					break;
 8040b10:	0001883a 	nop
 8040b14:	0000df06 	br	8040e94 <main+0x5d8>
				}
			}
		}
		else if(interrupted==1){
 8040b18:	d0a6e217 	ldw	r2,-25720(gp)
 8040b1c:	10800058 	cmpnei	r2,r2,1
 8040b20:	103fa21e 	bne	r2,zero,80409ac <__alt_data_end+0xfffc09ac>
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_SW_BASE, 0);
 8040b24:	0007883a 	mov	r3,zero
 8040b28:	00820234 	movhi	r2,2056
 8040b2c:	10845604 	addi	r2,r2,4440
 8040b30:	10c00035 	stwio	r3,0(r2)
			switch(state)
 8040b34:	d0a6e317 	ldw	r2,-25716(gp)
 8040b38:	10c00228 	cmpgeui	r3,r2,8
 8040b3c:	18007f1e 	bne	r3,zero,8040d3c <main+0x480>
 8040b40:	100690ba 	slli	r3,r2,2
 8040b44:	00820134 	movhi	r2,2052
 8040b48:	1082d604 	addi	r2,r2,2904
 8040b4c:	1885883a 	add	r2,r3,r2
 8040b50:	10800017 	ldw	r2,0(r2)
 8040b54:	1000683a 	jmp	r2
 8040b58:	08040d3c 	xorhi	zero,at,4148
 8040b5c:	08040b78 	rdprs	zero,at,4141
 8040b60:	08040bc8 	cmpgei	zero,at,4143
 8040b64:	08040c18 	cmpnei	zero,at,4144
 8040b68:	08040c68 	cmpgeui	zero,at,4145
 8040b6c:	08040cb8 	rdprs	zero,at,4146
 8040b70:	08040d3c 	xorhi	zero,at,4148
 8040b74:	08040d08 	cmpgei	zero,at,4148
				{
				case FIRST_RECORDING:
					state=IDLE;
 8040b78:	d026e315 	stw	zero,-25716(gp)
					record(audio_buffer,DURATION,&buffer_avg,audio_dev);
 8040b7c:	d0a00017 	ldw	r2,-32768(gp)
 8040b80:	d0e6e717 	ldw	r3,-25700(gp)
 8040b84:	180f883a 	mov	r7,r3
 8040b88:	d1a6dc04 	addi	r6,gp,-25744
 8040b8c:	01400144 	movi	r5,5
 8040b90:	1009883a 	mov	r4,r2
 8040b94:	80403100 	call	8040310 <record>
					delay(1000);
 8040b98:	01111eb4 	movhi	r4,17530
 8040b9c:	80402900 	call	8040290 <delay>
					play(audio_buffer,DURATION,4,audio_dev,1);
 8040ba0:	d0e00017 	ldw	r3,-32768(gp)
 8040ba4:	d126e717 	ldw	r4,-25700(gp)
 8040ba8:	00800044 	movi	r2,1
 8040bac:	d8800015 	stw	r2,0(sp)
 8040bb0:	200f883a 	mov	r7,r4
 8040bb4:	01800104 	movi	r6,4
 8040bb8:	01400144 	movi	r5,5
 8040bbc:	1809883a 	mov	r4,r3
 8040bc0:	80405e00 	call	80405e0 <play>
					break;
 8040bc4:	00005d06 	br	8040d3c <main+0x480>
				case SECOND_RECORDING:
					state=IDLE;
 8040bc8:	d026e315 	stw	zero,-25716(gp)
					record(effect1_buffer,EFFECT_DURATION,&effect1_avg,audio_dev);
 8040bcc:	d0a00217 	ldw	r2,-32760(gp)
 8040bd0:	d0e6e717 	ldw	r3,-25700(gp)
 8040bd4:	180f883a 	mov	r7,r3
 8040bd8:	d1a6de04 	addi	r6,gp,-25736
 8040bdc:	01400104 	movi	r5,4
 8040be0:	1009883a 	mov	r4,r2
 8040be4:	80403100 	call	8040310 <record>
					delay(1000);
 8040be8:	01111eb4 	movhi	r4,17530
 8040bec:	80402900 	call	8040290 <delay>
					play(effect1_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040bf0:	d0e00217 	ldw	r3,-32760(gp)
 8040bf4:	d126e717 	ldw	r4,-25700(gp)
 8040bf8:	00800044 	movi	r2,1
 8040bfc:	d8800015 	stw	r2,0(sp)
 8040c00:	200f883a 	mov	r7,r4
 8040c04:	01800104 	movi	r6,4
 8040c08:	01400104 	movi	r5,4
 8040c0c:	1809883a 	mov	r4,r3
 8040c10:	80405e00 	call	80405e0 <play>
					break;
 8040c14:	00004906 	br	8040d3c <main+0x480>
				case THIRD_RECORDING:
					state=IDLE;
 8040c18:	d026e315 	stw	zero,-25716(gp)
					record(effect2_buffer,EFFECT_DURATION,&effect2_avg,audio_dev);
 8040c1c:	d0a00317 	ldw	r2,-32756(gp)
 8040c20:	d0e6e717 	ldw	r3,-25700(gp)
 8040c24:	180f883a 	mov	r7,r3
 8040c28:	d1a6df04 	addi	r6,gp,-25732
 8040c2c:	01400104 	movi	r5,4
 8040c30:	1009883a 	mov	r4,r2
 8040c34:	80403100 	call	8040310 <record>
					delay(1000);
 8040c38:	01111eb4 	movhi	r4,17530
 8040c3c:	80402900 	call	8040290 <delay>
					play(effect2_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040c40:	d0e00317 	ldw	r3,-32756(gp)
 8040c44:	d126e717 	ldw	r4,-25700(gp)
 8040c48:	00800044 	movi	r2,1
 8040c4c:	d8800015 	stw	r2,0(sp)
 8040c50:	200f883a 	mov	r7,r4
 8040c54:	01800104 	movi	r6,4
 8040c58:	01400104 	movi	r5,4
 8040c5c:	1809883a 	mov	r4,r3
 8040c60:	80405e00 	call	80405e0 <play>
					break;
 8040c64:	00003506 	br	8040d3c <main+0x480>
				case FOURTH_RECORDING:
					state=IDLE;
 8040c68:	d026e315 	stw	zero,-25716(gp)
					record(effect3_buffer,EFFECT_DURATION,&effect3_avg,audio_dev);
 8040c6c:	d0a00417 	ldw	r2,-32752(gp)
 8040c70:	d0e6e717 	ldw	r3,-25700(gp)
 8040c74:	180f883a 	mov	r7,r3
 8040c78:	d1a6e004 	addi	r6,gp,-25728
 8040c7c:	01400104 	movi	r5,4
 8040c80:	1009883a 	mov	r4,r2
 8040c84:	80403100 	call	8040310 <record>
					delay(1000);
 8040c88:	01111eb4 	movhi	r4,17530
 8040c8c:	80402900 	call	8040290 <delay>
					play(effect3_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040c90:	d0e00417 	ldw	r3,-32752(gp)
 8040c94:	d126e717 	ldw	r4,-25700(gp)
 8040c98:	00800044 	movi	r2,1
 8040c9c:	d8800015 	stw	r2,0(sp)
 8040ca0:	200f883a 	mov	r7,r4
 8040ca4:	01800104 	movi	r6,4
 8040ca8:	01400104 	movi	r5,4
 8040cac:	1809883a 	mov	r4,r3
 8040cb0:	80405e00 	call	80405e0 <play>
					break;
 8040cb4:	00002106 	br	8040d3c <main+0x480>
				case FIFTH_RECORDING:
					state=IDLE;
 8040cb8:	d026e315 	stw	zero,-25716(gp)
					record(effect4_buffer,EFFECT_DURATION,&effect4_avg,audio_dev);
 8040cbc:	d0a00517 	ldw	r2,-32748(gp)
 8040cc0:	d0e6e717 	ldw	r3,-25700(gp)
 8040cc4:	180f883a 	mov	r7,r3
 8040cc8:	d1a6e104 	addi	r6,gp,-25724
 8040ccc:	01400104 	movi	r5,4
 8040cd0:	1009883a 	mov	r4,r2
 8040cd4:	80403100 	call	8040310 <record>
					delay(1000);
 8040cd8:	01111eb4 	movhi	r4,17530
 8040cdc:	80402900 	call	8040290 <delay>
					play(effect4_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040ce0:	d0e00517 	ldw	r3,-32748(gp)
 8040ce4:	d126e717 	ldw	r4,-25700(gp)
 8040ce8:	00800044 	movi	r2,1
 8040cec:	d8800015 	stw	r2,0(sp)
 8040cf0:	200f883a 	mov	r7,r4
 8040cf4:	01800104 	movi	r6,4
 8040cf8:	01400104 	movi	r5,4
 8040cfc:	1809883a 	mov	r4,r3
 8040d00:	80405e00 	call	80405e0 <play>
					break;
 8040d04:	00000d06 	br	8040d3c <main+0x480>
				case FIRST_PLAYBACK:
					state=IDLE;
 8040d08:	d026e315 	stw	zero,-25716(gp)
					delay(1000);
 8040d0c:	01111eb4 	movhi	r4,17530
 8040d10:	80402900 	call	8040290 <delay>
					play(audio_buffer,DURATION,4,audio_dev,1);
 8040d14:	d0e00017 	ldw	r3,-32768(gp)
 8040d18:	d126e717 	ldw	r4,-25700(gp)
 8040d1c:	00800044 	movi	r2,1
 8040d20:	d8800015 	stw	r2,0(sp)
 8040d24:	200f883a 	mov	r7,r4
 8040d28:	01800104 	movi	r6,4
 8040d2c:	01400144 	movi	r5,5
 8040d30:	1809883a 	mov	r4,r3
 8040d34:	80405e00 	call	80405e0 <play>
					break;
 8040d38:	0001883a 	nop
				}
			IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_SW_BASE, 0xFFFFF);
 8040d3c:	00c00434 	movhi	r3,16
 8040d40:	18ffffc4 	addi	r3,r3,-1
 8040d44:	00820234 	movhi	r2,2056
 8040d48:	10845704 	addi	r2,r2,4444
 8040d4c:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_SW_BASE, 0);
 8040d50:	0007883a 	mov	r3,zero
 8040d54:	00820234 	movhi	r2,2056
 8040d58:	10845704 	addi	r2,r2,4444
 8040d5c:	10c00035 	stwio	r3,0(r2)
			delay(100);
 8040d60:	0110b234 	movhi	r4,17096
 8040d64:	80402900 	call	8040290 <delay>
			IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_SW_BASE, 0xFFFFF);
 8040d68:	00c00434 	movhi	r3,16
 8040d6c:	18ffffc4 	addi	r3,r3,-1
 8040d70:	00820234 	movhi	r2,2056
 8040d74:	10845704 	addi	r2,r2,4444
 8040d78:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_SW_BASE, 0xFFFF);
 8040d7c:	00ffffd4 	movui	r3,65535
 8040d80:	00820234 	movhi	r2,2056
 8040d84:	10845604 	addi	r2,r2,4440
 8040d88:	10c00035 	stwio	r3,0(r2)
			interrupted=0;
 8040d8c:	d026e215 	stw	zero,-25720(gp)

			switch(beat_state){
 8040d90:	d0a6e417 	ldw	r2,-25712(gp)
 8040d94:	10c000a0 	cmpeqi	r3,r2,2
 8040d98:	1800171e 	bne	r3,zero,8040df8 <main+0x53c>
 8040d9c:	10c000e8 	cmpgeui	r3,r2,3
 8040da0:	1800031e 	bne	r3,zero,8040db0 <main+0x4f4>
 8040da4:	10800060 	cmpeqi	r2,r2,1
 8040da8:	1000061e 	bne	r2,zero,8040dc4 <main+0x508>
 8040dac:	00003906 	br	8040e94 <main+0x5d8>
 8040db0:	10c000e0 	cmpeqi	r3,r2,3
 8040db4:	18001d1e 	bne	r3,zero,8040e2c <main+0x570>
 8040db8:	10800120 	cmpeqi	r2,r2,4
 8040dbc:	1000281e 	bne	r2,zero,8040e60 <main+0x5a4>
 8040dc0:	00003406 	br	8040e94 <main+0x5d8>
				case FIRST_COMBO:
					beat_state=IDLE;
 8040dc4:	d026e415 	stw	zero,-25712(gp)
					delay(1000);
 8040dc8:	01111eb4 	movhi	r4,17530
 8040dcc:	80402900 	call	8040290 <delay>
					play(effect1_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040dd0:	d0e00217 	ldw	r3,-32760(gp)
 8040dd4:	d126e717 	ldw	r4,-25700(gp)
 8040dd8:	00800044 	movi	r2,1
 8040ddc:	d8800015 	stw	r2,0(sp)
 8040de0:	200f883a 	mov	r7,r4
 8040de4:	01800104 	movi	r6,4
 8040de8:	01400104 	movi	r5,4
 8040dec:	1809883a 	mov	r4,r3
 8040df0:	80405e00 	call	80405e0 <play>
					break;
 8040df4:	00002706 	br	8040e94 <main+0x5d8>
				case SECOND_COMBO:
					beat_state=IDLE;
 8040df8:	d026e415 	stw	zero,-25712(gp)
					delay(1000);
 8040dfc:	01111eb4 	movhi	r4,17530
 8040e00:	80402900 	call	8040290 <delay>
					play(effect2_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040e04:	d0e00317 	ldw	r3,-32756(gp)
 8040e08:	d126e717 	ldw	r4,-25700(gp)
 8040e0c:	00800044 	movi	r2,1
 8040e10:	d8800015 	stw	r2,0(sp)
 8040e14:	200f883a 	mov	r7,r4
 8040e18:	01800104 	movi	r6,4
 8040e1c:	01400104 	movi	r5,4
 8040e20:	1809883a 	mov	r4,r3
 8040e24:	80405e00 	call	80405e0 <play>
					break;
 8040e28:	00001a06 	br	8040e94 <main+0x5d8>
				case THIRD_COMBO:
					beat_state=IDLE;
 8040e2c:	d026e415 	stw	zero,-25712(gp)
					delay(1000);
 8040e30:	01111eb4 	movhi	r4,17530
 8040e34:	80402900 	call	8040290 <delay>
					play(effect3_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040e38:	d0e00417 	ldw	r3,-32752(gp)
 8040e3c:	d126e717 	ldw	r4,-25700(gp)
 8040e40:	00800044 	movi	r2,1
 8040e44:	d8800015 	stw	r2,0(sp)
 8040e48:	200f883a 	mov	r7,r4
 8040e4c:	01800104 	movi	r6,4
 8040e50:	01400104 	movi	r5,4
 8040e54:	1809883a 	mov	r4,r3
 8040e58:	80405e00 	call	80405e0 <play>
					break;
 8040e5c:	00000d06 	br	8040e94 <main+0x5d8>
				case FOURTH_COMBO:
					beat_state=IDLE;
 8040e60:	d026e415 	stw	zero,-25712(gp)
					delay(1000);
 8040e64:	01111eb4 	movhi	r4,17530
 8040e68:	80402900 	call	8040290 <delay>
					play(effect4_buffer,EFFECT_DURATION,4,audio_dev,1);
 8040e6c:	d0e00517 	ldw	r3,-32748(gp)
 8040e70:	d126e717 	ldw	r4,-25700(gp)
 8040e74:	00800044 	movi	r2,1
 8040e78:	d8800015 	stw	r2,0(sp)
 8040e7c:	200f883a 	mov	r7,r4
 8040e80:	01800104 	movi	r6,4
 8040e84:	01400104 	movi	r5,4
 8040e88:	1809883a 	mov	r4,r3
 8040e8c:	80405e00 	call	80405e0 <play>
					break;
 8040e90:	0001883a 	nop
			}
		}
	}
 8040e94:	003ec506 	br	80409ac <__alt_data_end+0xfffc09ac>

08040e98 <__divsi3>:
 8040e98:	20001b16 	blt	r4,zero,8040f08 <__divsi3+0x70>
 8040e9c:	000f883a 	mov	r7,zero
 8040ea0:	28001616 	blt	r5,zero,8040efc <__divsi3+0x64>
 8040ea4:	200d883a 	mov	r6,r4
 8040ea8:	29001a2e 	bgeu	r5,r4,8040f14 <__divsi3+0x7c>
 8040eac:	00800804 	movi	r2,32
 8040eb0:	00c00044 	movi	r3,1
 8040eb4:	00000106 	br	8040ebc <__divsi3+0x24>
 8040eb8:	10000d26 	beq	r2,zero,8040ef0 <__divsi3+0x58>
 8040ebc:	294b883a 	add	r5,r5,r5
 8040ec0:	10bfffc4 	addi	r2,r2,-1
 8040ec4:	18c7883a 	add	r3,r3,r3
 8040ec8:	293ffb36 	bltu	r5,r4,8040eb8 <__alt_data_end+0xfffc0eb8>
 8040ecc:	0005883a 	mov	r2,zero
 8040ed0:	18000726 	beq	r3,zero,8040ef0 <__divsi3+0x58>
 8040ed4:	0005883a 	mov	r2,zero
 8040ed8:	31400236 	bltu	r6,r5,8040ee4 <__divsi3+0x4c>
 8040edc:	314dc83a 	sub	r6,r6,r5
 8040ee0:	10c4b03a 	or	r2,r2,r3
 8040ee4:	1806d07a 	srli	r3,r3,1
 8040ee8:	280ad07a 	srli	r5,r5,1
 8040eec:	183ffa1e 	bne	r3,zero,8040ed8 <__alt_data_end+0xfffc0ed8>
 8040ef0:	38000126 	beq	r7,zero,8040ef8 <__divsi3+0x60>
 8040ef4:	0085c83a 	sub	r2,zero,r2
 8040ef8:	f800283a 	ret
 8040efc:	014bc83a 	sub	r5,zero,r5
 8040f00:	39c0005c 	xori	r7,r7,1
 8040f04:	003fe706 	br	8040ea4 <__alt_data_end+0xfffc0ea4>
 8040f08:	0109c83a 	sub	r4,zero,r4
 8040f0c:	01c00044 	movi	r7,1
 8040f10:	003fe306 	br	8040ea0 <__alt_data_end+0xfffc0ea0>
 8040f14:	00c00044 	movi	r3,1
 8040f18:	003fee06 	br	8040ed4 <__alt_data_end+0xfffc0ed4>

08040f1c <__modsi3>:
 8040f1c:	20001716 	blt	r4,zero,8040f7c <__modsi3+0x60>
 8040f20:	000f883a 	mov	r7,zero
 8040f24:	2005883a 	mov	r2,r4
 8040f28:	28001216 	blt	r5,zero,8040f74 <__modsi3+0x58>
 8040f2c:	2900162e 	bgeu	r5,r4,8040f88 <__modsi3+0x6c>
 8040f30:	01800804 	movi	r6,32
 8040f34:	00c00044 	movi	r3,1
 8040f38:	00000106 	br	8040f40 <__modsi3+0x24>
 8040f3c:	30000a26 	beq	r6,zero,8040f68 <__modsi3+0x4c>
 8040f40:	294b883a 	add	r5,r5,r5
 8040f44:	31bfffc4 	addi	r6,r6,-1
 8040f48:	18c7883a 	add	r3,r3,r3
 8040f4c:	293ffb36 	bltu	r5,r4,8040f3c <__alt_data_end+0xfffc0f3c>
 8040f50:	18000526 	beq	r3,zero,8040f68 <__modsi3+0x4c>
 8040f54:	1806d07a 	srli	r3,r3,1
 8040f58:	11400136 	bltu	r2,r5,8040f60 <__modsi3+0x44>
 8040f5c:	1145c83a 	sub	r2,r2,r5
 8040f60:	280ad07a 	srli	r5,r5,1
 8040f64:	183ffb1e 	bne	r3,zero,8040f54 <__alt_data_end+0xfffc0f54>
 8040f68:	38000126 	beq	r7,zero,8040f70 <__modsi3+0x54>
 8040f6c:	0085c83a 	sub	r2,zero,r2
 8040f70:	f800283a 	ret
 8040f74:	014bc83a 	sub	r5,zero,r5
 8040f78:	003fec06 	br	8040f2c <__alt_data_end+0xfffc0f2c>
 8040f7c:	0109c83a 	sub	r4,zero,r4
 8040f80:	01c00044 	movi	r7,1
 8040f84:	003fe706 	br	8040f24 <__alt_data_end+0xfffc0f24>
 8040f88:	00c00044 	movi	r3,1
 8040f8c:	003ff106 	br	8040f54 <__alt_data_end+0xfffc0f54>

08040f90 <__udivsi3>:
 8040f90:	200d883a 	mov	r6,r4
 8040f94:	2900152e 	bgeu	r5,r4,8040fec <__udivsi3+0x5c>
 8040f98:	28001416 	blt	r5,zero,8040fec <__udivsi3+0x5c>
 8040f9c:	00800804 	movi	r2,32
 8040fa0:	00c00044 	movi	r3,1
 8040fa4:	00000206 	br	8040fb0 <__udivsi3+0x20>
 8040fa8:	10000e26 	beq	r2,zero,8040fe4 <__udivsi3+0x54>
 8040fac:	28000516 	blt	r5,zero,8040fc4 <__udivsi3+0x34>
 8040fb0:	294b883a 	add	r5,r5,r5
 8040fb4:	10bfffc4 	addi	r2,r2,-1
 8040fb8:	18c7883a 	add	r3,r3,r3
 8040fbc:	293ffa36 	bltu	r5,r4,8040fa8 <__alt_data_end+0xfffc0fa8>
 8040fc0:	18000826 	beq	r3,zero,8040fe4 <__udivsi3+0x54>
 8040fc4:	0005883a 	mov	r2,zero
 8040fc8:	31400236 	bltu	r6,r5,8040fd4 <__udivsi3+0x44>
 8040fcc:	314dc83a 	sub	r6,r6,r5
 8040fd0:	10c4b03a 	or	r2,r2,r3
 8040fd4:	1806d07a 	srli	r3,r3,1
 8040fd8:	280ad07a 	srli	r5,r5,1
 8040fdc:	183ffa1e 	bne	r3,zero,8040fc8 <__alt_data_end+0xfffc0fc8>
 8040fe0:	f800283a 	ret
 8040fe4:	0005883a 	mov	r2,zero
 8040fe8:	f800283a 	ret
 8040fec:	00c00044 	movi	r3,1
 8040ff0:	003ff406 	br	8040fc4 <__alt_data_end+0xfffc0fc4>

08040ff4 <__umodsi3>:
 8040ff4:	2005883a 	mov	r2,r4
 8040ff8:	2900122e 	bgeu	r5,r4,8041044 <__umodsi3+0x50>
 8040ffc:	28001116 	blt	r5,zero,8041044 <__umodsi3+0x50>
 8041000:	01800804 	movi	r6,32
 8041004:	00c00044 	movi	r3,1
 8041008:	00000206 	br	8041014 <__umodsi3+0x20>
 804100c:	30000c26 	beq	r6,zero,8041040 <__umodsi3+0x4c>
 8041010:	28000516 	blt	r5,zero,8041028 <__umodsi3+0x34>
 8041014:	294b883a 	add	r5,r5,r5
 8041018:	31bfffc4 	addi	r6,r6,-1
 804101c:	18c7883a 	add	r3,r3,r3
 8041020:	293ffa36 	bltu	r5,r4,804100c <__alt_data_end+0xfffc100c>
 8041024:	18000626 	beq	r3,zero,8041040 <__umodsi3+0x4c>
 8041028:	1806d07a 	srli	r3,r3,1
 804102c:	11400136 	bltu	r2,r5,8041034 <__umodsi3+0x40>
 8041030:	1145c83a 	sub	r2,r2,r5
 8041034:	280ad07a 	srli	r5,r5,1
 8041038:	183ffb1e 	bne	r3,zero,8041028 <__alt_data_end+0xfffc1028>
 804103c:	f800283a 	ret
 8041040:	f800283a 	ret
 8041044:	00c00044 	movi	r3,1
 8041048:	003ff706 	br	8041028 <__alt_data_end+0xfffc1028>

0804104c <__addsf3>:
 804104c:	defffc04 	addi	sp,sp,-16
 8041050:	2004d7fa 	srli	r2,r4,31
 8041054:	280cd5fa 	srli	r6,r5,23
 8041058:	dc000015 	stw	r16,0(sp)
 804105c:	00c02034 	movhi	r3,128
 8041060:	2020d5fa 	srli	r16,r4,23
 8041064:	280ed7fa 	srli	r7,r5,31
 8041068:	18ffffc4 	addi	r3,r3,-1
 804106c:	dc400115 	stw	r17,4(sp)
 8041070:	1908703a 	and	r4,r3,r4
 8041074:	194a703a 	and	r5,r3,r5
 8041078:	dfc00315 	stw	ra,12(sp)
 804107c:	dc800215 	stw	r18,8(sp)
 8041080:	14403fcc 	andi	r17,r2,255
 8041084:	84003fcc 	andi	r16,r16,255
 8041088:	200890fa 	slli	r4,r4,3
 804108c:	31803fcc 	andi	r6,r6,255
 8041090:	280a90fa 	slli	r5,r5,3
 8041094:	89c05026 	beq	r17,r7,80411d8 <__addsf3+0x18c>
 8041098:	8185c83a 	sub	r2,r16,r6
 804109c:	00807a0e 	bge	zero,r2,8041288 <__addsf3+0x23c>
 80410a0:	30001e1e 	bne	r6,zero,804111c <__addsf3+0xd0>
 80410a4:	28006d1e 	bne	r5,zero,804125c <__addsf3+0x210>
 80410a8:	208001cc 	andi	r2,r4,7
 80410ac:	10000426 	beq	r2,zero,80410c0 <__addsf3+0x74>
 80410b0:	208003cc 	andi	r2,r4,15
 80410b4:	00c00104 	movi	r3,4
 80410b8:	10c00126 	beq	r2,r3,80410c0 <__addsf3+0x74>
 80410bc:	20c9883a 	add	r4,r4,r3
 80410c0:	2081002c 	andhi	r2,r4,1024
 80410c4:	10003926 	beq	r2,zero,80411ac <__addsf3+0x160>
 80410c8:	84000044 	addi	r16,r16,1
 80410cc:	00803fc4 	movi	r2,255
 80410d0:	80807826 	beq	r16,r2,80412b4 <__addsf3+0x268>
 80410d4:	200891ba 	slli	r4,r4,6
 80410d8:	8805883a 	mov	r2,r17
 80410dc:	2008d27a 	srli	r4,r4,9
 80410e0:	84003fcc 	andi	r16,r16,255
 80410e4:	800695fa 	slli	r3,r16,23
 80410e8:	10803fcc 	andi	r2,r2,255
 80410ec:	04002034 	movhi	r16,128
 80410f0:	843fffc4 	addi	r16,r16,-1
 80410f4:	100497fa 	slli	r2,r2,31
 80410f8:	2408703a 	and	r4,r4,r16
 80410fc:	20e0b03a 	or	r16,r4,r3
 8041100:	8084b03a 	or	r2,r16,r2
 8041104:	dfc00317 	ldw	ra,12(sp)
 8041108:	dc800217 	ldw	r18,8(sp)
 804110c:	dc400117 	ldw	r17,4(sp)
 8041110:	dc000017 	ldw	r16,0(sp)
 8041114:	dec00404 	addi	sp,sp,16
 8041118:	f800283a 	ret
 804111c:	00c03fc4 	movi	r3,255
 8041120:	80ffe126 	beq	r16,r3,80410a8 <__alt_data_end+0xfffc10a8>
 8041124:	29410034 	orhi	r5,r5,1024
 8041128:	00c006c4 	movi	r3,27
 804112c:	18807516 	blt	r3,r2,8041304 <__addsf3+0x2b8>
 8041130:	00c00804 	movi	r3,32
 8041134:	1887c83a 	sub	r3,r3,r2
 8041138:	28c6983a 	sll	r3,r5,r3
 804113c:	288ad83a 	srl	r5,r5,r2
 8041140:	1804c03a 	cmpne	r2,r3,zero
 8041144:	288ab03a 	or	r5,r5,r2
 8041148:	2149c83a 	sub	r4,r4,r5
 804114c:	2081002c 	andhi	r2,r4,1024
 8041150:	10001426 	beq	r2,zero,80411a4 <__addsf3+0x158>
 8041154:	04810034 	movhi	r18,1024
 8041158:	94bfffc4 	addi	r18,r18,-1
 804115c:	24a4703a 	and	r18,r4,r18
 8041160:	9009883a 	mov	r4,r18
 8041164:	80416cc0 	call	80416cc <__clzsi2>
 8041168:	10bffec4 	addi	r2,r2,-5
 804116c:	90a4983a 	sll	r18,r18,r2
 8041170:	14005416 	blt	r2,r16,80412c4 <__addsf3+0x278>
 8041174:	1405c83a 	sub	r2,r2,r16
 8041178:	11000044 	addi	r4,r2,1
 804117c:	00800804 	movi	r2,32
 8041180:	1105c83a 	sub	r2,r2,r4
 8041184:	9084983a 	sll	r2,r18,r2
 8041188:	9124d83a 	srl	r18,r18,r4
 804118c:	0021883a 	mov	r16,zero
 8041190:	1008c03a 	cmpne	r4,r2,zero
 8041194:	9108b03a 	or	r4,r18,r4
 8041198:	003fc306 	br	80410a8 <__alt_data_end+0xfffc10a8>
 804119c:	1000db26 	beq	r2,zero,804150c <__addsf3+0x4c0>
 80411a0:	1009883a 	mov	r4,r2
 80411a4:	208001cc 	andi	r2,r4,7
 80411a8:	103fc11e 	bne	r2,zero,80410b0 <__alt_data_end+0xfffc10b0>
 80411ac:	2006d0fa 	srli	r3,r4,3
 80411b0:	01003fc4 	movi	r4,255
 80411b4:	8805883a 	mov	r2,r17
 80411b8:	8100241e 	bne	r16,r4,804124c <__addsf3+0x200>
 80411bc:	18006e26 	beq	r3,zero,8041378 <__addsf3+0x32c>
 80411c0:	19001034 	orhi	r4,r3,64
 80411c4:	00c02034 	movhi	r3,128
 80411c8:	18ffffc4 	addi	r3,r3,-1
 80411cc:	043fffc4 	movi	r16,-1
 80411d0:	20c8703a 	and	r4,r4,r3
 80411d4:	003fc206 	br	80410e0 <__alt_data_end+0xfffc10e0>
 80411d8:	8187c83a 	sub	r3,r16,r6
 80411dc:	00c03e0e 	bge	zero,r3,80412d8 <__addsf3+0x28c>
 80411e0:	30002326 	beq	r6,zero,8041270 <__addsf3+0x224>
 80411e4:	01803fc4 	movi	r6,255
 80411e8:	81bfaf26 	beq	r16,r6,80410a8 <__alt_data_end+0xfffc10a8>
 80411ec:	29410034 	orhi	r5,r5,1024
 80411f0:	018006c4 	movi	r6,27
 80411f4:	30c07416 	blt	r6,r3,80413c8 <__addsf3+0x37c>
 80411f8:	01800804 	movi	r6,32
 80411fc:	30cdc83a 	sub	r6,r6,r3
 8041200:	298c983a 	sll	r6,r5,r6
 8041204:	28cad83a 	srl	r5,r5,r3
 8041208:	3006c03a 	cmpne	r3,r6,zero
 804120c:	28cab03a 	or	r5,r5,r3
 8041210:	2149883a 	add	r4,r4,r5
 8041214:	20c1002c 	andhi	r3,r4,1024
 8041218:	183fe226 	beq	r3,zero,80411a4 <__alt_data_end+0xfffc11a4>
 804121c:	84000044 	addi	r16,r16,1
 8041220:	00c03fc4 	movi	r3,255
 8041224:	80c05426 	beq	r16,r3,8041378 <__addsf3+0x32c>
 8041228:	00bf0034 	movhi	r2,64512
 804122c:	10bfffc4 	addi	r2,r2,-1
 8041230:	20c0004c 	andi	r3,r4,1
 8041234:	2088703a 	and	r4,r4,r2
 8041238:	2008d07a 	srli	r4,r4,1
 804123c:	20c8b03a 	or	r4,r4,r3
 8041240:	003f9906 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041244:	0007883a 	mov	r3,zero
 8041248:	0005883a 	mov	r2,zero
 804124c:	01002034 	movhi	r4,128
 8041250:	213fffc4 	addi	r4,r4,-1
 8041254:	1908703a 	and	r4,r3,r4
 8041258:	003fa106 	br	80410e0 <__alt_data_end+0xfffc10e0>
 804125c:	10bfffc4 	addi	r2,r2,-1
 8041260:	103fb926 	beq	r2,zero,8041148 <__alt_data_end+0xfffc1148>
 8041264:	00c03fc4 	movi	r3,255
 8041268:	80ffaf1e 	bne	r16,r3,8041128 <__alt_data_end+0xfffc1128>
 804126c:	003f8e06 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041270:	283f8d26 	beq	r5,zero,80410a8 <__alt_data_end+0xfffc10a8>
 8041274:	18ffffc4 	addi	r3,r3,-1
 8041278:	183fe526 	beq	r3,zero,8041210 <__alt_data_end+0xfffc1210>
 804127c:	01803fc4 	movi	r6,255
 8041280:	81bfdb1e 	bne	r16,r6,80411f0 <__alt_data_end+0xfffc11f0>
 8041284:	003f8806 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041288:	1000201e 	bne	r2,zero,804130c <__addsf3+0x2c0>
 804128c:	80800044 	addi	r2,r16,1
 8041290:	10803fcc 	andi	r2,r2,255
 8041294:	01800044 	movi	r6,1
 8041298:	3080450e 	bge	r6,r2,80413b0 <__addsf3+0x364>
 804129c:	2165c83a 	sub	r18,r4,r5
 80412a0:	90c1002c 	andhi	r3,r18,1024
 80412a4:	18002b26 	beq	r3,zero,8041354 <__addsf3+0x308>
 80412a8:	2925c83a 	sub	r18,r5,r4
 80412ac:	3823883a 	mov	r17,r7
 80412b0:	003fab06 	br	8041160 <__alt_data_end+0xfffc1160>
 80412b4:	8805883a 	mov	r2,r17
 80412b8:	043fffc4 	movi	r16,-1
 80412bc:	0009883a 	mov	r4,zero
 80412c0:	003f8706 	br	80410e0 <__alt_data_end+0xfffc10e0>
 80412c4:	013f0034 	movhi	r4,64512
 80412c8:	213fffc4 	addi	r4,r4,-1
 80412cc:	80a1c83a 	sub	r16,r16,r2
 80412d0:	9108703a 	and	r4,r18,r4
 80412d4:	003f7406 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80412d8:	1800411e 	bne	r3,zero,80413e0 <__addsf3+0x394>
 80412dc:	80c00044 	addi	r3,r16,1
 80412e0:	19c03fcc 	andi	r7,r3,255
 80412e4:	01800044 	movi	r6,1
 80412e8:	31c0260e 	bge	r6,r7,8041384 <__addsf3+0x338>
 80412ec:	01803fc4 	movi	r6,255
 80412f0:	19802126 	beq	r3,r6,8041378 <__addsf3+0x32c>
 80412f4:	2149883a 	add	r4,r4,r5
 80412f8:	2008d07a 	srli	r4,r4,1
 80412fc:	1821883a 	mov	r16,r3
 8041300:	003f6906 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041304:	01400044 	movi	r5,1
 8041308:	003f8f06 	br	8041148 <__alt_data_end+0xfffc1148>
 804130c:	8000151e 	bne	r16,zero,8041364 <__addsf3+0x318>
 8041310:	20002f26 	beq	r4,zero,80413d0 <__addsf3+0x384>
 8041314:	0084303a 	nor	r2,zero,r2
 8041318:	10000a26 	beq	r2,zero,8041344 <__addsf3+0x2f8>
 804131c:	00c03fc4 	movi	r3,255
 8041320:	30c02b26 	beq	r6,r3,80413d0 <__addsf3+0x384>
 8041324:	00c006c4 	movi	r3,27
 8041328:	18806d16 	blt	r3,r2,80414e0 <__addsf3+0x494>
 804132c:	00c00804 	movi	r3,32
 8041330:	1887c83a 	sub	r3,r3,r2
 8041334:	20c6983a 	sll	r3,r4,r3
 8041338:	2084d83a 	srl	r2,r4,r2
 804133c:	1808c03a 	cmpne	r4,r3,zero
 8041340:	1108b03a 	or	r4,r2,r4
 8041344:	2909c83a 	sub	r4,r5,r4
 8041348:	3021883a 	mov	r16,r6
 804134c:	3823883a 	mov	r17,r7
 8041350:	003f7e06 	br	804114c <__alt_data_end+0xfffc114c>
 8041354:	903f821e 	bne	r18,zero,8041160 <__alt_data_end+0xfffc1160>
 8041358:	0005883a 	mov	r2,zero
 804135c:	0021883a 	mov	r16,zero
 8041360:	003fba06 	br	804124c <__alt_data_end+0xfffc124c>
 8041364:	00c03fc4 	movi	r3,255
 8041368:	30c01926 	beq	r6,r3,80413d0 <__addsf3+0x384>
 804136c:	0085c83a 	sub	r2,zero,r2
 8041370:	21010034 	orhi	r4,r4,1024
 8041374:	003feb06 	br	8041324 <__alt_data_end+0xfffc1324>
 8041378:	043fffc4 	movi	r16,-1
 804137c:	0009883a 	mov	r4,zero
 8041380:	003f5706 	br	80410e0 <__alt_data_end+0xfffc10e0>
 8041384:	80004a1e 	bne	r16,zero,80414b0 <__addsf3+0x464>
 8041388:	20005926 	beq	r4,zero,80414f0 <__addsf3+0x4a4>
 804138c:	283f4626 	beq	r5,zero,80410a8 <__alt_data_end+0xfffc10a8>
 8041390:	2149883a 	add	r4,r4,r5
 8041394:	2081002c 	andhi	r2,r4,1024
 8041398:	103f8226 	beq	r2,zero,80411a4 <__alt_data_end+0xfffc11a4>
 804139c:	00bf0034 	movhi	r2,64512
 80413a0:	10bfffc4 	addi	r2,r2,-1
 80413a4:	3021883a 	mov	r16,r6
 80413a8:	2088703a 	and	r4,r4,r2
 80413ac:	003f3e06 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80413b0:	8000121e 	bne	r16,zero,80413fc <__addsf3+0x3b0>
 80413b4:	2000261e 	bne	r4,zero,8041450 <__addsf3+0x404>
 80413b8:	283fa226 	beq	r5,zero,8041244 <__alt_data_end+0xfffc1244>
 80413bc:	2809883a 	mov	r4,r5
 80413c0:	3823883a 	mov	r17,r7
 80413c4:	003f3806 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80413c8:	01400044 	movi	r5,1
 80413cc:	003f9006 	br	8041210 <__alt_data_end+0xfffc1210>
 80413d0:	2809883a 	mov	r4,r5
 80413d4:	3021883a 	mov	r16,r6
 80413d8:	3823883a 	mov	r17,r7
 80413dc:	003f3206 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80413e0:	80000c1e 	bne	r16,zero,8041414 <__addsf3+0x3c8>
 80413e4:	20002f26 	beq	r4,zero,80414a4 <__addsf3+0x458>
 80413e8:	00c6303a 	nor	r3,zero,r3
 80413ec:	18002b1e 	bne	r3,zero,804149c <__addsf3+0x450>
 80413f0:	2149883a 	add	r4,r4,r5
 80413f4:	3021883a 	mov	r16,r6
 80413f8:	003f8606 	br	8041214 <__alt_data_end+0xfffc1214>
 80413fc:	20001b1e 	bne	r4,zero,804146c <__addsf3+0x420>
 8041400:	28003926 	beq	r5,zero,80414e8 <__addsf3+0x49c>
 8041404:	2809883a 	mov	r4,r5
 8041408:	3823883a 	mov	r17,r7
 804140c:	04003fc4 	movi	r16,255
 8041410:	003f2506 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041414:	01c03fc4 	movi	r7,255
 8041418:	31c02226 	beq	r6,r7,80414a4 <__addsf3+0x458>
 804141c:	00c7c83a 	sub	r3,zero,r3
 8041420:	21010034 	orhi	r4,r4,1024
 8041424:	01c006c4 	movi	r7,27
 8041428:	38c03616 	blt	r7,r3,8041504 <__addsf3+0x4b8>
 804142c:	01c00804 	movi	r7,32
 8041430:	38cfc83a 	sub	r7,r7,r3
 8041434:	21ce983a 	sll	r7,r4,r7
 8041438:	20c6d83a 	srl	r3,r4,r3
 804143c:	3808c03a 	cmpne	r4,r7,zero
 8041440:	1906b03a 	or	r3,r3,r4
 8041444:	1949883a 	add	r4,r3,r5
 8041448:	3021883a 	mov	r16,r6
 804144c:	003f7106 	br	8041214 <__alt_data_end+0xfffc1214>
 8041450:	283f1526 	beq	r5,zero,80410a8 <__alt_data_end+0xfffc10a8>
 8041454:	2145c83a 	sub	r2,r4,r5
 8041458:	10c1002c 	andhi	r3,r2,1024
 804145c:	183f4f26 	beq	r3,zero,804119c <__alt_data_end+0xfffc119c>
 8041460:	2909c83a 	sub	r4,r5,r4
 8041464:	3823883a 	mov	r17,r7
 8041468:	003f0f06 	br	80410a8 <__alt_data_end+0xfffc10a8>
 804146c:	28001a26 	beq	r5,zero,80414d8 <__addsf3+0x48c>
 8041470:	2008d0fa 	srli	r4,r4,3
 8041474:	2080102c 	andhi	r2,r4,64
 8041478:	10000526 	beq	r2,zero,8041490 <__addsf3+0x444>
 804147c:	280ad0fa 	srli	r5,r5,3
 8041480:	2880102c 	andhi	r2,r5,64
 8041484:	1000021e 	bne	r2,zero,8041490 <__addsf3+0x444>
 8041488:	2809883a 	mov	r4,r5
 804148c:	3823883a 	mov	r17,r7
 8041490:	200890fa 	slli	r4,r4,3
 8041494:	04003fc4 	movi	r16,255
 8041498:	003f0306 	br	80410a8 <__alt_data_end+0xfffc10a8>
 804149c:	01c03fc4 	movi	r7,255
 80414a0:	31ffe01e 	bne	r6,r7,8041424 <__alt_data_end+0xfffc1424>
 80414a4:	2809883a 	mov	r4,r5
 80414a8:	3021883a 	mov	r16,r6
 80414ac:	003efe06 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80414b0:	20001126 	beq	r4,zero,80414f8 <__addsf3+0x4ac>
 80414b4:	28000826 	beq	r5,zero,80414d8 <__addsf3+0x48c>
 80414b8:	2008d0fa 	srli	r4,r4,3
 80414bc:	2080102c 	andhi	r2,r4,64
 80414c0:	103ff326 	beq	r2,zero,8041490 <__alt_data_end+0xfffc1490>
 80414c4:	280ad0fa 	srli	r5,r5,3
 80414c8:	2880102c 	andhi	r2,r5,64
 80414cc:	103ff01e 	bne	r2,zero,8041490 <__alt_data_end+0xfffc1490>
 80414d0:	2809883a 	mov	r4,r5
 80414d4:	003fee06 	br	8041490 <__alt_data_end+0xfffc1490>
 80414d8:	04003fc4 	movi	r16,255
 80414dc:	003ef206 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80414e0:	01000044 	movi	r4,1
 80414e4:	003f9706 	br	8041344 <__alt_data_end+0xfffc1344>
 80414e8:	0005883a 	mov	r2,zero
 80414ec:	003f3406 	br	80411c0 <__alt_data_end+0xfffc11c0>
 80414f0:	2809883a 	mov	r4,r5
 80414f4:	003eec06 	br	80410a8 <__alt_data_end+0xfffc10a8>
 80414f8:	2809883a 	mov	r4,r5
 80414fc:	04003fc4 	movi	r16,255
 8041500:	003ee906 	br	80410a8 <__alt_data_end+0xfffc10a8>
 8041504:	00c00044 	movi	r3,1
 8041508:	003fce06 	br	8041444 <__alt_data_end+0xfffc1444>
 804150c:	0005883a 	mov	r2,zero
 8041510:	003f4e06 	br	804124c <__alt_data_end+0xfffc124c>

08041514 <__lesf2>:
 8041514:	2004d5fa 	srli	r2,r4,23
 8041518:	280cd5fa 	srli	r6,r5,23
 804151c:	00c02034 	movhi	r3,128
 8041520:	18ffffc4 	addi	r3,r3,-1
 8041524:	10803fcc 	andi	r2,r2,255
 8041528:	01c03fc4 	movi	r7,255
 804152c:	1910703a 	and	r8,r3,r4
 8041530:	31803fcc 	andi	r6,r6,255
 8041534:	1946703a 	and	r3,r3,r5
 8041538:	2008d7fa 	srli	r4,r4,31
 804153c:	280ad7fa 	srli	r5,r5,31
 8041540:	11c01b26 	beq	r2,r7,80415b0 <__lesf2+0x9c>
 8041544:	01c03fc4 	movi	r7,255
 8041548:	31c01126 	beq	r6,r7,8041590 <__lesf2+0x7c>
 804154c:	1000071e 	bne	r2,zero,804156c <__lesf2+0x58>
 8041550:	400f003a 	cmpeq	r7,r8,zero
 8041554:	21003fcc 	andi	r4,r4,255
 8041558:	3000081e 	bne	r6,zero,804157c <__lesf2+0x68>
 804155c:	1800071e 	bne	r3,zero,804157c <__lesf2+0x68>
 8041560:	0005883a 	mov	r2,zero
 8041564:	40000f1e 	bne	r8,zero,80415a4 <__lesf2+0x90>
 8041568:	f800283a 	ret
 804156c:	21003fcc 	andi	r4,r4,255
 8041570:	30000a1e 	bne	r6,zero,804159c <__lesf2+0x88>
 8041574:	18000b26 	beq	r3,zero,80415a4 <__lesf2+0x90>
 8041578:	000f883a 	mov	r7,zero
 804157c:	29403fcc 	andi	r5,r5,255
 8041580:	38000726 	beq	r7,zero,80415a0 <__lesf2+0x8c>
 8041584:	28000826 	beq	r5,zero,80415a8 <__lesf2+0x94>
 8041588:	00800044 	movi	r2,1
 804158c:	f800283a 	ret
 8041590:	183fee26 	beq	r3,zero,804154c <__alt_data_end+0xfffc154c>
 8041594:	00800084 	movi	r2,2
 8041598:	f800283a 	ret
 804159c:	29403fcc 	andi	r5,r5,255
 80415a0:	21400626 	beq	r4,r5,80415bc <__lesf2+0xa8>
 80415a4:	203ff826 	beq	r4,zero,8041588 <__alt_data_end+0xfffc1588>
 80415a8:	00bfffc4 	movi	r2,-1
 80415ac:	f800283a 	ret
 80415b0:	403fe426 	beq	r8,zero,8041544 <__alt_data_end+0xfffc1544>
 80415b4:	00800084 	movi	r2,2
 80415b8:	f800283a 	ret
 80415bc:	30bff916 	blt	r6,r2,80415a4 <__alt_data_end+0xfffc15a4>
 80415c0:	11800216 	blt	r2,r6,80415cc <__lesf2+0xb8>
 80415c4:	1a3ff736 	bltu	r3,r8,80415a4 <__alt_data_end+0xfffc15a4>
 80415c8:	40c0022e 	bgeu	r8,r3,80415d4 <__lesf2+0xc0>
 80415cc:	203fee1e 	bne	r4,zero,8041588 <__alt_data_end+0xfffc1588>
 80415d0:	003ff506 	br	80415a8 <__alt_data_end+0xfffc15a8>
 80415d4:	0005883a 	mov	r2,zero
 80415d8:	f800283a 	ret

080415dc <__floatunsisf>:
 80415dc:	defffe04 	addi	sp,sp,-8
 80415e0:	dfc00115 	stw	ra,4(sp)
 80415e4:	dc000015 	stw	r16,0(sp)
 80415e8:	20002c26 	beq	r4,zero,804169c <__floatunsisf+0xc0>
 80415ec:	2021883a 	mov	r16,r4
 80415f0:	80416cc0 	call	80416cc <__clzsi2>
 80415f4:	00c02784 	movi	r3,158
 80415f8:	1887c83a 	sub	r3,r3,r2
 80415fc:	01002584 	movi	r4,150
 8041600:	20c00f16 	blt	r4,r3,8041640 <__floatunsisf+0x64>
 8041604:	20c9c83a 	sub	r4,r4,r3
 8041608:	8108983a 	sll	r4,r16,r4
 804160c:	00802034 	movhi	r2,128
 8041610:	10bfffc4 	addi	r2,r2,-1
 8041614:	2088703a 	and	r4,r4,r2
 8041618:	18803fcc 	andi	r2,r3,255
 804161c:	100695fa 	slli	r3,r2,23
 8041620:	00802034 	movhi	r2,128
 8041624:	10bfffc4 	addi	r2,r2,-1
 8041628:	2084703a 	and	r2,r4,r2
 804162c:	10c4b03a 	or	r2,r2,r3
 8041630:	dfc00117 	ldw	ra,4(sp)
 8041634:	dc000017 	ldw	r16,0(sp)
 8041638:	dec00204 	addi	sp,sp,8
 804163c:	f800283a 	ret
 8041640:	01002644 	movi	r4,153
 8041644:	20c01816 	blt	r4,r3,80416a8 <__floatunsisf+0xcc>
 8041648:	20c9c83a 	sub	r4,r4,r3
 804164c:	8108983a 	sll	r4,r16,r4
 8041650:	017f0034 	movhi	r5,64512
 8041654:	297fffc4 	addi	r5,r5,-1
 8041658:	218001cc 	andi	r6,r4,7
 804165c:	214a703a 	and	r5,r4,r5
 8041660:	30000426 	beq	r6,zero,8041674 <__floatunsisf+0x98>
 8041664:	210003cc 	andi	r4,r4,15
 8041668:	01800104 	movi	r6,4
 804166c:	21800126 	beq	r4,r6,8041674 <__floatunsisf+0x98>
 8041670:	298b883a 	add	r5,r5,r6
 8041674:	2901002c 	andhi	r4,r5,1024
 8041678:	20000526 	beq	r4,zero,8041690 <__floatunsisf+0xb4>
 804167c:	00c027c4 	movi	r3,159
 8041680:	1887c83a 	sub	r3,r3,r2
 8041684:	00bf0034 	movhi	r2,64512
 8041688:	10bfffc4 	addi	r2,r2,-1
 804168c:	288a703a 	and	r5,r5,r2
 8041690:	280891ba 	slli	r4,r5,6
 8041694:	2008d27a 	srli	r4,r4,9
 8041698:	003fdf06 	br	8041618 <__alt_data_end+0xfffc1618>
 804169c:	0007883a 	mov	r3,zero
 80416a0:	0009883a 	mov	r4,zero
 80416a4:	003fdc06 	br	8041618 <__alt_data_end+0xfffc1618>
 80416a8:	01402e44 	movi	r5,185
 80416ac:	28cbc83a 	sub	r5,r5,r3
 80416b0:	01000144 	movi	r4,5
 80416b4:	2089c83a 	sub	r4,r4,r2
 80416b8:	814a983a 	sll	r5,r16,r5
 80416bc:	8108d83a 	srl	r4,r16,r4
 80416c0:	2820c03a 	cmpne	r16,r5,zero
 80416c4:	2408b03a 	or	r4,r4,r16
 80416c8:	003fe106 	br	8041650 <__alt_data_end+0xfffc1650>

080416cc <__clzsi2>:
 80416cc:	00bfffd4 	movui	r2,65535
 80416d0:	11000536 	bltu	r2,r4,80416e8 <__clzsi2+0x1c>
 80416d4:	00803fc4 	movi	r2,255
 80416d8:	11000f36 	bltu	r2,r4,8041718 <__clzsi2+0x4c>
 80416dc:	00800804 	movi	r2,32
 80416e0:	0007883a 	mov	r3,zero
 80416e4:	00000506 	br	80416fc <__clzsi2+0x30>
 80416e8:	00804034 	movhi	r2,256
 80416ec:	10bfffc4 	addi	r2,r2,-1
 80416f0:	11000c2e 	bgeu	r2,r4,8041724 <__clzsi2+0x58>
 80416f4:	00800204 	movi	r2,8
 80416f8:	00c00604 	movi	r3,24
 80416fc:	20c8d83a 	srl	r4,r4,r3
 8041700:	00c20134 	movhi	r3,2052
 8041704:	18dcd3c4 	addi	r3,r3,29519
 8041708:	1909883a 	add	r4,r3,r4
 804170c:	20c00003 	ldbu	r3,0(r4)
 8041710:	10c5c83a 	sub	r2,r2,r3
 8041714:	f800283a 	ret
 8041718:	00800604 	movi	r2,24
 804171c:	00c00204 	movi	r3,8
 8041720:	003ff606 	br	80416fc <__alt_data_end+0xfffc16fc>
 8041724:	00800404 	movi	r2,16
 8041728:	1007883a 	mov	r3,r2
 804172c:	003ff306 	br	80416fc <__alt_data_end+0xfffc16fc>

08041730 <clock>:
 8041730:	00820174 	movhi	r2,2053
 8041734:	10a3ea04 	addi	r2,r2,-28760
 8041738:	11000017 	ldw	r4,0(r2)
 804173c:	defffb04 	addi	sp,sp,-20
 8041740:	d80b883a 	mov	r5,sp
 8041744:	dfc00415 	stw	ra,16(sp)
 8041748:	804177c0 	call	804177c <_times_r>
 804174c:	00ffffc4 	movi	r3,-1
 8041750:	10c00726 	beq	r2,r3,8041770 <clock+0x40>
 8041754:	d8c00017 	ldw	r3,0(sp)
 8041758:	d8800117 	ldw	r2,4(sp)
 804175c:	1885883a 	add	r2,r3,r2
 8041760:	d8c00217 	ldw	r3,8(sp)
 8041764:	10c7883a 	add	r3,r2,r3
 8041768:	d8800317 	ldw	r2,12(sp)
 804176c:	1885883a 	add	r2,r3,r2
 8041770:	dfc00417 	ldw	ra,16(sp)
 8041774:	dec00504 	addi	sp,sp,20
 8041778:	f800283a 	ret

0804177c <_times_r>:
 804177c:	2809883a 	mov	r4,r5
 8041780:	8041e301 	jmpi	8041e30 <times>

08041784 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8041784:	defff904 	addi	sp,sp,-28
 8041788:	dfc00615 	stw	ra,24(sp)
 804178c:	df000515 	stw	fp,20(sp)
 8041790:	df000504 	addi	fp,sp,20
 8041794:	e13ffc15 	stw	r4,-16(fp)
 8041798:	e17ffd15 	stw	r5,-12(fp)
 804179c:	e1bffe15 	stw	r6,-8(fp)
 80417a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80417a4:	e0800217 	ldw	r2,8(fp)
 80417a8:	d8800015 	stw	r2,0(sp)
 80417ac:	e1ffff17 	ldw	r7,-4(fp)
 80417b0:	e1bffe17 	ldw	r6,-8(fp)
 80417b4:	e17ffd17 	ldw	r5,-12(fp)
 80417b8:	e13ffc17 	ldw	r4,-16(fp)
 80417bc:	80419340 	call	8041934 <alt_iic_isr_register>
}  
 80417c0:	e037883a 	mov	sp,fp
 80417c4:	dfc00117 	ldw	ra,4(sp)
 80417c8:	df000017 	ldw	fp,0(sp)
 80417cc:	dec00204 	addi	sp,sp,8
 80417d0:	f800283a 	ret

080417d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80417d4:	defff904 	addi	sp,sp,-28
 80417d8:	df000615 	stw	fp,24(sp)
 80417dc:	df000604 	addi	fp,sp,24
 80417e0:	e13ffe15 	stw	r4,-8(fp)
 80417e4:	e17fff15 	stw	r5,-4(fp)
 80417e8:	e0bfff17 	ldw	r2,-4(fp)
 80417ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80417f0:	0005303a 	rdctl	r2,status
 80417f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80417f8:	e0fffb17 	ldw	r3,-20(fp)
 80417fc:	00bfff84 	movi	r2,-2
 8041800:	1884703a 	and	r2,r3,r2
 8041804:	1001703a 	wrctl	status,r2
  
  return context;
 8041808:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 804180c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8041810:	00c00044 	movi	r3,1
 8041814:	e0bffa17 	ldw	r2,-24(fp)
 8041818:	1884983a 	sll	r2,r3,r2
 804181c:	1007883a 	mov	r3,r2
 8041820:	d0a6e917 	ldw	r2,-25692(gp)
 8041824:	1884b03a 	or	r2,r3,r2
 8041828:	d0a6e915 	stw	r2,-25692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 804182c:	d0a6e917 	ldw	r2,-25692(gp)
 8041830:	100170fa 	wrctl	ienable,r2
 8041834:	e0bffc17 	ldw	r2,-16(fp)
 8041838:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804183c:	e0bffd17 	ldw	r2,-12(fp)
 8041840:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8041844:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8041848:	0001883a 	nop
}
 804184c:	e037883a 	mov	sp,fp
 8041850:	df000017 	ldw	fp,0(sp)
 8041854:	dec00104 	addi	sp,sp,4
 8041858:	f800283a 	ret

0804185c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 804185c:	defff904 	addi	sp,sp,-28
 8041860:	df000615 	stw	fp,24(sp)
 8041864:	df000604 	addi	fp,sp,24
 8041868:	e13ffe15 	stw	r4,-8(fp)
 804186c:	e17fff15 	stw	r5,-4(fp)
 8041870:	e0bfff17 	ldw	r2,-4(fp)
 8041874:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041878:	0005303a 	rdctl	r2,status
 804187c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8041880:	e0fffb17 	ldw	r3,-20(fp)
 8041884:	00bfff84 	movi	r2,-2
 8041888:	1884703a 	and	r2,r3,r2
 804188c:	1001703a 	wrctl	status,r2
  
  return context;
 8041890:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8041894:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8041898:	00c00044 	movi	r3,1
 804189c:	e0bffa17 	ldw	r2,-24(fp)
 80418a0:	1884983a 	sll	r2,r3,r2
 80418a4:	0084303a 	nor	r2,zero,r2
 80418a8:	1007883a 	mov	r3,r2
 80418ac:	d0a6e917 	ldw	r2,-25692(gp)
 80418b0:	1884703a 	and	r2,r3,r2
 80418b4:	d0a6e915 	stw	r2,-25692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80418b8:	d0a6e917 	ldw	r2,-25692(gp)
 80418bc:	100170fa 	wrctl	ienable,r2
 80418c0:	e0bffc17 	ldw	r2,-16(fp)
 80418c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80418c8:	e0bffd17 	ldw	r2,-12(fp)
 80418cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80418d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80418d4:	0001883a 	nop
}
 80418d8:	e037883a 	mov	sp,fp
 80418dc:	df000017 	ldw	fp,0(sp)
 80418e0:	dec00104 	addi	sp,sp,4
 80418e4:	f800283a 	ret

080418e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80418e8:	defffc04 	addi	sp,sp,-16
 80418ec:	df000315 	stw	fp,12(sp)
 80418f0:	df000304 	addi	fp,sp,12
 80418f4:	e13ffe15 	stw	r4,-8(fp)
 80418f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80418fc:	000530fa 	rdctl	r2,ienable
 8041900:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8041904:	00c00044 	movi	r3,1
 8041908:	e0bfff17 	ldw	r2,-4(fp)
 804190c:	1884983a 	sll	r2,r3,r2
 8041910:	1007883a 	mov	r3,r2
 8041914:	e0bffd17 	ldw	r2,-12(fp)
 8041918:	1884703a 	and	r2,r3,r2
 804191c:	1004c03a 	cmpne	r2,r2,zero
 8041920:	10803fcc 	andi	r2,r2,255
}
 8041924:	e037883a 	mov	sp,fp
 8041928:	df000017 	ldw	fp,0(sp)
 804192c:	dec00104 	addi	sp,sp,4
 8041930:	f800283a 	ret

08041934 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8041934:	defff504 	addi	sp,sp,-44
 8041938:	dfc00a15 	stw	ra,40(sp)
 804193c:	df000915 	stw	fp,36(sp)
 8041940:	df000904 	addi	fp,sp,36
 8041944:	e13ffc15 	stw	r4,-16(fp)
 8041948:	e17ffd15 	stw	r5,-12(fp)
 804194c:	e1bffe15 	stw	r6,-8(fp)
 8041950:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8041954:	00bffa84 	movi	r2,-22
 8041958:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 804195c:	e0bffd17 	ldw	r2,-12(fp)
 8041960:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8041964:	e0bff817 	ldw	r2,-32(fp)
 8041968:	10800808 	cmpgei	r2,r2,32
 804196c:	1000271e 	bne	r2,zero,8041a0c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041970:	0005303a 	rdctl	r2,status
 8041974:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8041978:	e0fffb17 	ldw	r3,-20(fp)
 804197c:	00bfff84 	movi	r2,-2
 8041980:	1884703a 	and	r2,r3,r2
 8041984:	1001703a 	wrctl	status,r2
  
  return context;
 8041988:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 804198c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8041990:	00820174 	movhi	r2,2053
 8041994:	10aadf04 	addi	r2,r2,-21636
 8041998:	e0fff817 	ldw	r3,-32(fp)
 804199c:	180690fa 	slli	r3,r3,3
 80419a0:	10c5883a 	add	r2,r2,r3
 80419a4:	e0fffe17 	ldw	r3,-8(fp)
 80419a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80419ac:	00820174 	movhi	r2,2053
 80419b0:	10aadf04 	addi	r2,r2,-21636
 80419b4:	e0fff817 	ldw	r3,-32(fp)
 80419b8:	180690fa 	slli	r3,r3,3
 80419bc:	10c5883a 	add	r2,r2,r3
 80419c0:	10800104 	addi	r2,r2,4
 80419c4:	e0ffff17 	ldw	r3,-4(fp)
 80419c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80419cc:	e0bffe17 	ldw	r2,-8(fp)
 80419d0:	10000526 	beq	r2,zero,80419e8 <alt_iic_isr_register+0xb4>
 80419d4:	e0bff817 	ldw	r2,-32(fp)
 80419d8:	100b883a 	mov	r5,r2
 80419dc:	e13ffc17 	ldw	r4,-16(fp)
 80419e0:	80417d40 	call	80417d4 <alt_ic_irq_enable>
 80419e4:	00000406 	br	80419f8 <alt_iic_isr_register+0xc4>
 80419e8:	e0bff817 	ldw	r2,-32(fp)
 80419ec:	100b883a 	mov	r5,r2
 80419f0:	e13ffc17 	ldw	r4,-16(fp)
 80419f4:	804185c0 	call	804185c <alt_ic_irq_disable>
 80419f8:	e0bff715 	stw	r2,-36(fp)
 80419fc:	e0bffa17 	ldw	r2,-24(fp)
 8041a00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8041a04:	e0bff917 	ldw	r2,-28(fp)
 8041a08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8041a0c:	e0bff717 	ldw	r2,-36(fp)
}
 8041a10:	e037883a 	mov	sp,fp
 8041a14:	dfc00117 	ldw	ra,4(sp)
 8041a18:	df000017 	ldw	fp,0(sp)
 8041a1c:	dec00204 	addi	sp,sp,8
 8041a20:	f800283a 	ret

08041a24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8041a24:	defffc04 	addi	sp,sp,-16
 8041a28:	df000315 	stw	fp,12(sp)
 8041a2c:	df000304 	addi	fp,sp,12
 8041a30:	e13ffd15 	stw	r4,-12(fp)
 8041a34:	e17ffe15 	stw	r5,-8(fp)
 8041a38:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8041a3c:	e0fffe17 	ldw	r3,-8(fp)
 8041a40:	e0bffd17 	ldw	r2,-12(fp)
 8041a44:	18800c26 	beq	r3,r2,8041a78 <alt_load_section+0x54>
  {
    while( to != end )
 8041a48:	00000806 	br	8041a6c <alt_load_section+0x48>
    {
      *to++ = *from++;
 8041a4c:	e0bffe17 	ldw	r2,-8(fp)
 8041a50:	10c00104 	addi	r3,r2,4
 8041a54:	e0fffe15 	stw	r3,-8(fp)
 8041a58:	e0fffd17 	ldw	r3,-12(fp)
 8041a5c:	19000104 	addi	r4,r3,4
 8041a60:	e13ffd15 	stw	r4,-12(fp)
 8041a64:	18c00017 	ldw	r3,0(r3)
 8041a68:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8041a6c:	e0fffe17 	ldw	r3,-8(fp)
 8041a70:	e0bfff17 	ldw	r2,-4(fp)
 8041a74:	18bff51e 	bne	r3,r2,8041a4c <__alt_data_end+0xfffc1a4c>
    {
      *to++ = *from++;
    }
  }
}
 8041a78:	0001883a 	nop
 8041a7c:	e037883a 	mov	sp,fp
 8041a80:	df000017 	ldw	fp,0(sp)
 8041a84:	dec00104 	addi	sp,sp,4
 8041a88:	f800283a 	ret

08041a8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8041a8c:	defffe04 	addi	sp,sp,-8
 8041a90:	dfc00115 	stw	ra,4(sp)
 8041a94:	df000015 	stw	fp,0(sp)
 8041a98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8041a9c:	01820174 	movhi	r6,2053
 8041aa0:	31a3f704 	addi	r6,r6,-28708
 8041aa4:	01420134 	movhi	r5,2052
 8041aa8:	295d3104 	addi	r5,r5,29892
 8041aac:	01020174 	movhi	r4,2053
 8041ab0:	2123f704 	addi	r4,r4,-28708
 8041ab4:	8041a240 	call	8041a24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8041ab8:	01820134 	movhi	r6,2052
 8041abc:	31809104 	addi	r6,r6,580
 8041ac0:	01420134 	movhi	r5,2052
 8041ac4:	29400804 	addi	r5,r5,32
 8041ac8:	01020134 	movhi	r4,2052
 8041acc:	21000804 	addi	r4,r4,32
 8041ad0:	8041a240 	call	8041a24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8041ad4:	01820134 	movhi	r6,2052
 8041ad8:	319d3104 	addi	r6,r6,29892
 8041adc:	01420134 	movhi	r5,2052
 8041ae0:	295cae04 	addi	r5,r5,29368
 8041ae4:	01020134 	movhi	r4,2052
 8041ae8:	211cae04 	addi	r4,r4,29368
 8041aec:	8041a240 	call	8041a24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8041af0:	8043bd40 	call	8043bd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8041af4:	8043e780 	call	8043e78 <alt_icache_flush_all>
}
 8041af8:	0001883a 	nop
 8041afc:	e037883a 	mov	sp,fp
 8041b00:	dfc00117 	ldw	ra,4(sp)
 8041b04:	df000017 	ldw	fp,0(sp)
 8041b08:	dec00204 	addi	sp,sp,8
 8041b0c:	f800283a 	ret

08041b10 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8041b10:	defffd04 	addi	sp,sp,-12
 8041b14:	dfc00215 	stw	ra,8(sp)
 8041b18:	df000115 	stw	fp,4(sp)
 8041b1c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8041b20:	0009883a 	mov	r4,zero
 8041b24:	8041edc0 	call	8041edc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8041b28:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8041b2c:	8041f140 	call	8041f14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8041b30:	01820134 	movhi	r6,2052
 8041b34:	319d1504 	addi	r6,r6,29780
 8041b38:	01420134 	movhi	r5,2052
 8041b3c:	295d1504 	addi	r5,r5,29780
 8041b40:	01020134 	movhi	r4,2052
 8041b44:	211d1504 	addi	r4,r4,29780
 8041b48:	804400c0 	call	804400c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8041b4c:	8043d280 	call	8043d28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8041b50:	01020134 	movhi	r4,2052
 8041b54:	210f6204 	addi	r4,r4,15752
 8041b58:	80447440 	call	8044744 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8041b5c:	d0a6ea17 	ldw	r2,-25688(gp)
 8041b60:	d0e6eb17 	ldw	r3,-25684(gp)
 8041b64:	d126ec17 	ldw	r4,-25680(gp)
 8041b68:	200d883a 	mov	r6,r4
 8041b6c:	180b883a 	mov	r5,r3
 8041b70:	1009883a 	mov	r4,r2
 8041b74:	80408bc0 	call	80408bc <main>
 8041b78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8041b7c:	01000044 	movi	r4,1
 8041b80:	8043b040 	call	8043b04 <close>
  exit (result);
 8041b84:	e13fff17 	ldw	r4,-4(fp)
 8041b88:	80447580 	call	8044758 <exit>

08041b8c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8041b8c:	defff204 	addi	sp,sp,-56
 8041b90:	dfc00a15 	stw	ra,40(sp)
 8041b94:	df000915 	stw	fp,36(sp)
 8041b98:	df000904 	addi	fp,sp,36
 8041b9c:	e13fff15 	stw	r4,-4(fp)
 8041ba0:	e1400215 	stw	r5,8(fp)
 8041ba4:	e1800315 	stw	r6,12(fp)
 8041ba8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8041bac:	e0800204 	addi	r2,fp,8
 8041bb0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8041bb4:	e0bfff17 	ldw	r2,-4(fp)
 8041bb8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8041bbc:	00006f06 	br	8041d7c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8041bc0:	e0bff807 	ldb	r2,-32(fp)
 8041bc4:	10800960 	cmpeqi	r2,r2,37
 8041bc8:	1000041e 	bne	r2,zero,8041bdc <alt_printf+0x50>
        {
            alt_putchar(c);
 8041bcc:	e0bff807 	ldb	r2,-32(fp)
 8041bd0:	1009883a 	mov	r4,r2
 8041bd4:	8041db80 	call	8041db8 <alt_putchar>
 8041bd8:	00006806 	br	8041d7c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8041bdc:	e0bff717 	ldw	r2,-36(fp)
 8041be0:	10c00044 	addi	r3,r2,1
 8041be4:	e0fff715 	stw	r3,-36(fp)
 8041be8:	10800003 	ldbu	r2,0(r2)
 8041bec:	e0bff805 	stb	r2,-32(fp)
 8041bf0:	e0bff807 	ldb	r2,-32(fp)
 8041bf4:	10006926 	beq	r2,zero,8041d9c <alt_printf+0x210>
            {
                if (c == '%')
 8041bf8:	e0bff807 	ldb	r2,-32(fp)
 8041bfc:	10800958 	cmpnei	r2,r2,37
 8041c00:	1000041e 	bne	r2,zero,8041c14 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8041c04:	e0bff807 	ldb	r2,-32(fp)
 8041c08:	1009883a 	mov	r4,r2
 8041c0c:	8041db80 	call	8041db8 <alt_putchar>
 8041c10:	00005a06 	br	8041d7c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8041c14:	e0bff807 	ldb	r2,-32(fp)
 8041c18:	108018d8 	cmpnei	r2,r2,99
 8041c1c:	1000081e 	bne	r2,zero,8041c40 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8041c20:	e0bffe17 	ldw	r2,-8(fp)
 8041c24:	10c00104 	addi	r3,r2,4
 8041c28:	e0fffe15 	stw	r3,-8(fp)
 8041c2c:	10800017 	ldw	r2,0(r2)
 8041c30:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8041c34:	e13ffd17 	ldw	r4,-12(fp)
 8041c38:	8041db80 	call	8041db8 <alt_putchar>
 8041c3c:	00004f06 	br	8041d7c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8041c40:	e0bff807 	ldb	r2,-32(fp)
 8041c44:	10801e18 	cmpnei	r2,r2,120
 8041c48:	1000341e 	bne	r2,zero,8041d1c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8041c4c:	e0bffe17 	ldw	r2,-8(fp)
 8041c50:	10c00104 	addi	r3,r2,4
 8041c54:	e0fffe15 	stw	r3,-8(fp)
 8041c58:	10800017 	ldw	r2,0(r2)
 8041c5c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8041c60:	e0bffb17 	ldw	r2,-20(fp)
 8041c64:	1000031e 	bne	r2,zero,8041c74 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8041c68:	01000c04 	movi	r4,48
 8041c6c:	8041db80 	call	8041db8 <alt_putchar>
                        continue;
 8041c70:	00004206 	br	8041d7c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8041c74:	00800704 	movi	r2,28
 8041c78:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8041c7c:	00000306 	br	8041c8c <alt_printf+0x100>
                        digit_shift -= 4;
 8041c80:	e0bff917 	ldw	r2,-28(fp)
 8041c84:	10bfff04 	addi	r2,r2,-4
 8041c88:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8041c8c:	00c003c4 	movi	r3,15
 8041c90:	e0bff917 	ldw	r2,-28(fp)
 8041c94:	1884983a 	sll	r2,r3,r2
 8041c98:	1007883a 	mov	r3,r2
 8041c9c:	e0bffb17 	ldw	r2,-20(fp)
 8041ca0:	1884703a 	and	r2,r3,r2
 8041ca4:	103ff626 	beq	r2,zero,8041c80 <__alt_data_end+0xfffc1c80>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8041ca8:	00001906 	br	8041d10 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8041cac:	00c003c4 	movi	r3,15
 8041cb0:	e0bff917 	ldw	r2,-28(fp)
 8041cb4:	1884983a 	sll	r2,r3,r2
 8041cb8:	1007883a 	mov	r3,r2
 8041cbc:	e0bffb17 	ldw	r2,-20(fp)
 8041cc0:	1886703a 	and	r3,r3,r2
 8041cc4:	e0bff917 	ldw	r2,-28(fp)
 8041cc8:	1884d83a 	srl	r2,r3,r2
 8041ccc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8041cd0:	e0bffc17 	ldw	r2,-16(fp)
 8041cd4:	108002a8 	cmpgeui	r2,r2,10
 8041cd8:	1000041e 	bne	r2,zero,8041cec <alt_printf+0x160>
                            c = '0' + digit;
 8041cdc:	e0bffc17 	ldw	r2,-16(fp)
 8041ce0:	10800c04 	addi	r2,r2,48
 8041ce4:	e0bff805 	stb	r2,-32(fp)
 8041ce8:	00000306 	br	8041cf8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8041cec:	e0bffc17 	ldw	r2,-16(fp)
 8041cf0:	108015c4 	addi	r2,r2,87
 8041cf4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8041cf8:	e0bff807 	ldb	r2,-32(fp)
 8041cfc:	1009883a 	mov	r4,r2
 8041d00:	8041db80 	call	8041db8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8041d04:	e0bff917 	ldw	r2,-28(fp)
 8041d08:	10bfff04 	addi	r2,r2,-4
 8041d0c:	e0bff915 	stw	r2,-28(fp)
 8041d10:	e0bff917 	ldw	r2,-28(fp)
 8041d14:	103fe50e 	bge	r2,zero,8041cac <__alt_data_end+0xfffc1cac>
 8041d18:	00001806 	br	8041d7c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8041d1c:	e0bff807 	ldb	r2,-32(fp)
 8041d20:	10801cd8 	cmpnei	r2,r2,115
 8041d24:	1000151e 	bne	r2,zero,8041d7c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8041d28:	e0bffe17 	ldw	r2,-8(fp)
 8041d2c:	10c00104 	addi	r3,r2,4
 8041d30:	e0fffe15 	stw	r3,-8(fp)
 8041d34:	10800017 	ldw	r2,0(r2)
 8041d38:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8041d3c:	00000906 	br	8041d64 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8041d40:	e0bffa17 	ldw	r2,-24(fp)
 8041d44:	10c00044 	addi	r3,r2,1
 8041d48:	e0fffa15 	stw	r3,-24(fp)
 8041d4c:	10800003 	ldbu	r2,0(r2)
 8041d50:	10803fcc 	andi	r2,r2,255
 8041d54:	1080201c 	xori	r2,r2,128
 8041d58:	10bfe004 	addi	r2,r2,-128
 8041d5c:	1009883a 	mov	r4,r2
 8041d60:	8041db80 	call	8041db8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8041d64:	e0bffa17 	ldw	r2,-24(fp)
 8041d68:	10800003 	ldbu	r2,0(r2)
 8041d6c:	10803fcc 	andi	r2,r2,255
 8041d70:	1080201c 	xori	r2,r2,128
 8041d74:	10bfe004 	addi	r2,r2,-128
 8041d78:	103ff11e 	bne	r2,zero,8041d40 <__alt_data_end+0xfffc1d40>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8041d7c:	e0bff717 	ldw	r2,-36(fp)
 8041d80:	10c00044 	addi	r3,r2,1
 8041d84:	e0fff715 	stw	r3,-36(fp)
 8041d88:	10800003 	ldbu	r2,0(r2)
 8041d8c:	e0bff805 	stb	r2,-32(fp)
 8041d90:	e0bff807 	ldb	r2,-32(fp)
 8041d94:	103f8a1e 	bne	r2,zero,8041bc0 <__alt_data_end+0xfffc1bc0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8041d98:	00000106 	br	8041da0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8041d9c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8041da0:	0001883a 	nop
 8041da4:	e037883a 	mov	sp,fp
 8041da8:	dfc00117 	ldw	ra,4(sp)
 8041dac:	df000017 	ldw	fp,0(sp)
 8041db0:	dec00504 	addi	sp,sp,20
 8041db4:	f800283a 	ret

08041db8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8041db8:	defffd04 	addi	sp,sp,-12
 8041dbc:	dfc00215 	stw	ra,8(sp)
 8041dc0:	df000115 	stw	fp,4(sp)
 8041dc4:	df000104 	addi	fp,sp,4
 8041dc8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8041dcc:	d0a00917 	ldw	r2,-32732(gp)
 8041dd0:	10800217 	ldw	r2,8(r2)
 8041dd4:	100b883a 	mov	r5,r2
 8041dd8:	e13fff17 	ldw	r4,-4(fp)
 8041ddc:	80449f40 	call	80449f4 <putc>
#endif
#endif
}
 8041de0:	e037883a 	mov	sp,fp
 8041de4:	dfc00117 	ldw	ra,4(sp)
 8041de8:	df000017 	ldw	fp,0(sp)
 8041dec:	dec00204 	addi	sp,sp,8
 8041df0:	f800283a 	ret

08041df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8041df4:	defffe04 	addi	sp,sp,-8
 8041df8:	dfc00115 	stw	ra,4(sp)
 8041dfc:	df000015 	stw	fp,0(sp)
 8041e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8041e04:	d0a01017 	ldw	r2,-32704(gp)
 8041e08:	10000326 	beq	r2,zero,8041e18 <alt_get_errno+0x24>
 8041e0c:	d0a01017 	ldw	r2,-32704(gp)
 8041e10:	103ee83a 	callr	r2
 8041e14:	00000106 	br	8041e1c <alt_get_errno+0x28>
 8041e18:	d0a6f004 	addi	r2,gp,-25664
}
 8041e1c:	e037883a 	mov	sp,fp
 8041e20:	dfc00117 	ldw	ra,4(sp)
 8041e24:	df000017 	ldw	fp,0(sp)
 8041e28:	dec00204 	addi	sp,sp,8
 8041e2c:	f800283a 	ret

08041e30 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 8041e30:	defffc04 	addi	sp,sp,-16
 8041e34:	dfc00315 	stw	ra,12(sp)
 8041e38:	df000215 	stw	fp,8(sp)
 8041e3c:	df000204 	addi	fp,sp,8
 8041e40:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8041e44:	d0a6ef17 	ldw	r2,-25668(gp)
  clock_t ticks = alt_nticks(); 
 8041e48:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8041e4c:	d0a6ee17 	ldw	r2,-25672(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 8041e50:	1000061e 	bne	r2,zero,8041e6c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 8041e54:	8041df40 	call	8041df4 <alt_get_errno>
 8041e58:	1007883a 	mov	r3,r2
 8041e5c:	00801604 	movi	r2,88
 8041e60:	18800015 	stw	r2,0(r3)
    return 0;
 8041e64:	0005883a 	mov	r2,zero
 8041e68:	00000a06 	br	8041e94 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 8041e6c:	e0bfff17 	ldw	r2,-4(fp)
 8041e70:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 8041e74:	e0bfff17 	ldw	r2,-4(fp)
 8041e78:	e0fffe17 	ldw	r3,-8(fp)
 8041e7c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 8041e80:	e0bfff17 	ldw	r2,-4(fp)
 8041e84:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 8041e88:	e0bfff17 	ldw	r2,-4(fp)
 8041e8c:	10000315 	stw	zero,12(r2)

  return ticks;
 8041e90:	e0bffe17 	ldw	r2,-8(fp)
}
 8041e94:	e037883a 	mov	sp,fp
 8041e98:	dfc00117 	ldw	ra,4(sp)
 8041e9c:	df000017 	ldw	fp,0(sp)
 8041ea0:	dec00204 	addi	sp,sp,8
 8041ea4:	f800283a 	ret

08041ea8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8041ea8:	defffd04 	addi	sp,sp,-12
 8041eac:	dfc00215 	stw	ra,8(sp)
 8041eb0:	df000115 	stw	fp,4(sp)
 8041eb4:	df000104 	addi	fp,sp,4
 8041eb8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8041ebc:	d1600d04 	addi	r5,gp,-32716
 8041ec0:	e13fff17 	ldw	r4,-4(fp)
 8041ec4:	8043c840 	call	8043c84 <alt_dev_llist_insert>
}
 8041ec8:	e037883a 	mov	sp,fp
 8041ecc:	dfc00117 	ldw	ra,4(sp)
 8041ed0:	df000017 	ldw	fp,0(sp)
 8041ed4:	dec00204 	addi	sp,sp,8
 8041ed8:	f800283a 	ret

08041edc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8041edc:	defffd04 	addi	sp,sp,-12
 8041ee0:	dfc00215 	stw	ra,8(sp)
 8041ee4:	df000115 	stw	fp,4(sp)
 8041ee8:	df000104 	addi	fp,sp,4
 8041eec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8041ef0:	80444e40 	call	80444e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8041ef4:	00800044 	movi	r2,1
 8041ef8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8041efc:	0001883a 	nop
 8041f00:	e037883a 	mov	sp,fp
 8041f04:	dfc00117 	ldw	ra,4(sp)
 8041f08:	df000017 	ldw	fp,0(sp)
 8041f0c:	dec00204 	addi	sp,sp,8
 8041f10:	f800283a 	ret

08041f14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8041f14:	defffe04 	addi	sp,sp,-8
 8041f18:	dfc00115 	stw	ra,4(sp)
 8041f1c:	df000015 	stw	fp,0(sp)
 8041f20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8041f24:	01c0fa04 	movi	r7,1000
 8041f28:	01800044 	movi	r6,1
 8041f2c:	000b883a 	mov	r5,zero
 8041f30:	01020234 	movhi	r4,2056
 8041f34:	21043004 	addi	r4,r4,4288
 8041f38:	8042a7c0 	call	8042a7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8041f3c:	000d883a 	mov	r6,zero
 8041f40:	000b883a 	mov	r5,zero
 8041f44:	01020134 	movhi	r4,2052
 8041f48:	211e4404 	addi	r4,r4,30992
 8041f4c:	80421000 	call	8042100 <altera_avalon_jtag_uart_init>
 8041f50:	01020134 	movhi	r4,2052
 8041f54:	211e3a04 	addi	r4,r4,30952
 8041f58:	8041ea80 	call	8041ea8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8041f5c:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
 8041f60:	01020174 	movhi	r4,2053
 8041f64:	21225204 	addi	r4,r4,-30392
 8041f68:	8041ea80 	call	8041ea8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 8041f6c:	01020174 	movhi	r4,2053
 8041f70:	21225d04 	addi	r4,r4,-30348
 8041f74:	8041ea80 	call	8041ea8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 8041f78:	01020174 	movhi	r4,2053
 8041f7c:	21226904 	addi	r4,r4,-30300
 8041f80:	8041ea80 	call	8041ea8 <alt_dev_reg>
}
 8041f84:	0001883a 	nop
 8041f88:	e037883a 	mov	sp,fp
 8041f8c:	dfc00117 	ldw	ra,4(sp)
 8041f90:	df000017 	ldw	fp,0(sp)
 8041f94:	dec00204 	addi	sp,sp,8
 8041f98:	f800283a 	ret

08041f9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8041f9c:	defffa04 	addi	sp,sp,-24
 8041fa0:	dfc00515 	stw	ra,20(sp)
 8041fa4:	df000415 	stw	fp,16(sp)
 8041fa8:	df000404 	addi	fp,sp,16
 8041fac:	e13ffd15 	stw	r4,-12(fp)
 8041fb0:	e17ffe15 	stw	r5,-8(fp)
 8041fb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8041fb8:	e0bffd17 	ldw	r2,-12(fp)
 8041fbc:	10800017 	ldw	r2,0(r2)
 8041fc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8041fc4:	e0bffc17 	ldw	r2,-16(fp)
 8041fc8:	10c00a04 	addi	r3,r2,40
 8041fcc:	e0bffd17 	ldw	r2,-12(fp)
 8041fd0:	10800217 	ldw	r2,8(r2)
 8041fd4:	100f883a 	mov	r7,r2
 8041fd8:	e1bfff17 	ldw	r6,-4(fp)
 8041fdc:	e17ffe17 	ldw	r5,-8(fp)
 8041fe0:	1809883a 	mov	r4,r3
 8041fe4:	80425c40 	call	80425c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8041fe8:	e037883a 	mov	sp,fp
 8041fec:	dfc00117 	ldw	ra,4(sp)
 8041ff0:	df000017 	ldw	fp,0(sp)
 8041ff4:	dec00204 	addi	sp,sp,8
 8041ff8:	f800283a 	ret

08041ffc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8041ffc:	defffa04 	addi	sp,sp,-24
 8042000:	dfc00515 	stw	ra,20(sp)
 8042004:	df000415 	stw	fp,16(sp)
 8042008:	df000404 	addi	fp,sp,16
 804200c:	e13ffd15 	stw	r4,-12(fp)
 8042010:	e17ffe15 	stw	r5,-8(fp)
 8042014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8042018:	e0bffd17 	ldw	r2,-12(fp)
 804201c:	10800017 	ldw	r2,0(r2)
 8042020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8042024:	e0bffc17 	ldw	r2,-16(fp)
 8042028:	10c00a04 	addi	r3,r2,40
 804202c:	e0bffd17 	ldw	r2,-12(fp)
 8042030:	10800217 	ldw	r2,8(r2)
 8042034:	100f883a 	mov	r7,r2
 8042038:	e1bfff17 	ldw	r6,-4(fp)
 804203c:	e17ffe17 	ldw	r5,-8(fp)
 8042040:	1809883a 	mov	r4,r3
 8042044:	80427e00 	call	80427e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8042048:	e037883a 	mov	sp,fp
 804204c:	dfc00117 	ldw	ra,4(sp)
 8042050:	df000017 	ldw	fp,0(sp)
 8042054:	dec00204 	addi	sp,sp,8
 8042058:	f800283a 	ret

0804205c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 804205c:	defffc04 	addi	sp,sp,-16
 8042060:	dfc00315 	stw	ra,12(sp)
 8042064:	df000215 	stw	fp,8(sp)
 8042068:	df000204 	addi	fp,sp,8
 804206c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8042070:	e0bfff17 	ldw	r2,-4(fp)
 8042074:	10800017 	ldw	r2,0(r2)
 8042078:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 804207c:	e0bffe17 	ldw	r2,-8(fp)
 8042080:	10c00a04 	addi	r3,r2,40
 8042084:	e0bfff17 	ldw	r2,-4(fp)
 8042088:	10800217 	ldw	r2,8(r2)
 804208c:	100b883a 	mov	r5,r2
 8042090:	1809883a 	mov	r4,r3
 8042094:	804246c0 	call	804246c <altera_avalon_jtag_uart_close>
}
 8042098:	e037883a 	mov	sp,fp
 804209c:	dfc00117 	ldw	ra,4(sp)
 80420a0:	df000017 	ldw	fp,0(sp)
 80420a4:	dec00204 	addi	sp,sp,8
 80420a8:	f800283a 	ret

080420ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80420ac:	defffa04 	addi	sp,sp,-24
 80420b0:	dfc00515 	stw	ra,20(sp)
 80420b4:	df000415 	stw	fp,16(sp)
 80420b8:	df000404 	addi	fp,sp,16
 80420bc:	e13ffd15 	stw	r4,-12(fp)
 80420c0:	e17ffe15 	stw	r5,-8(fp)
 80420c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80420c8:	e0bffd17 	ldw	r2,-12(fp)
 80420cc:	10800017 	ldw	r2,0(r2)
 80420d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80420d4:	e0bffc17 	ldw	r2,-16(fp)
 80420d8:	10800a04 	addi	r2,r2,40
 80420dc:	e1bfff17 	ldw	r6,-4(fp)
 80420e0:	e17ffe17 	ldw	r5,-8(fp)
 80420e4:	1009883a 	mov	r4,r2
 80420e8:	80424d40 	call	80424d4 <altera_avalon_jtag_uart_ioctl>
}
 80420ec:	e037883a 	mov	sp,fp
 80420f0:	dfc00117 	ldw	ra,4(sp)
 80420f4:	df000017 	ldw	fp,0(sp)
 80420f8:	dec00204 	addi	sp,sp,8
 80420fc:	f800283a 	ret

08042100 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8042100:	defffa04 	addi	sp,sp,-24
 8042104:	dfc00515 	stw	ra,20(sp)
 8042108:	df000415 	stw	fp,16(sp)
 804210c:	df000404 	addi	fp,sp,16
 8042110:	e13ffd15 	stw	r4,-12(fp)
 8042114:	e17ffe15 	stw	r5,-8(fp)
 8042118:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 804211c:	e0bffd17 	ldw	r2,-12(fp)
 8042120:	00c00044 	movi	r3,1
 8042124:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8042128:	e0bffd17 	ldw	r2,-12(fp)
 804212c:	10800017 	ldw	r2,0(r2)
 8042130:	10800104 	addi	r2,r2,4
 8042134:	1007883a 	mov	r3,r2
 8042138:	e0bffd17 	ldw	r2,-12(fp)
 804213c:	10800817 	ldw	r2,32(r2)
 8042140:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8042144:	e0bffe17 	ldw	r2,-8(fp)
 8042148:	e0ffff17 	ldw	r3,-4(fp)
 804214c:	d8000015 	stw	zero,0(sp)
 8042150:	e1fffd17 	ldw	r7,-12(fp)
 8042154:	01820134 	movhi	r6,2052
 8042158:	31887004 	addi	r6,r6,8640
 804215c:	180b883a 	mov	r5,r3
 8042160:	1009883a 	mov	r4,r2
 8042164:	80417840 	call	8041784 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8042168:	e0bffd17 	ldw	r2,-12(fp)
 804216c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8042170:	e0bffd17 	ldw	r2,-12(fp)
 8042174:	10800204 	addi	r2,r2,8
 8042178:	d0e6ee17 	ldw	r3,-25672(gp)
 804217c:	e1fffd17 	ldw	r7,-12(fp)
 8042180:	01820134 	movhi	r6,2052
 8042184:	3188f304 	addi	r6,r6,9164
 8042188:	180b883a 	mov	r5,r3
 804218c:	1009883a 	mov	r4,r2
 8042190:	804399c0 	call	804399c <alt_alarm_start>
 8042194:	1000040e 	bge	r2,zero,80421a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8042198:	e0fffd17 	ldw	r3,-12(fp)
 804219c:	00a00034 	movhi	r2,32768
 80421a0:	10bfffc4 	addi	r2,r2,-1
 80421a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80421a8:	0001883a 	nop
 80421ac:	e037883a 	mov	sp,fp
 80421b0:	dfc00117 	ldw	ra,4(sp)
 80421b4:	df000017 	ldw	fp,0(sp)
 80421b8:	dec00204 	addi	sp,sp,8
 80421bc:	f800283a 	ret

080421c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80421c0:	defff804 	addi	sp,sp,-32
 80421c4:	df000715 	stw	fp,28(sp)
 80421c8:	df000704 	addi	fp,sp,28
 80421cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80421d0:	e0bfff17 	ldw	r2,-4(fp)
 80421d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80421d8:	e0bffb17 	ldw	r2,-20(fp)
 80421dc:	10800017 	ldw	r2,0(r2)
 80421e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80421e4:	e0bffc17 	ldw	r2,-16(fp)
 80421e8:	10800104 	addi	r2,r2,4
 80421ec:	10800037 	ldwio	r2,0(r2)
 80421f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80421f4:	e0bffd17 	ldw	r2,-12(fp)
 80421f8:	1080c00c 	andi	r2,r2,768
 80421fc:	10006d26 	beq	r2,zero,80423b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8042200:	e0bffd17 	ldw	r2,-12(fp)
 8042204:	1080400c 	andi	r2,r2,256
 8042208:	10003526 	beq	r2,zero,80422e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 804220c:	00800074 	movhi	r2,1
 8042210:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8042214:	e0bffb17 	ldw	r2,-20(fp)
 8042218:	10800a17 	ldw	r2,40(r2)
 804221c:	10800044 	addi	r2,r2,1
 8042220:	1081ffcc 	andi	r2,r2,2047
 8042224:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8042228:	e0bffb17 	ldw	r2,-20(fp)
 804222c:	10c00b17 	ldw	r3,44(r2)
 8042230:	e0bffe17 	ldw	r2,-8(fp)
 8042234:	18801526 	beq	r3,r2,804228c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8042238:	e0bffc17 	ldw	r2,-16(fp)
 804223c:	10800037 	ldwio	r2,0(r2)
 8042240:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8042244:	e0bff917 	ldw	r2,-28(fp)
 8042248:	10a0000c 	andi	r2,r2,32768
 804224c:	10001126 	beq	r2,zero,8042294 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8042250:	e0bffb17 	ldw	r2,-20(fp)
 8042254:	10800a17 	ldw	r2,40(r2)
 8042258:	e0fff917 	ldw	r3,-28(fp)
 804225c:	1809883a 	mov	r4,r3
 8042260:	e0fffb17 	ldw	r3,-20(fp)
 8042264:	1885883a 	add	r2,r3,r2
 8042268:	10800e04 	addi	r2,r2,56
 804226c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8042270:	e0bffb17 	ldw	r2,-20(fp)
 8042274:	10800a17 	ldw	r2,40(r2)
 8042278:	10800044 	addi	r2,r2,1
 804227c:	10c1ffcc 	andi	r3,r2,2047
 8042280:	e0bffb17 	ldw	r2,-20(fp)
 8042284:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8042288:	003fe206 	br	8042214 <__alt_data_end+0xfffc2214>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 804228c:	0001883a 	nop
 8042290:	00000106 	br	8042298 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8042294:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8042298:	e0bff917 	ldw	r2,-28(fp)
 804229c:	10bfffec 	andhi	r2,r2,65535
 80422a0:	10000f26 	beq	r2,zero,80422e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80422a4:	e0bffb17 	ldw	r2,-20(fp)
 80422a8:	10c00817 	ldw	r3,32(r2)
 80422ac:	00bfff84 	movi	r2,-2
 80422b0:	1886703a 	and	r3,r3,r2
 80422b4:	e0bffb17 	ldw	r2,-20(fp)
 80422b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80422bc:	e0bffc17 	ldw	r2,-16(fp)
 80422c0:	10800104 	addi	r2,r2,4
 80422c4:	1007883a 	mov	r3,r2
 80422c8:	e0bffb17 	ldw	r2,-20(fp)
 80422cc:	10800817 	ldw	r2,32(r2)
 80422d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80422d4:	e0bffc17 	ldw	r2,-16(fp)
 80422d8:	10800104 	addi	r2,r2,4
 80422dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80422e0:	e0bffd17 	ldw	r2,-12(fp)
 80422e4:	1080800c 	andi	r2,r2,512
 80422e8:	103fbe26 	beq	r2,zero,80421e4 <__alt_data_end+0xfffc21e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80422ec:	e0bffd17 	ldw	r2,-12(fp)
 80422f0:	1004d43a 	srli	r2,r2,16
 80422f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80422f8:	00001406 	br	804234c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80422fc:	e0bffc17 	ldw	r2,-16(fp)
 8042300:	e0fffb17 	ldw	r3,-20(fp)
 8042304:	18c00d17 	ldw	r3,52(r3)
 8042308:	e13ffb17 	ldw	r4,-20(fp)
 804230c:	20c7883a 	add	r3,r4,r3
 8042310:	18c20e04 	addi	r3,r3,2104
 8042314:	18c00003 	ldbu	r3,0(r3)
 8042318:	18c03fcc 	andi	r3,r3,255
 804231c:	18c0201c 	xori	r3,r3,128
 8042320:	18ffe004 	addi	r3,r3,-128
 8042324:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8042328:	e0bffb17 	ldw	r2,-20(fp)
 804232c:	10800d17 	ldw	r2,52(r2)
 8042330:	10800044 	addi	r2,r2,1
 8042334:	10c1ffcc 	andi	r3,r2,2047
 8042338:	e0bffb17 	ldw	r2,-20(fp)
 804233c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8042340:	e0bffa17 	ldw	r2,-24(fp)
 8042344:	10bfffc4 	addi	r2,r2,-1
 8042348:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 804234c:	e0bffa17 	ldw	r2,-24(fp)
 8042350:	10000526 	beq	r2,zero,8042368 <altera_avalon_jtag_uart_irq+0x1a8>
 8042354:	e0bffb17 	ldw	r2,-20(fp)
 8042358:	10c00d17 	ldw	r3,52(r2)
 804235c:	e0bffb17 	ldw	r2,-20(fp)
 8042360:	10800c17 	ldw	r2,48(r2)
 8042364:	18bfe51e 	bne	r3,r2,80422fc <__alt_data_end+0xfffc22fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8042368:	e0bffa17 	ldw	r2,-24(fp)
 804236c:	103f9d26 	beq	r2,zero,80421e4 <__alt_data_end+0xfffc21e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8042370:	e0bffb17 	ldw	r2,-20(fp)
 8042374:	10c00817 	ldw	r3,32(r2)
 8042378:	00bfff44 	movi	r2,-3
 804237c:	1886703a 	and	r3,r3,r2
 8042380:	e0bffb17 	ldw	r2,-20(fp)
 8042384:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8042388:	e0bffb17 	ldw	r2,-20(fp)
 804238c:	10800017 	ldw	r2,0(r2)
 8042390:	10800104 	addi	r2,r2,4
 8042394:	1007883a 	mov	r3,r2
 8042398:	e0bffb17 	ldw	r2,-20(fp)
 804239c:	10800817 	ldw	r2,32(r2)
 80423a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80423a4:	e0bffc17 	ldw	r2,-16(fp)
 80423a8:	10800104 	addi	r2,r2,4
 80423ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80423b0:	003f8c06 	br	80421e4 <__alt_data_end+0xfffc21e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80423b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80423b8:	0001883a 	nop
 80423bc:	e037883a 	mov	sp,fp
 80423c0:	df000017 	ldw	fp,0(sp)
 80423c4:	dec00104 	addi	sp,sp,4
 80423c8:	f800283a 	ret

080423cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80423cc:	defff804 	addi	sp,sp,-32
 80423d0:	df000715 	stw	fp,28(sp)
 80423d4:	df000704 	addi	fp,sp,28
 80423d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80423dc:	e0bffb17 	ldw	r2,-20(fp)
 80423e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80423e4:	e0bff917 	ldw	r2,-28(fp)
 80423e8:	10800017 	ldw	r2,0(r2)
 80423ec:	10800104 	addi	r2,r2,4
 80423f0:	10800037 	ldwio	r2,0(r2)
 80423f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80423f8:	e0bffa17 	ldw	r2,-24(fp)
 80423fc:	1081000c 	andi	r2,r2,1024
 8042400:	10000b26 	beq	r2,zero,8042430 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8042404:	e0bff917 	ldw	r2,-28(fp)
 8042408:	10800017 	ldw	r2,0(r2)
 804240c:	10800104 	addi	r2,r2,4
 8042410:	1007883a 	mov	r3,r2
 8042414:	e0bff917 	ldw	r2,-28(fp)
 8042418:	10800817 	ldw	r2,32(r2)
 804241c:	10810014 	ori	r2,r2,1024
 8042420:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8042424:	e0bff917 	ldw	r2,-28(fp)
 8042428:	10000915 	stw	zero,36(r2)
 804242c:	00000a06 	br	8042458 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8042430:	e0bff917 	ldw	r2,-28(fp)
 8042434:	10c00917 	ldw	r3,36(r2)
 8042438:	00a00034 	movhi	r2,32768
 804243c:	10bfff04 	addi	r2,r2,-4
 8042440:	10c00536 	bltu	r2,r3,8042458 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8042444:	e0bff917 	ldw	r2,-28(fp)
 8042448:	10800917 	ldw	r2,36(r2)
 804244c:	10c00044 	addi	r3,r2,1
 8042450:	e0bff917 	ldw	r2,-28(fp)
 8042454:	10c00915 	stw	r3,36(r2)
 8042458:	d0a6ee17 	ldw	r2,-25672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 804245c:	e037883a 	mov	sp,fp
 8042460:	df000017 	ldw	fp,0(sp)
 8042464:	dec00104 	addi	sp,sp,4
 8042468:	f800283a 	ret

0804246c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 804246c:	defffd04 	addi	sp,sp,-12
 8042470:	df000215 	stw	fp,8(sp)
 8042474:	df000204 	addi	fp,sp,8
 8042478:	e13ffe15 	stw	r4,-8(fp)
 804247c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8042480:	00000506 	br	8042498 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8042484:	e0bfff17 	ldw	r2,-4(fp)
 8042488:	1090000c 	andi	r2,r2,16384
 804248c:	10000226 	beq	r2,zero,8042498 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8042490:	00bffd44 	movi	r2,-11
 8042494:	00000b06 	br	80424c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8042498:	e0bffe17 	ldw	r2,-8(fp)
 804249c:	10c00d17 	ldw	r3,52(r2)
 80424a0:	e0bffe17 	ldw	r2,-8(fp)
 80424a4:	10800c17 	ldw	r2,48(r2)
 80424a8:	18800526 	beq	r3,r2,80424c0 <altera_avalon_jtag_uart_close+0x54>
 80424ac:	e0bffe17 	ldw	r2,-8(fp)
 80424b0:	10c00917 	ldw	r3,36(r2)
 80424b4:	e0bffe17 	ldw	r2,-8(fp)
 80424b8:	10800117 	ldw	r2,4(r2)
 80424bc:	18bff136 	bltu	r3,r2,8042484 <__alt_data_end+0xfffc2484>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80424c0:	0005883a 	mov	r2,zero
}
 80424c4:	e037883a 	mov	sp,fp
 80424c8:	df000017 	ldw	fp,0(sp)
 80424cc:	dec00104 	addi	sp,sp,4
 80424d0:	f800283a 	ret

080424d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80424d4:	defffa04 	addi	sp,sp,-24
 80424d8:	df000515 	stw	fp,20(sp)
 80424dc:	df000504 	addi	fp,sp,20
 80424e0:	e13ffd15 	stw	r4,-12(fp)
 80424e4:	e17ffe15 	stw	r5,-8(fp)
 80424e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80424ec:	00bff9c4 	movi	r2,-25
 80424f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80424f4:	e0bffe17 	ldw	r2,-8(fp)
 80424f8:	10da8060 	cmpeqi	r3,r2,27137
 80424fc:	1800031e 	bne	r3,zero,804250c <altera_avalon_jtag_uart_ioctl+0x38>
 8042500:	109a80a0 	cmpeqi	r2,r2,27138
 8042504:	1000181e 	bne	r2,zero,8042568 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8042508:	00002906 	br	80425b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 804250c:	e0bffd17 	ldw	r2,-12(fp)
 8042510:	10c00117 	ldw	r3,4(r2)
 8042514:	00a00034 	movhi	r2,32768
 8042518:	10bfffc4 	addi	r2,r2,-1
 804251c:	18802126 	beq	r3,r2,80425a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8042520:	e0bfff17 	ldw	r2,-4(fp)
 8042524:	10800017 	ldw	r2,0(r2)
 8042528:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 804252c:	e0bffc17 	ldw	r2,-16(fp)
 8042530:	10800090 	cmplti	r2,r2,2
 8042534:	1000061e 	bne	r2,zero,8042550 <altera_avalon_jtag_uart_ioctl+0x7c>
 8042538:	e0fffc17 	ldw	r3,-16(fp)
 804253c:	00a00034 	movhi	r2,32768
 8042540:	10bfffc4 	addi	r2,r2,-1
 8042544:	18800226 	beq	r3,r2,8042550 <altera_avalon_jtag_uart_ioctl+0x7c>
 8042548:	e0bffc17 	ldw	r2,-16(fp)
 804254c:	00000206 	br	8042558 <altera_avalon_jtag_uart_ioctl+0x84>
 8042550:	00a00034 	movhi	r2,32768
 8042554:	10bfff84 	addi	r2,r2,-2
 8042558:	e0fffd17 	ldw	r3,-12(fp)
 804255c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8042560:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8042564:	00000f06 	br	80425a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8042568:	e0bffd17 	ldw	r2,-12(fp)
 804256c:	10c00117 	ldw	r3,4(r2)
 8042570:	00a00034 	movhi	r2,32768
 8042574:	10bfffc4 	addi	r2,r2,-1
 8042578:	18800c26 	beq	r3,r2,80425ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 804257c:	e0bffd17 	ldw	r2,-12(fp)
 8042580:	10c00917 	ldw	r3,36(r2)
 8042584:	e0bffd17 	ldw	r2,-12(fp)
 8042588:	10800117 	ldw	r2,4(r2)
 804258c:	1885803a 	cmpltu	r2,r3,r2
 8042590:	10c03fcc 	andi	r3,r2,255
 8042594:	e0bfff17 	ldw	r2,-4(fp)
 8042598:	10c00015 	stw	r3,0(r2)
      rc = 0;
 804259c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80425a0:	00000206 	br	80425ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80425a4:	0001883a 	nop
 80425a8:	00000106 	br	80425b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80425ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80425b0:	e0bffb17 	ldw	r2,-20(fp)
}
 80425b4:	e037883a 	mov	sp,fp
 80425b8:	df000017 	ldw	fp,0(sp)
 80425bc:	dec00104 	addi	sp,sp,4
 80425c0:	f800283a 	ret

080425c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80425c4:	defff304 	addi	sp,sp,-52
 80425c8:	dfc00c15 	stw	ra,48(sp)
 80425cc:	df000b15 	stw	fp,44(sp)
 80425d0:	df000b04 	addi	fp,sp,44
 80425d4:	e13ffc15 	stw	r4,-16(fp)
 80425d8:	e17ffd15 	stw	r5,-12(fp)
 80425dc:	e1bffe15 	stw	r6,-8(fp)
 80425e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80425e4:	e0bffd17 	ldw	r2,-12(fp)
 80425e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80425ec:	00004706 	br	804270c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80425f0:	e0bffc17 	ldw	r2,-16(fp)
 80425f4:	10800a17 	ldw	r2,40(r2)
 80425f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80425fc:	e0bffc17 	ldw	r2,-16(fp)
 8042600:	10800b17 	ldw	r2,44(r2)
 8042604:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8042608:	e0fff717 	ldw	r3,-36(fp)
 804260c:	e0bff817 	ldw	r2,-32(fp)
 8042610:	18800536 	bltu	r3,r2,8042628 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8042614:	e0fff717 	ldw	r3,-36(fp)
 8042618:	e0bff817 	ldw	r2,-32(fp)
 804261c:	1885c83a 	sub	r2,r3,r2
 8042620:	e0bff615 	stw	r2,-40(fp)
 8042624:	00000406 	br	8042638 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8042628:	00c20004 	movi	r3,2048
 804262c:	e0bff817 	ldw	r2,-32(fp)
 8042630:	1885c83a 	sub	r2,r3,r2
 8042634:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8042638:	e0bff617 	ldw	r2,-40(fp)
 804263c:	10001e26 	beq	r2,zero,80426b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8042640:	e0fffe17 	ldw	r3,-8(fp)
 8042644:	e0bff617 	ldw	r2,-40(fp)
 8042648:	1880022e 	bgeu	r3,r2,8042654 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 804264c:	e0bffe17 	ldw	r2,-8(fp)
 8042650:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8042654:	e0bffc17 	ldw	r2,-16(fp)
 8042658:	10c00e04 	addi	r3,r2,56
 804265c:	e0bff817 	ldw	r2,-32(fp)
 8042660:	1885883a 	add	r2,r3,r2
 8042664:	e1bff617 	ldw	r6,-40(fp)
 8042668:	100b883a 	mov	r5,r2
 804266c:	e13ff517 	ldw	r4,-44(fp)
 8042670:	804480c0 	call	804480c <memcpy>
      ptr   += n;
 8042674:	e0fff517 	ldw	r3,-44(fp)
 8042678:	e0bff617 	ldw	r2,-40(fp)
 804267c:	1885883a 	add	r2,r3,r2
 8042680:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8042684:	e0fffe17 	ldw	r3,-8(fp)
 8042688:	e0bff617 	ldw	r2,-40(fp)
 804268c:	1885c83a 	sub	r2,r3,r2
 8042690:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8042694:	e0fff817 	ldw	r3,-32(fp)
 8042698:	e0bff617 	ldw	r2,-40(fp)
 804269c:	1885883a 	add	r2,r3,r2
 80426a0:	10c1ffcc 	andi	r3,r2,2047
 80426a4:	e0bffc17 	ldw	r2,-16(fp)
 80426a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80426ac:	e0bffe17 	ldw	r2,-8(fp)
 80426b0:	00bfcf16 	blt	zero,r2,80425f0 <__alt_data_end+0xfffc25f0>
 80426b4:	00000106 	br	80426bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80426b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80426bc:	e0fff517 	ldw	r3,-44(fp)
 80426c0:	e0bffd17 	ldw	r2,-12(fp)
 80426c4:	1880141e 	bne	r3,r2,8042718 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80426c8:	e0bfff17 	ldw	r2,-4(fp)
 80426cc:	1090000c 	andi	r2,r2,16384
 80426d0:	1000131e 	bne	r2,zero,8042720 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80426d4:	0001883a 	nop
 80426d8:	e0bffc17 	ldw	r2,-16(fp)
 80426dc:	10c00a17 	ldw	r3,40(r2)
 80426e0:	e0bff717 	ldw	r2,-36(fp)
 80426e4:	1880051e 	bne	r3,r2,80426fc <altera_avalon_jtag_uart_read+0x138>
 80426e8:	e0bffc17 	ldw	r2,-16(fp)
 80426ec:	10c00917 	ldw	r3,36(r2)
 80426f0:	e0bffc17 	ldw	r2,-16(fp)
 80426f4:	10800117 	ldw	r2,4(r2)
 80426f8:	18bff736 	bltu	r3,r2,80426d8 <__alt_data_end+0xfffc26d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80426fc:	e0bffc17 	ldw	r2,-16(fp)
 8042700:	10c00a17 	ldw	r3,40(r2)
 8042704:	e0bff717 	ldw	r2,-36(fp)
 8042708:	18800726 	beq	r3,r2,8042728 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 804270c:	e0bffe17 	ldw	r2,-8(fp)
 8042710:	00bfb716 	blt	zero,r2,80425f0 <__alt_data_end+0xfffc25f0>
 8042714:	00000506 	br	804272c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8042718:	0001883a 	nop
 804271c:	00000306 	br	804272c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8042720:	0001883a 	nop
 8042724:	00000106 	br	804272c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8042728:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 804272c:	e0fff517 	ldw	r3,-44(fp)
 8042730:	e0bffd17 	ldw	r2,-12(fp)
 8042734:	18801826 	beq	r3,r2,8042798 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8042738:	0005303a 	rdctl	r2,status
 804273c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8042740:	e0fffb17 	ldw	r3,-20(fp)
 8042744:	00bfff84 	movi	r2,-2
 8042748:	1884703a 	and	r2,r3,r2
 804274c:	1001703a 	wrctl	status,r2
  
  return context;
 8042750:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8042754:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8042758:	e0bffc17 	ldw	r2,-16(fp)
 804275c:	10800817 	ldw	r2,32(r2)
 8042760:	10c00054 	ori	r3,r2,1
 8042764:	e0bffc17 	ldw	r2,-16(fp)
 8042768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 804276c:	e0bffc17 	ldw	r2,-16(fp)
 8042770:	10800017 	ldw	r2,0(r2)
 8042774:	10800104 	addi	r2,r2,4
 8042778:	1007883a 	mov	r3,r2
 804277c:	e0bffc17 	ldw	r2,-16(fp)
 8042780:	10800817 	ldw	r2,32(r2)
 8042784:	18800035 	stwio	r2,0(r3)
 8042788:	e0bffa17 	ldw	r2,-24(fp)
 804278c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8042790:	e0bff917 	ldw	r2,-28(fp)
 8042794:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8042798:	e0fff517 	ldw	r3,-44(fp)
 804279c:	e0bffd17 	ldw	r2,-12(fp)
 80427a0:	18800426 	beq	r3,r2,80427b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80427a4:	e0fff517 	ldw	r3,-44(fp)
 80427a8:	e0bffd17 	ldw	r2,-12(fp)
 80427ac:	1885c83a 	sub	r2,r3,r2
 80427b0:	00000606 	br	80427cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80427b4:	e0bfff17 	ldw	r2,-4(fp)
 80427b8:	1090000c 	andi	r2,r2,16384
 80427bc:	10000226 	beq	r2,zero,80427c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80427c0:	00bffd44 	movi	r2,-11
 80427c4:	00000106 	br	80427cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80427c8:	00bffec4 	movi	r2,-5
}
 80427cc:	e037883a 	mov	sp,fp
 80427d0:	dfc00117 	ldw	ra,4(sp)
 80427d4:	df000017 	ldw	fp,0(sp)
 80427d8:	dec00204 	addi	sp,sp,8
 80427dc:	f800283a 	ret

080427e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80427e0:	defff304 	addi	sp,sp,-52
 80427e4:	dfc00c15 	stw	ra,48(sp)
 80427e8:	df000b15 	stw	fp,44(sp)
 80427ec:	df000b04 	addi	fp,sp,44
 80427f0:	e13ffc15 	stw	r4,-16(fp)
 80427f4:	e17ffd15 	stw	r5,-12(fp)
 80427f8:	e1bffe15 	stw	r6,-8(fp)
 80427fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8042800:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8042804:	e0bffd17 	ldw	r2,-12(fp)
 8042808:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 804280c:	00003706 	br	80428ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8042810:	e0bffc17 	ldw	r2,-16(fp)
 8042814:	10800c17 	ldw	r2,48(r2)
 8042818:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 804281c:	e0bffc17 	ldw	r2,-16(fp)
 8042820:	10800d17 	ldw	r2,52(r2)
 8042824:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8042828:	e0fff917 	ldw	r3,-28(fp)
 804282c:	e0bff517 	ldw	r2,-44(fp)
 8042830:	1880062e 	bgeu	r3,r2,804284c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8042834:	e0fff517 	ldw	r3,-44(fp)
 8042838:	e0bff917 	ldw	r2,-28(fp)
 804283c:	1885c83a 	sub	r2,r3,r2
 8042840:	10bfffc4 	addi	r2,r2,-1
 8042844:	e0bff615 	stw	r2,-40(fp)
 8042848:	00000b06 	br	8042878 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 804284c:	e0bff517 	ldw	r2,-44(fp)
 8042850:	10000526 	beq	r2,zero,8042868 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8042854:	00c20004 	movi	r3,2048
 8042858:	e0bff917 	ldw	r2,-28(fp)
 804285c:	1885c83a 	sub	r2,r3,r2
 8042860:	e0bff615 	stw	r2,-40(fp)
 8042864:	00000406 	br	8042878 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8042868:	00c1ffc4 	movi	r3,2047
 804286c:	e0bff917 	ldw	r2,-28(fp)
 8042870:	1885c83a 	sub	r2,r3,r2
 8042874:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8042878:	e0bff617 	ldw	r2,-40(fp)
 804287c:	10001e26 	beq	r2,zero,80428f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8042880:	e0fffe17 	ldw	r3,-8(fp)
 8042884:	e0bff617 	ldw	r2,-40(fp)
 8042888:	1880022e 	bgeu	r3,r2,8042894 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 804288c:	e0bffe17 	ldw	r2,-8(fp)
 8042890:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8042894:	e0bffc17 	ldw	r2,-16(fp)
 8042898:	10c20e04 	addi	r3,r2,2104
 804289c:	e0bff917 	ldw	r2,-28(fp)
 80428a0:	1885883a 	add	r2,r3,r2
 80428a4:	e1bff617 	ldw	r6,-40(fp)
 80428a8:	e17ffd17 	ldw	r5,-12(fp)
 80428ac:	1009883a 	mov	r4,r2
 80428b0:	804480c0 	call	804480c <memcpy>
      ptr   += n;
 80428b4:	e0fffd17 	ldw	r3,-12(fp)
 80428b8:	e0bff617 	ldw	r2,-40(fp)
 80428bc:	1885883a 	add	r2,r3,r2
 80428c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80428c4:	e0fffe17 	ldw	r3,-8(fp)
 80428c8:	e0bff617 	ldw	r2,-40(fp)
 80428cc:	1885c83a 	sub	r2,r3,r2
 80428d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80428d4:	e0fff917 	ldw	r3,-28(fp)
 80428d8:	e0bff617 	ldw	r2,-40(fp)
 80428dc:	1885883a 	add	r2,r3,r2
 80428e0:	10c1ffcc 	andi	r3,r2,2047
 80428e4:	e0bffc17 	ldw	r2,-16(fp)
 80428e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80428ec:	e0bffe17 	ldw	r2,-8(fp)
 80428f0:	00bfc716 	blt	zero,r2,8042810 <__alt_data_end+0xfffc2810>
 80428f4:	00000106 	br	80428fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80428f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80428fc:	0005303a 	rdctl	r2,status
 8042900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8042904:	e0fffb17 	ldw	r3,-20(fp)
 8042908:	00bfff84 	movi	r2,-2
 804290c:	1884703a 	and	r2,r3,r2
 8042910:	1001703a 	wrctl	status,r2
  
  return context;
 8042914:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8042918:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 804291c:	e0bffc17 	ldw	r2,-16(fp)
 8042920:	10800817 	ldw	r2,32(r2)
 8042924:	10c00094 	ori	r3,r2,2
 8042928:	e0bffc17 	ldw	r2,-16(fp)
 804292c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8042930:	e0bffc17 	ldw	r2,-16(fp)
 8042934:	10800017 	ldw	r2,0(r2)
 8042938:	10800104 	addi	r2,r2,4
 804293c:	1007883a 	mov	r3,r2
 8042940:	e0bffc17 	ldw	r2,-16(fp)
 8042944:	10800817 	ldw	r2,32(r2)
 8042948:	18800035 	stwio	r2,0(r3)
 804294c:	e0bffa17 	ldw	r2,-24(fp)
 8042950:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8042954:	e0bff817 	ldw	r2,-32(fp)
 8042958:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 804295c:	e0bffe17 	ldw	r2,-8(fp)
 8042960:	0080100e 	bge	zero,r2,80429a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8042964:	e0bfff17 	ldw	r2,-4(fp)
 8042968:	1090000c 	andi	r2,r2,16384
 804296c:	1000101e 	bne	r2,zero,80429b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8042970:	0001883a 	nop
 8042974:	e0bffc17 	ldw	r2,-16(fp)
 8042978:	10c00d17 	ldw	r3,52(r2)
 804297c:	e0bff517 	ldw	r2,-44(fp)
 8042980:	1880051e 	bne	r3,r2,8042998 <altera_avalon_jtag_uart_write+0x1b8>
 8042984:	e0bffc17 	ldw	r2,-16(fp)
 8042988:	10c00917 	ldw	r3,36(r2)
 804298c:	e0bffc17 	ldw	r2,-16(fp)
 8042990:	10800117 	ldw	r2,4(r2)
 8042994:	18bff736 	bltu	r3,r2,8042974 <__alt_data_end+0xfffc2974>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8042998:	e0bffc17 	ldw	r2,-16(fp)
 804299c:	10800917 	ldw	r2,36(r2)
 80429a0:	1000051e 	bne	r2,zero,80429b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80429a4:	e0bffe17 	ldw	r2,-8(fp)
 80429a8:	00bfd016 	blt	zero,r2,80428ec <__alt_data_end+0xfffc28ec>
 80429ac:	00000306 	br	80429bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80429b0:	0001883a 	nop
 80429b4:	00000106 	br	80429bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80429b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80429bc:	e0fffd17 	ldw	r3,-12(fp)
 80429c0:	e0bff717 	ldw	r2,-36(fp)
 80429c4:	18800426 	beq	r3,r2,80429d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80429c8:	e0fffd17 	ldw	r3,-12(fp)
 80429cc:	e0bff717 	ldw	r2,-36(fp)
 80429d0:	1885c83a 	sub	r2,r3,r2
 80429d4:	00000606 	br	80429f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80429d8:	e0bfff17 	ldw	r2,-4(fp)
 80429dc:	1090000c 	andi	r2,r2,16384
 80429e0:	10000226 	beq	r2,zero,80429ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80429e4:	00bffd44 	movi	r2,-11
 80429e8:	00000106 	br	80429f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80429ec:	00bffec4 	movi	r2,-5
}
 80429f0:	e037883a 	mov	sp,fp
 80429f4:	dfc00117 	ldw	ra,4(sp)
 80429f8:	df000017 	ldw	fp,0(sp)
 80429fc:	dec00204 	addi	sp,sp,8
 8042a00:	f800283a 	ret

08042a04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8042a04:	defffa04 	addi	sp,sp,-24
 8042a08:	dfc00515 	stw	ra,20(sp)
 8042a0c:	df000415 	stw	fp,16(sp)
 8042a10:	df000404 	addi	fp,sp,16
 8042a14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8042a18:	0007883a 	mov	r3,zero
 8042a1c:	e0bfff17 	ldw	r2,-4(fp)
 8042a20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8042a24:	e0bfff17 	ldw	r2,-4(fp)
 8042a28:	10800104 	addi	r2,r2,4
 8042a2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8042a30:	0005303a 	rdctl	r2,status
 8042a34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8042a38:	e0fffd17 	ldw	r3,-12(fp)
 8042a3c:	00bfff84 	movi	r2,-2
 8042a40:	1884703a 	and	r2,r3,r2
 8042a44:	1001703a 	wrctl	status,r2
  
  return context;
 8042a48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8042a4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8042a50:	80443dc0 	call	80443dc <alt_tick>
 8042a54:	e0bffc17 	ldw	r2,-16(fp)
 8042a58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8042a5c:	e0bffe17 	ldw	r2,-8(fp)
 8042a60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8042a64:	0001883a 	nop
 8042a68:	e037883a 	mov	sp,fp
 8042a6c:	dfc00117 	ldw	ra,4(sp)
 8042a70:	df000017 	ldw	fp,0(sp)
 8042a74:	dec00204 	addi	sp,sp,8
 8042a78:	f800283a 	ret

08042a7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8042a7c:	defff804 	addi	sp,sp,-32
 8042a80:	dfc00715 	stw	ra,28(sp)
 8042a84:	df000615 	stw	fp,24(sp)
 8042a88:	df000604 	addi	fp,sp,24
 8042a8c:	e13ffc15 	stw	r4,-16(fp)
 8042a90:	e17ffd15 	stw	r5,-12(fp)
 8042a94:	e1bffe15 	stw	r6,-8(fp)
 8042a98:	e1ffff15 	stw	r7,-4(fp)
 8042a9c:	e0bfff17 	ldw	r2,-4(fp)
 8042aa0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8042aa4:	d0a6ee17 	ldw	r2,-25672(gp)
 8042aa8:	1000021e 	bne	r2,zero,8042ab4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8042aac:	e0bffb17 	ldw	r2,-20(fp)
 8042ab0:	d0a6ee15 	stw	r2,-25672(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8042ab4:	e0bffc17 	ldw	r2,-16(fp)
 8042ab8:	10800104 	addi	r2,r2,4
 8042abc:	00c001c4 	movi	r3,7
 8042ac0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8042ac4:	d8000015 	stw	zero,0(sp)
 8042ac8:	e1fffc17 	ldw	r7,-16(fp)
 8042acc:	01820134 	movhi	r6,2052
 8042ad0:	318a8104 	addi	r6,r6,10756
 8042ad4:	e17ffe17 	ldw	r5,-8(fp)
 8042ad8:	e13ffd17 	ldw	r4,-12(fp)
 8042adc:	80417840 	call	8041784 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8042ae0:	0001883a 	nop
 8042ae4:	e037883a 	mov	sp,fp
 8042ae8:	dfc00117 	ldw	ra,4(sp)
 8042aec:	df000017 	ldw	fp,0(sp)
 8042af0:	dec00204 	addi	sp,sp,8
 8042af4:	f800283a 	ret

08042af8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 8042af8:	defffc04 	addi	sp,sp,-16
 8042afc:	dfc00315 	stw	ra,12(sp)
 8042b00:	df000215 	stw	fp,8(sp)
 8042b04:	df000204 	addi	fp,sp,8
 8042b08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 8042b0c:	d1600d04 	addi	r5,gp,-32716
 8042b10:	e13fff17 	ldw	r4,-4(fp)
 8042b14:	8043de80 	call	8043de8 <alt_find_dev>
 8042b18:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 8042b1c:	e0bffe17 	ldw	r2,-8(fp)
}
 8042b20:	e037883a 	mov	sp,fp
 8042b24:	dfc00117 	ldw	ra,4(sp)
 8042b28:	df000017 	ldw	fp,0(sp)
 8042b2c:	dec00204 	addi	sp,sp,8
 8042b30:	f800283a 	ret

08042b34 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 8042b34:	defffd04 	addi	sp,sp,-12
 8042b38:	df000215 	stw	fp,8(sp)
 8042b3c:	df000204 	addi	fp,sp,8
 8042b40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042b44:	e0bfff17 	ldw	r2,-4(fp)
 8042b48:	10800a17 	ldw	r2,40(r2)
 8042b4c:	10800037 	ldwio	r2,0(r2)
 8042b50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 8042b54:	e0bffe17 	ldw	r2,-8(fp)
 8042b58:	10800054 	ori	r2,r2,1
 8042b5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042b60:	e0bfff17 	ldw	r2,-4(fp)
 8042b64:	10800a17 	ldw	r2,40(r2)
 8042b68:	1007883a 	mov	r3,r2
 8042b6c:	e0bffe17 	ldw	r2,-8(fp)
 8042b70:	18800035 	stwio	r2,0(r3)
}
 8042b74:	0001883a 	nop
 8042b78:	e037883a 	mov	sp,fp
 8042b7c:	df000017 	ldw	fp,0(sp)
 8042b80:	dec00104 	addi	sp,sp,4
 8042b84:	f800283a 	ret

08042b88 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 8042b88:	defffd04 	addi	sp,sp,-12
 8042b8c:	df000215 	stw	fp,8(sp)
 8042b90:	df000204 	addi	fp,sp,8
 8042b94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042b98:	e0bfff17 	ldw	r2,-4(fp)
 8042b9c:	10800a17 	ldw	r2,40(r2)
 8042ba0:	10800037 	ldwio	r2,0(r2)
 8042ba4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 8042ba8:	e0fffe17 	ldw	r3,-8(fp)
 8042bac:	00bfff84 	movi	r2,-2
 8042bb0:	1884703a 	and	r2,r3,r2
 8042bb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042bb8:	e0bfff17 	ldw	r2,-4(fp)
 8042bbc:	10800a17 	ldw	r2,40(r2)
 8042bc0:	1007883a 	mov	r3,r2
 8042bc4:	e0bffe17 	ldw	r2,-8(fp)
 8042bc8:	18800035 	stwio	r2,0(r3)
}
 8042bcc:	0001883a 	nop
 8042bd0:	e037883a 	mov	sp,fp
 8042bd4:	df000017 	ldw	fp,0(sp)
 8042bd8:	dec00104 	addi	sp,sp,4
 8042bdc:	f800283a 	ret

08042be0 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 8042be0:	defffd04 	addi	sp,sp,-12
 8042be4:	df000215 	stw	fp,8(sp)
 8042be8:	df000204 	addi	fp,sp,8
 8042bec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042bf0:	e0bfff17 	ldw	r2,-4(fp)
 8042bf4:	10800a17 	ldw	r2,40(r2)
 8042bf8:	10800037 	ldwio	r2,0(r2)
 8042bfc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 8042c00:	e0bffe17 	ldw	r2,-8(fp)
 8042c04:	10800094 	ori	r2,r2,2
 8042c08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042c0c:	e0bfff17 	ldw	r2,-4(fp)
 8042c10:	10800a17 	ldw	r2,40(r2)
 8042c14:	1007883a 	mov	r3,r2
 8042c18:	e0bffe17 	ldw	r2,-8(fp)
 8042c1c:	18800035 	stwio	r2,0(r3)
}
 8042c20:	0001883a 	nop
 8042c24:	e037883a 	mov	sp,fp
 8042c28:	df000017 	ldw	fp,0(sp)
 8042c2c:	dec00104 	addi	sp,sp,4
 8042c30:	f800283a 	ret

08042c34 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 8042c34:	defffd04 	addi	sp,sp,-12
 8042c38:	df000215 	stw	fp,8(sp)
 8042c3c:	df000204 	addi	fp,sp,8
 8042c40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042c44:	e0bfff17 	ldw	r2,-4(fp)
 8042c48:	10800a17 	ldw	r2,40(r2)
 8042c4c:	10800037 	ldwio	r2,0(r2)
 8042c50:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 8042c54:	e0fffe17 	ldw	r3,-8(fp)
 8042c58:	00bfff44 	movi	r2,-3
 8042c5c:	1884703a 	and	r2,r3,r2
 8042c60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042c64:	e0bfff17 	ldw	r2,-4(fp)
 8042c68:	10800a17 	ldw	r2,40(r2)
 8042c6c:	1007883a 	mov	r3,r2
 8042c70:	e0bffe17 	ldw	r2,-8(fp)
 8042c74:	18800035 	stwio	r2,0(r3)
}
 8042c78:	0001883a 	nop
 8042c7c:	e037883a 	mov	sp,fp
 8042c80:	df000017 	ldw	fp,0(sp)
 8042c84:	dec00104 	addi	sp,sp,4
 8042c88:	f800283a 	ret

08042c8c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 8042c8c:	defffd04 	addi	sp,sp,-12
 8042c90:	df000215 	stw	fp,8(sp)
 8042c94:	df000204 	addi	fp,sp,8
 8042c98:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042c9c:	e0bfff17 	ldw	r2,-4(fp)
 8042ca0:	10800a17 	ldw	r2,40(r2)
 8042ca4:	10800037 	ldwio	r2,0(r2)
 8042ca8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 8042cac:	e0bffe17 	ldw	r2,-8(fp)
 8042cb0:	1080400c 	andi	r2,r2,256
 8042cb4:	1004c03a 	cmpne	r2,r2,zero
 8042cb8:	10803fcc 	andi	r2,r2,255
}
 8042cbc:	e037883a 	mov	sp,fp
 8042cc0:	df000017 	ldw	fp,0(sp)
 8042cc4:	dec00104 	addi	sp,sp,4
 8042cc8:	f800283a 	ret

08042ccc <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 8042ccc:	defffd04 	addi	sp,sp,-12
 8042cd0:	df000215 	stw	fp,8(sp)
 8042cd4:	df000204 	addi	fp,sp,8
 8042cd8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042cdc:	e0bfff17 	ldw	r2,-4(fp)
 8042ce0:	10800a17 	ldw	r2,40(r2)
 8042ce4:	10800037 	ldwio	r2,0(r2)
 8042ce8:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 8042cec:	e0bffe17 	ldw	r2,-8(fp)
 8042cf0:	1080800c 	andi	r2,r2,512
 8042cf4:	1004c03a 	cmpne	r2,r2,zero
 8042cf8:	10803fcc 	andi	r2,r2,255
}
 8042cfc:	e037883a 	mov	sp,fp
 8042d00:	df000017 	ldw	fp,0(sp)
 8042d04:	dec00104 	addi	sp,sp,4
 8042d08:	f800283a 	ret

08042d0c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 8042d0c:	defffd04 	addi	sp,sp,-12
 8042d10:	df000215 	stw	fp,8(sp)
 8042d14:	df000204 	addi	fp,sp,8
 8042d18:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8042d1c:	e0bfff17 	ldw	r2,-4(fp)
 8042d20:	10800a17 	ldw	r2,40(r2)
 8042d24:	10800037 	ldwio	r2,0(r2)
 8042d28:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 8042d2c:	e0bffe17 	ldw	r2,-8(fp)
 8042d30:	10800114 	ori	r2,r2,4
 8042d34:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 8042d38:	e0bffe17 	ldw	r2,-8(fp)
 8042d3c:	10800214 	ori	r2,r2,8
 8042d40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042d44:	e0bfff17 	ldw	r2,-4(fp)
 8042d48:	10800a17 	ldw	r2,40(r2)
 8042d4c:	1007883a 	mov	r3,r2
 8042d50:	e0bffe17 	ldw	r2,-8(fp)
 8042d54:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 8042d58:	e0fffe17 	ldw	r3,-8(fp)
 8042d5c:	00bffec4 	movi	r2,-5
 8042d60:	1884703a 	and	r2,r3,r2
 8042d64:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 8042d68:	e0fffe17 	ldw	r3,-8(fp)
 8042d6c:	00bffdc4 	movi	r2,-9
 8042d70:	1884703a 	and	r2,r3,r2
 8042d74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8042d78:	e0bfff17 	ldw	r2,-4(fp)
 8042d7c:	10800a17 	ldw	r2,40(r2)
 8042d80:	1007883a 	mov	r3,r2
 8042d84:	e0bffe17 	ldw	r2,-8(fp)
 8042d88:	18800035 	stwio	r2,0(r3)
}
 8042d8c:	0001883a 	nop
 8042d90:	e037883a 	mov	sp,fp
 8042d94:	df000017 	ldw	fp,0(sp)
 8042d98:	dec00104 	addi	sp,sp,4
 8042d9c:	f800283a 	ret

08042da0 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 8042da0:	defffc04 	addi	sp,sp,-16
 8042da4:	df000315 	stw	fp,12(sp)
 8042da8:	df000304 	addi	fp,sp,12
 8042dac:	e13ffe15 	stw	r4,-8(fp)
 8042db0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8042db4:	e0bffe17 	ldw	r2,-8(fp)
 8042db8:	10800a17 	ldw	r2,40(r2)
 8042dbc:	10800104 	addi	r2,r2,4
 8042dc0:	10800037 	ldwio	r2,0(r2)
 8042dc4:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 8042dc8:	e0bfff17 	ldw	r2,-4(fp)
 8042dcc:	1000041e 	bne	r2,zero,8042de0 <alt_up_audio_read_fifo_avail+0x40>
 8042dd0:	e0bffd17 	ldw	r2,-12(fp)
 8042dd4:	10bfc00c 	andi	r2,r2,65280
 8042dd8:	1004d23a 	srli	r2,r2,8
 8042ddc:	00000206 	br	8042de8 <alt_up_audio_read_fifo_avail+0x48>
 8042de0:	e0bffd17 	ldw	r2,-12(fp)
 8042de4:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8042de8:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 8042dec:	e0bffd17 	ldw	r2,-12(fp)
}
 8042df0:	e037883a 	mov	sp,fp
 8042df4:	df000017 	ldw	fp,0(sp)
 8042df8:	dec00104 	addi	sp,sp,4
 8042dfc:	f800283a 	ret

08042e00 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8042e00:	defffa04 	addi	sp,sp,-24
 8042e04:	dfc00515 	stw	ra,20(sp)
 8042e08:	df000415 	stw	fp,16(sp)
 8042e0c:	df000404 	addi	fp,sp,16
 8042e10:	e13ffd15 	stw	r4,-12(fp)
 8042e14:	e17ffe15 	stw	r5,-8(fp)
 8042e18:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 8042e1c:	01400044 	movi	r5,1
 8042e20:	e13ffd17 	ldw	r4,-12(fp)
 8042e24:	8042da00 	call	8042da0 <alt_up_audio_read_fifo_avail>
 8042e28:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 8042e2c:	e0bffc17 	ldw	r2,-16(fp)
 8042e30:	10801868 	cmpgeui	r2,r2,97
 8042e34:	1000021e 	bne	r2,zero,8042e40 <alt_up_audio_record_r+0x40>
		return 0;
 8042e38:	0005883a 	mov	r2,zero
 8042e3c:	00000506 	br	8042e54 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 8042e40:	01c00044 	movi	r7,1
 8042e44:	e1bfff17 	ldw	r6,-4(fp)
 8042e48:	e17ffe17 	ldw	r5,-8(fp)
 8042e4c:	e13ffd17 	ldw	r4,-12(fp)
 8042e50:	80430000 	call	8043000 <alt_up_audio_read_fifo>
}
 8042e54:	e037883a 	mov	sp,fp
 8042e58:	dfc00117 	ldw	ra,4(sp)
 8042e5c:	df000017 	ldw	fp,0(sp)
 8042e60:	dec00204 	addi	sp,sp,8
 8042e64:	f800283a 	ret

08042e68 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8042e68:	defffa04 	addi	sp,sp,-24
 8042e6c:	dfc00515 	stw	ra,20(sp)
 8042e70:	df000415 	stw	fp,16(sp)
 8042e74:	df000404 	addi	fp,sp,16
 8042e78:	e13ffd15 	stw	r4,-12(fp)
 8042e7c:	e17ffe15 	stw	r5,-8(fp)
 8042e80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 8042e84:	000b883a 	mov	r5,zero
 8042e88:	e13ffd17 	ldw	r4,-12(fp)
 8042e8c:	8042da00 	call	8042da0 <alt_up_audio_read_fifo_avail>
 8042e90:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 8042e94:	e0bffc17 	ldw	r2,-16(fp)
 8042e98:	10801868 	cmpgeui	r2,r2,97
 8042e9c:	1000021e 	bne	r2,zero,8042ea8 <alt_up_audio_record_l+0x40>
		return 0;
 8042ea0:	0005883a 	mov	r2,zero
 8042ea4:	00000506 	br	8042ebc <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 8042ea8:	000f883a 	mov	r7,zero
 8042eac:	e1bfff17 	ldw	r6,-4(fp)
 8042eb0:	e17ffe17 	ldw	r5,-8(fp)
 8042eb4:	e13ffd17 	ldw	r4,-12(fp)
 8042eb8:	80430000 	call	8043000 <alt_up_audio_read_fifo>
}
 8042ebc:	e037883a 	mov	sp,fp
 8042ec0:	dfc00117 	ldw	ra,4(sp)
 8042ec4:	df000017 	ldw	fp,0(sp)
 8042ec8:	dec00204 	addi	sp,sp,8
 8042ecc:	f800283a 	ret

08042ed0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 8042ed0:	defffc04 	addi	sp,sp,-16
 8042ed4:	df000315 	stw	fp,12(sp)
 8042ed8:	df000304 	addi	fp,sp,12
 8042edc:	e13ffe15 	stw	r4,-8(fp)
 8042ee0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8042ee4:	e0bffe17 	ldw	r2,-8(fp)
 8042ee8:	10800a17 	ldw	r2,40(r2)
 8042eec:	10800104 	addi	r2,r2,4
 8042ef0:	10800037 	ldwio	r2,0(r2)
 8042ef4:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8042ef8:	e0bfff17 	ldw	r2,-4(fp)
 8042efc:	1000031e 	bne	r2,zero,8042f0c <alt_up_audio_write_fifo_space+0x3c>
 8042f00:	e0bffd17 	ldw	r2,-12(fp)
 8042f04:	1004d63a 	srli	r2,r2,24
 8042f08:	00000306 	br	8042f18 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 8042f0c:	e0bffd17 	ldw	r2,-12(fp)
 8042f10:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8042f14:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8042f18:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 8042f1c:	e0bffd17 	ldw	r2,-12(fp)
}
 8042f20:	e037883a 	mov	sp,fp
 8042f24:	df000017 	ldw	fp,0(sp)
 8042f28:	dec00104 	addi	sp,sp,4
 8042f2c:	f800283a 	ret

08042f30 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8042f30:	defffa04 	addi	sp,sp,-24
 8042f34:	dfc00515 	stw	ra,20(sp)
 8042f38:	df000415 	stw	fp,16(sp)
 8042f3c:	df000404 	addi	fp,sp,16
 8042f40:	e13ffd15 	stw	r4,-12(fp)
 8042f44:	e17ffe15 	stw	r5,-8(fp)
 8042f48:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 8042f4c:	01400044 	movi	r5,1
 8042f50:	e13ffd17 	ldw	r4,-12(fp)
 8042f54:	8042ed00 	call	8042ed0 <alt_up_audio_write_fifo_space>
 8042f58:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 8042f5c:	e0bffc17 	ldw	r2,-16(fp)
 8042f60:	10801868 	cmpgeui	r2,r2,97
 8042f64:	1000021e 	bne	r2,zero,8042f70 <alt_up_audio_play_r+0x40>
		return 0;
 8042f68:	0005883a 	mov	r2,zero
 8042f6c:	00000506 	br	8042f84 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 8042f70:	01c00044 	movi	r7,1
 8042f74:	e1bfff17 	ldw	r6,-4(fp)
 8042f78:	e17ffe17 	ldw	r5,-8(fp)
 8042f7c:	e13ffd17 	ldw	r4,-12(fp)
 8042f80:	80430e00 	call	80430e0 <alt_up_audio_write_fifo>
}
 8042f84:	e037883a 	mov	sp,fp
 8042f88:	dfc00117 	ldw	ra,4(sp)
 8042f8c:	df000017 	ldw	fp,0(sp)
 8042f90:	dec00204 	addi	sp,sp,8
 8042f94:	f800283a 	ret

08042f98 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8042f98:	defffa04 	addi	sp,sp,-24
 8042f9c:	dfc00515 	stw	ra,20(sp)
 8042fa0:	df000415 	stw	fp,16(sp)
 8042fa4:	df000404 	addi	fp,sp,16
 8042fa8:	e13ffd15 	stw	r4,-12(fp)
 8042fac:	e17ffe15 	stw	r5,-8(fp)
 8042fb0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 8042fb4:	000b883a 	mov	r5,zero
 8042fb8:	e13ffd17 	ldw	r4,-12(fp)
 8042fbc:	8042ed00 	call	8042ed0 <alt_up_audio_write_fifo_space>
 8042fc0:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 8042fc4:	e0bffc17 	ldw	r2,-16(fp)
 8042fc8:	10801868 	cmpgeui	r2,r2,97
 8042fcc:	1000021e 	bne	r2,zero,8042fd8 <alt_up_audio_play_l+0x40>
		return 0;
 8042fd0:	0005883a 	mov	r2,zero
 8042fd4:	00000506 	br	8042fec <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 8042fd8:	000f883a 	mov	r7,zero
 8042fdc:	e1bfff17 	ldw	r6,-4(fp)
 8042fe0:	e17ffe17 	ldw	r5,-8(fp)
 8042fe4:	e13ffd17 	ldw	r4,-12(fp)
 8042fe8:	80430e00 	call	80430e0 <alt_up_audio_write_fifo>
}
 8042fec:	e037883a 	mov	sp,fp
 8042ff0:	dfc00117 	ldw	ra,4(sp)
 8042ff4:	df000017 	ldw	fp,0(sp)
 8042ff8:	dec00204 	addi	sp,sp,8
 8042ffc:	f800283a 	ret

08043000 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8043000:	defff904 	addi	sp,sp,-28
 8043004:	df000615 	stw	fp,24(sp)
 8043008:	df000604 	addi	fp,sp,24
 804300c:	e13ffc15 	stw	r4,-16(fp)
 8043010:	e17ffd15 	stw	r5,-12(fp)
 8043014:	e1bffe15 	stw	r6,-8(fp)
 8043018:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 804301c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8043020:	00002506 	br	80430b8 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8043024:	e0bffc17 	ldw	r2,-16(fp)
 8043028:	10800a17 	ldw	r2,40(r2)
 804302c:	10800104 	addi	r2,r2,4
 8043030:	10800037 	ldwio	r2,0(r2)
 8043034:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 8043038:	e0bfff17 	ldw	r2,-4(fp)
 804303c:	1000041e 	bne	r2,zero,8043050 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 8043040:	e0bffb17 	ldw	r2,-20(fp)
 8043044:	10bfc00c 	andi	r2,r2,65280
			:
 8043048:	1004d23a 	srli	r2,r2,8
 804304c:	00000206 	br	8043058 <alt_up_audio_read_fifo+0x58>
 8043050:	e0bffb17 	ldw	r2,-20(fp)
 8043054:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8043058:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 804305c:	e0bffb17 	ldw	r2,-20(fp)
 8043060:	10001926 	beq	r2,zero,80430c8 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 8043064:	e0bffa17 	ldw	r2,-24(fp)
 8043068:	1085883a 	add	r2,r2,r2
 804306c:	1085883a 	add	r2,r2,r2
 8043070:	1007883a 	mov	r3,r2
 8043074:	e0bffd17 	ldw	r2,-12(fp)
 8043078:	10c5883a 	add	r2,r2,r3
 804307c:	e0ffff17 	ldw	r3,-4(fp)
 8043080:	1800051e 	bne	r3,zero,8043098 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 8043084:	e0fffc17 	ldw	r3,-16(fp)
 8043088:	18c00a17 	ldw	r3,40(r3)
 804308c:	18c00204 	addi	r3,r3,8
 8043090:	18c00037 	ldwio	r3,0(r3)
 8043094:	00000406 	br	80430a8 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 8043098:	e0fffc17 	ldw	r3,-16(fp)
 804309c:	18c00a17 	ldw	r3,40(r3)
 80430a0:	18c00304 	addi	r3,r3,12
 80430a4:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 80430a8:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 80430ac:	e0bffa17 	ldw	r2,-24(fp)
 80430b0:	10800044 	addi	r2,r2,1
 80430b4:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 80430b8:	e0fffa17 	ldw	r3,-24(fp)
 80430bc:	e0bffe17 	ldw	r2,-8(fp)
 80430c0:	18bfd816 	blt	r3,r2,8043024 <__alt_data_end+0xfffc3024>
 80430c4:	00000106 	br	80430cc <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 80430c8:	0001883a 	nop
		}
	}
	return count;
 80430cc:	e0bffa17 	ldw	r2,-24(fp)
}
 80430d0:	e037883a 	mov	sp,fp
 80430d4:	df000017 	ldw	fp,0(sp)
 80430d8:	dec00104 	addi	sp,sp,4
 80430dc:	f800283a 	ret

080430e0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 80430e0:	defff904 	addi	sp,sp,-28
 80430e4:	df000615 	stw	fp,24(sp)
 80430e8:	df000604 	addi	fp,sp,24
 80430ec:	e13ffc15 	stw	r4,-16(fp)
 80430f0:	e17ffd15 	stw	r5,-12(fp)
 80430f4:	e1bffe15 	stw	r6,-8(fp)
 80430f8:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 80430fc:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8043100:	00002f06 	br	80431c0 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8043104:	e0bffc17 	ldw	r2,-16(fp)
 8043108:	10800a17 	ldw	r2,40(r2)
 804310c:	10800104 	addi	r2,r2,4
 8043110:	10800037 	ldwio	r2,0(r2)
 8043114:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8043118:	e0bfff17 	ldw	r2,-4(fp)
 804311c:	1000031e 	bne	r2,zero,804312c <alt_up_audio_write_fifo+0x4c>
 8043120:	e0bffb17 	ldw	r2,-20(fp)
 8043124:	1004d63a 	srli	r2,r2,24
 8043128:	00000306 	br	8043138 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 804312c:	e0bffb17 	ldw	r2,-20(fp)
 8043130:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8043134:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8043138:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 804313c:	e0bffb17 	ldw	r2,-20(fp)
 8043140:	10002326 	beq	r2,zero,80431d0 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 8043144:	e0bfff17 	ldw	r2,-4(fp)
 8043148:	10000f1e 	bne	r2,zero,8043188 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 804314c:	e0bffc17 	ldw	r2,-16(fp)
 8043150:	10800a17 	ldw	r2,40(r2)
 8043154:	10800204 	addi	r2,r2,8
 8043158:	1009883a 	mov	r4,r2
 804315c:	e0bffa17 	ldw	r2,-24(fp)
 8043160:	10c00044 	addi	r3,r2,1
 8043164:	e0fffa15 	stw	r3,-24(fp)
 8043168:	1085883a 	add	r2,r2,r2
 804316c:	1085883a 	add	r2,r2,r2
 8043170:	1007883a 	mov	r3,r2
 8043174:	e0bffd17 	ldw	r2,-12(fp)
 8043178:	10c5883a 	add	r2,r2,r3
 804317c:	10800017 	ldw	r2,0(r2)
 8043180:	20800035 	stwio	r2,0(r4)
 8043184:	00000e06 	br	80431c0 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 8043188:	e0bffc17 	ldw	r2,-16(fp)
 804318c:	10800a17 	ldw	r2,40(r2)
 8043190:	10800304 	addi	r2,r2,12
 8043194:	1009883a 	mov	r4,r2
 8043198:	e0bffa17 	ldw	r2,-24(fp)
 804319c:	10c00044 	addi	r3,r2,1
 80431a0:	e0fffa15 	stw	r3,-24(fp)
 80431a4:	1085883a 	add	r2,r2,r2
 80431a8:	1085883a 	add	r2,r2,r2
 80431ac:	1007883a 	mov	r3,r2
 80431b0:	e0bffd17 	ldw	r2,-12(fp)
 80431b4:	10c5883a 	add	r2,r2,r3
 80431b8:	10800017 	ldw	r2,0(r2)
 80431bc:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 80431c0:	e0fffa17 	ldw	r3,-24(fp)
 80431c4:	e0bffe17 	ldw	r2,-8(fp)
 80431c8:	18bfce16 	blt	r3,r2,8043104 <__alt_data_end+0xfffc3104>
 80431cc:	00000106 	br	80431d4 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 80431d0:	0001883a 	nop
		}
	}
	return count;
 80431d4:	e0bffa17 	ldw	r2,-24(fp)
}
 80431d8:	e037883a 	mov	sp,fp
 80431dc:	df000017 	ldw	fp,0(sp)
 80431e0:	dec00104 	addi	sp,sp,4
 80431e4:	f800283a 	ret

080431e8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 80431e8:	defffd04 	addi	sp,sp,-12
 80431ec:	df000215 	stw	fp,8(sp)
 80431f0:	df000204 	addi	fp,sp,8
 80431f4:	e13ffe15 	stw	r4,-8(fp)
 80431f8:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 80431fc:	e0bfff17 	ldw	r2,-4(fp)
 8043200:	1000051e 	bne	r2,zero,8043218 <alt_up_audio_read_fifo_head+0x30>
 8043204:	e0bffe17 	ldw	r2,-8(fp)
 8043208:	10800a17 	ldw	r2,40(r2)
 804320c:	10800204 	addi	r2,r2,8
 8043210:	10800037 	ldwio	r2,0(r2)
 8043214:	00000406 	br	8043228 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 8043218:	e0bffe17 	ldw	r2,-8(fp)
 804321c:	10800a17 	ldw	r2,40(r2)
 8043220:	10800304 	addi	r2,r2,12
 8043224:	10800037 	ldwio	r2,0(r2)
}
 8043228:	e037883a 	mov	sp,fp
 804322c:	df000017 	ldw	fp,0(sp)
 8043230:	dec00104 	addi	sp,sp,4
 8043234:	f800283a 	ret

08043238 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 8043238:	defffc04 	addi	sp,sp,-16
 804323c:	df000315 	stw	fp,12(sp)
 8043240:	df000304 	addi	fp,sp,12
 8043244:	e13ffd15 	stw	r4,-12(fp)
 8043248:	e17ffe15 	stw	r5,-8(fp)
 804324c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 8043250:	e0bfff17 	ldw	r2,-4(fp)
 8043254:	1000071e 	bne	r2,zero,8043274 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 8043258:	e0bffd17 	ldw	r2,-12(fp)
 804325c:	10800a17 	ldw	r2,40(r2)
 8043260:	10800204 	addi	r2,r2,8
 8043264:	1007883a 	mov	r3,r2
 8043268:	e0bffe17 	ldw	r2,-8(fp)
 804326c:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 8043270:	00000606 	br	804328c <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 8043274:	e0bffd17 	ldw	r2,-12(fp)
 8043278:	10800a17 	ldw	r2,40(r2)
 804327c:	10800304 	addi	r2,r2,12
 8043280:	1007883a 	mov	r3,r2
 8043284:	e0bffe17 	ldw	r2,-8(fp)
 8043288:	18800035 	stwio	r2,0(r3)
}
 804328c:	0001883a 	nop
 8043290:	e037883a 	mov	sp,fp
 8043294:	df000017 	ldw	fp,0(sp)
 8043298:	dec00104 	addi	sp,sp,4
 804329c:	f800283a 	ret

080432a0 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 80432a0:	defffc04 	addi	sp,sp,-16
 80432a4:	dfc00315 	stw	ra,12(sp)
 80432a8:	df000215 	stw	fp,8(sp)
 80432ac:	df000204 	addi	fp,sp,8
 80432b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 80432b4:	d1600d04 	addi	r5,gp,-32716
 80432b8:	e13fff17 	ldw	r4,-4(fp)
 80432bc:	8043de80 	call	8043de8 <alt_find_dev>
 80432c0:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 80432c4:	e0bffe17 	ldw	r2,-8(fp)
 80432c8:	10800a17 	ldw	r2,40(r2)
 80432cc:	10800104 	addi	r2,r2,4
 80432d0:	10800037 	ldwio	r2,0(r2)
 80432d4:	10803fec 	andhi	r2,r2,255
 80432d8:	1005d43a 	srai	r2,r2,16
 80432dc:	1007883a 	mov	r3,r2
 80432e0:	e0bffe17 	ldw	r2,-8(fp)
 80432e4:	10c00b15 	stw	r3,44(r2)

  return dev;
 80432e8:	e0bffe17 	ldw	r2,-8(fp)
}
 80432ec:	e037883a 	mov	sp,fp
 80432f0:	dfc00117 	ldw	ra,4(sp)
 80432f4:	df000017 	ldw	fp,0(sp)
 80432f8:	dec00204 	addi	sp,sp,8
 80432fc:	f800283a 	ret

08043300 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8043300:	defffc04 	addi	sp,sp,-16
 8043304:	df000315 	stw	fp,12(sp)
 8043308:	df000304 	addi	fp,sp,12
 804330c:	e13ffd15 	stw	r4,-12(fp)
 8043310:	e17ffe15 	stw	r5,-8(fp)
 8043314:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8043318:	e0bffd17 	ldw	r2,-12(fp)
 804331c:	10800a17 	ldw	r2,40(r2)
 8043320:	10800204 	addi	r2,r2,8
 8043324:	1007883a 	mov	r3,r2
 8043328:	e0bffe17 	ldw	r2,-8(fp)
 804332c:	10803fcc 	andi	r2,r2,255
 8043330:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 8043334:	e0bffd17 	ldw	r2,-12(fp)
 8043338:	10800a17 	ldw	r2,40(r2)
 804333c:	10800304 	addi	r2,r2,12
 8043340:	1007883a 	mov	r3,r2
 8043344:	e0bfff17 	ldw	r2,-4(fp)
 8043348:	10bfffcc 	andi	r2,r2,65535
 804334c:	18800035 	stwio	r2,0(r3)

	return 0;
 8043350:	0005883a 	mov	r2,zero
}
 8043354:	e037883a 	mov	sp,fp
 8043358:	df000017 	ldw	fp,0(sp)
 804335c:	dec00104 	addi	sp,sp,4
 8043360:	f800283a 	ret

08043364 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 8043364:	defffb04 	addi	sp,sp,-20
 8043368:	dfc00415 	stw	ra,16(sp)
 804336c:	df000315 	stw	fp,12(sp)
 8043370:	df000304 	addi	fp,sp,12
 8043374:	e13ffd15 	stw	r4,-12(fp)
 8043378:	e17ffe15 	stw	r5,-8(fp)
 804337c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8043380:	e0bffd17 	ldw	r2,-12(fp)
 8043384:	10800a17 	ldw	r2,40(r2)
 8043388:	10800204 	addi	r2,r2,8
 804338c:	1007883a 	mov	r3,r2
 8043390:	e0bffe17 	ldw	r2,-8(fp)
 8043394:	10803fcc 	andi	r2,r2,255
 8043398:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 804339c:	e0bffd17 	ldw	r2,-12(fp)
 80433a0:	10800a17 	ldw	r2,40(r2)
 80433a4:	10800304 	addi	r2,r2,12
 80433a8:	10800037 	ldwio	r2,0(r2)
 80433ac:	1007883a 	mov	r3,r2
 80433b0:	e0bfff17 	ldw	r2,-4(fp)
 80433b4:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 80433b8:	e13ffd17 	ldw	r4,-12(fp)
 80433bc:	80434880 	call	8043488 <alt_up_av_config_read_acknowledge>
 80433c0:	10000226 	beq	r2,zero,80433cc <alt_up_av_config_read_data+0x68>
		return -1;
 80433c4:	00bfffc4 	movi	r2,-1
 80433c8:	00000106 	br	80433d0 <alt_up_av_config_read_data+0x6c>

	return 0;
 80433cc:	0005883a 	mov	r2,zero
}
 80433d0:	e037883a 	mov	sp,fp
 80433d4:	dfc00117 	ldw	ra,4(sp)
 80433d8:	df000017 	ldw	fp,0(sp)
 80433dc:	dec00204 	addi	sp,sp,8
 80433e0:	f800283a 	ret

080433e4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 80433e4:	defffe04 	addi	sp,sp,-8
 80433e8:	df000115 	stw	fp,4(sp)
 80433ec:	df000104 	addi	fp,sp,4
 80433f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 80433f4:	e0bfff17 	ldw	r2,-4(fp)
 80433f8:	10800a17 	ldw	r2,40(r2)
 80433fc:	1007883a 	mov	r3,r2
 8043400:	00800044 	movi	r2,1
 8043404:	18800025 	stbio	r2,0(r3)
	return 0;
 8043408:	0005883a 	mov	r2,zero
}
 804340c:	e037883a 	mov	sp,fp
 8043410:	df000017 	ldw	fp,0(sp)
 8043414:	dec00104 	addi	sp,sp,4
 8043418:	f800283a 	ret

0804341c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 804341c:	defffe04 	addi	sp,sp,-8
 8043420:	df000115 	stw	fp,4(sp)
 8043424:	df000104 	addi	fp,sp,4
 8043428:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 804342c:	e0bfff17 	ldw	r2,-4(fp)
 8043430:	10800a17 	ldw	r2,40(r2)
 8043434:	1007883a 	mov	r3,r2
 8043438:	00800084 	movi	r2,2
 804343c:	18800025 	stbio	r2,0(r3)
	return 0;
 8043440:	0005883a 	mov	r2,zero
}
 8043444:	e037883a 	mov	sp,fp
 8043448:	df000017 	ldw	fp,0(sp)
 804344c:	dec00104 	addi	sp,sp,4
 8043450:	f800283a 	ret

08043454 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 8043454:	defffe04 	addi	sp,sp,-8
 8043458:	df000115 	stw	fp,4(sp)
 804345c:	df000104 	addi	fp,sp,4
 8043460:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 8043464:	e0bfff17 	ldw	r2,-4(fp)
 8043468:	10800a17 	ldw	r2,40(r2)
 804346c:	0007883a 	mov	r3,zero
 8043470:	10c00025 	stbio	r3,0(r2)
	return 0;
 8043474:	0005883a 	mov	r2,zero
}
 8043478:	e037883a 	mov	sp,fp
 804347c:	df000017 	ldw	fp,0(sp)
 8043480:	dec00104 	addi	sp,sp,4
 8043484:	f800283a 	ret

08043488 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 8043488:	defffe04 	addi	sp,sp,-8
 804348c:	df000115 	stw	fp,4(sp)
 8043490:	df000104 	addi	fp,sp,4
 8043494:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 8043498:	e0bfff17 	ldw	r2,-4(fp)
 804349c:	10800a17 	ldw	r2,40(r2)
 80434a0:	10800104 	addi	r2,r2,4
 80434a4:	10800037 	ldwio	r2,0(r2)
 80434a8:	1080008c 	andi	r2,r2,2
 80434ac:	1005d07a 	srai	r2,r2,1
 80434b0:	10000626 	beq	r2,zero,80434cc <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 80434b4:	e0bfff17 	ldw	r2,-4(fp)
 80434b8:	10800a17 	ldw	r2,40(r2)
 80434bc:	10800104 	addi	r2,r2,4
 80434c0:	10800037 	ldwio	r2,0(r2)
 80434c4:	1080004c 	andi	r2,r2,1
 80434c8:	00000106 	br	80434d0 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 80434cc:	00bfffc4 	movi	r2,-1
}
 80434d0:	e037883a 	mov	sp,fp
 80434d4:	df000017 	ldw	fp,0(sp)
 80434d8:	dec00104 	addi	sp,sp,4
 80434dc:	f800283a 	ret

080434e0 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 80434e0:	defffe04 	addi	sp,sp,-8
 80434e4:	df000115 	stw	fp,4(sp)
 80434e8:	df000104 	addi	fp,sp,4
 80434ec:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 80434f0:	e0bfff17 	ldw	r2,-4(fp)
 80434f4:	10800a17 	ldw	r2,40(r2)
 80434f8:	10800104 	addi	r2,r2,4
 80434fc:	10800037 	ldwio	r2,0(r2)
 8043500:	1080008c 	andi	r2,r2,2
 8043504:	1005d07a 	srai	r2,r2,1
}
 8043508:	e037883a 	mov	sp,fp
 804350c:	df000017 	ldw	fp,0(sp)
 8043510:	dec00104 	addi	sp,sp,4
 8043514:	f800283a 	ret

08043518 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8043518:	defffa04 	addi	sp,sp,-24
 804351c:	dfc00515 	stw	ra,20(sp)
 8043520:	df000415 	stw	fp,16(sp)
 8043524:	df000404 	addi	fp,sp,16
 8043528:	e13ffd15 	stw	r4,-12(fp)
 804352c:	e17ffe15 	stw	r5,-8(fp)
 8043530:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8043534:	e0bffd17 	ldw	r2,-12(fp)
 8043538:	10800b17 	ldw	r2,44(r2)
 804353c:	10800060 	cmpeqi	r2,r2,1
 8043540:	10000e1e 	bne	r2,zero,804357c <alt_up_av_config_write_audio_cfg_register+0x64>
 8043544:	e0bffd17 	ldw	r2,-12(fp)
 8043548:	10800b17 	ldw	r2,44(r2)
 804354c:	108000a0 	cmpeqi	r2,r2,2
 8043550:	10000a1e 	bne	r2,zero,804357c <alt_up_av_config_write_audio_cfg_register+0x64>
 8043554:	e0bffd17 	ldw	r2,-12(fp)
 8043558:	10800b17 	ldw	r2,44(r2)
 804355c:	108000e0 	cmpeqi	r2,r2,3
 8043560:	1000061e 	bne	r2,zero,804357c <alt_up_av_config_write_audio_cfg_register+0x64>
 8043564:	e0bffd17 	ldw	r2,-12(fp)
 8043568:	10800b17 	ldw	r2,44(r2)
 804356c:	10800120 	cmpeqi	r2,r2,4
 8043570:	1000021e 	bne	r2,zero,804357c <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 8043574:	00bffa84 	movi	r2,-22
 8043578:	00000b06 	br	80435a8 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 804357c:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 8043580:	e0bffd17 	ldw	r2,-12(fp)
 8043584:	10800a17 	ldw	r2,40(r2)
 8043588:	10800084 	addi	r2,r2,2
 804358c:	1007883a 	mov	r3,r2
 8043590:	e0bffc17 	ldw	r2,-16(fp)
 8043594:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 8043598:	e1bfff17 	ldw	r6,-4(fp)
 804359c:	e17ffe17 	ldw	r5,-8(fp)
 80435a0:	e13ffd17 	ldw	r4,-12(fp)
 80435a4:	80433000 	call	8043300 <alt_up_av_config_write_data>
}
 80435a8:	e037883a 	mov	sp,fp
 80435ac:	dfc00117 	ldw	ra,4(sp)
 80435b0:	df000017 	ldw	fp,0(sp)
 80435b4:	dec00204 	addi	sp,sp,8
 80435b8:	f800283a 	ret

080435bc <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 80435bc:	defffa04 	addi	sp,sp,-24
 80435c0:	dfc00515 	stw	ra,20(sp)
 80435c4:	df000415 	stw	fp,16(sp)
 80435c8:	df000404 	addi	fp,sp,16
 80435cc:	e13ffc15 	stw	r4,-16(fp)
 80435d0:	e17ffd15 	stw	r5,-12(fp)
 80435d4:	e1bffe15 	stw	r6,-8(fp)
 80435d8:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 80435dc:	e0bffc17 	ldw	r2,-16(fp)
 80435e0:	10800b17 	ldw	r2,44(r2)
 80435e4:	108000a0 	cmpeqi	r2,r2,2
 80435e8:	10000a1e 	bne	r2,zero,8043614 <alt_up_av_config_read_video_cfg_register+0x58>
 80435ec:	e0bffc17 	ldw	r2,-16(fp)
 80435f0:	10800b17 	ldw	r2,44(r2)
 80435f4:	108000e0 	cmpeqi	r2,r2,3
 80435f8:	1000061e 	bne	r2,zero,8043614 <alt_up_av_config_read_video_cfg_register+0x58>
 80435fc:	e0bffc17 	ldw	r2,-16(fp)
 8043600:	10800b17 	ldw	r2,44(r2)
 8043604:	10800120 	cmpeqi	r2,r2,4
 8043608:	1000021e 	bne	r2,zero,8043614 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 804360c:	00bffa84 	movi	r2,-22
 8043610:	00001f06 	br	8043690 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 8043614:	e0bffc17 	ldw	r2,-16(fp)
 8043618:	10800b17 	ldw	r2,44(r2)
 804361c:	108000a0 	cmpeqi	r2,r2,2
 8043620:	1000041e 	bne	r2,zero,8043634 <alt_up_av_config_read_video_cfg_register+0x78>
 8043624:	e0bffc17 	ldw	r2,-16(fp)
 8043628:	10800b17 	ldw	r2,44(r2)
 804362c:	10800118 	cmpnei	r2,r2,4
 8043630:	1000051e 	bne	r2,zero,8043648 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 8043634:	e0bfff17 	ldw	r2,-4(fp)
 8043638:	10800060 	cmpeqi	r2,r2,1
 804363c:	10000a1e 	bne	r2,zero,8043668 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 8043640:	00bffa84 	movi	r2,-22
 8043644:	00001206 	br	8043690 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 8043648:	e0bfff17 	ldw	r2,-4(fp)
 804364c:	10800060 	cmpeqi	r2,r2,1
 8043650:	1000051e 	bne	r2,zero,8043668 <alt_up_av_config_read_video_cfg_register+0xac>
 8043654:	e0bfff17 	ldw	r2,-4(fp)
 8043658:	108000a0 	cmpeqi	r2,r2,2
 804365c:	1000021e 	bne	r2,zero,8043668 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 8043660:	00bffa84 	movi	r2,-22
 8043664:	00000a06 	br	8043690 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 8043668:	e0bffc17 	ldw	r2,-16(fp)
 804366c:	10800a17 	ldw	r2,40(r2)
 8043670:	10800084 	addi	r2,r2,2
 8043674:	1007883a 	mov	r3,r2
 8043678:	e0bfff17 	ldw	r2,-4(fp)
 804367c:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 8043680:	e1bffe17 	ldw	r6,-8(fp)
 8043684:	e17ffd17 	ldw	r5,-12(fp)
 8043688:	e13ffc17 	ldw	r4,-16(fp)
 804368c:	80433640 	call	8043364 <alt_up_av_config_read_data>
}
 8043690:	e037883a 	mov	sp,fp
 8043694:	dfc00117 	ldw	ra,4(sp)
 8043698:	df000017 	ldw	fp,0(sp)
 804369c:	dec00204 	addi	sp,sp,8
 80436a0:	f800283a 	ret

080436a4 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 80436a4:	defffa04 	addi	sp,sp,-24
 80436a8:	dfc00515 	stw	ra,20(sp)
 80436ac:	df000415 	stw	fp,16(sp)
 80436b0:	df000404 	addi	fp,sp,16
 80436b4:	e13ffc15 	stw	r4,-16(fp)
 80436b8:	e17ffd15 	stw	r5,-12(fp)
 80436bc:	e1bffe15 	stw	r6,-8(fp)
 80436c0:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 80436c4:	e0bffc17 	ldw	r2,-16(fp)
 80436c8:	10800b17 	ldw	r2,44(r2)
 80436cc:	108000a0 	cmpeqi	r2,r2,2
 80436d0:	10000a1e 	bne	r2,zero,80436fc <alt_up_av_config_write_video_cfg_register+0x58>
 80436d4:	e0bffc17 	ldw	r2,-16(fp)
 80436d8:	10800b17 	ldw	r2,44(r2)
 80436dc:	108000e0 	cmpeqi	r2,r2,3
 80436e0:	1000061e 	bne	r2,zero,80436fc <alt_up_av_config_write_video_cfg_register+0x58>
 80436e4:	e0bffc17 	ldw	r2,-16(fp)
 80436e8:	10800b17 	ldw	r2,44(r2)
 80436ec:	10800120 	cmpeqi	r2,r2,4
 80436f0:	1000021e 	bne	r2,zero,80436fc <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 80436f4:	00bffa84 	movi	r2,-22
 80436f8:	00001f06 	br	8043778 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 80436fc:	e0bffc17 	ldw	r2,-16(fp)
 8043700:	10800b17 	ldw	r2,44(r2)
 8043704:	108000a0 	cmpeqi	r2,r2,2
 8043708:	1000041e 	bne	r2,zero,804371c <alt_up_av_config_write_video_cfg_register+0x78>
 804370c:	e0bffc17 	ldw	r2,-16(fp)
 8043710:	10800b17 	ldw	r2,44(r2)
 8043714:	10800118 	cmpnei	r2,r2,4
 8043718:	1000051e 	bne	r2,zero,8043730 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 804371c:	e0bfff17 	ldw	r2,-4(fp)
 8043720:	10800060 	cmpeqi	r2,r2,1
 8043724:	10000a1e 	bne	r2,zero,8043750 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 8043728:	00bffa84 	movi	r2,-22
 804372c:	00001206 	br	8043778 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 8043730:	e0bfff17 	ldw	r2,-4(fp)
 8043734:	10800060 	cmpeqi	r2,r2,1
 8043738:	1000051e 	bne	r2,zero,8043750 <alt_up_av_config_write_video_cfg_register+0xac>
 804373c:	e0bfff17 	ldw	r2,-4(fp)
 8043740:	108000a0 	cmpeqi	r2,r2,2
 8043744:	1000021e 	bne	r2,zero,8043750 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 8043748:	00bffa84 	movi	r2,-22
 804374c:	00000a06 	br	8043778 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 8043750:	e0bffc17 	ldw	r2,-16(fp)
 8043754:	10800a17 	ldw	r2,40(r2)
 8043758:	10800084 	addi	r2,r2,2
 804375c:	1007883a 	mov	r3,r2
 8043760:	e0bfff17 	ldw	r2,-4(fp)
 8043764:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 8043768:	e1bffe17 	ldw	r6,-8(fp)
 804376c:	e17ffd17 	ldw	r5,-12(fp)
 8043770:	e13ffc17 	ldw	r4,-16(fp)
 8043774:	80433000 	call	8043300 <alt_up_av_config_write_data>
}
 8043778:	e037883a 	mov	sp,fp
 804377c:	dfc00117 	ldw	ra,4(sp)
 8043780:	df000017 	ldw	fp,0(sp)
 8043784:	dec00204 	addi	sp,sp,8
 8043788:	f800283a 	ret

0804378c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 804378c:	defffb04 	addi	sp,sp,-20
 8043790:	dfc00415 	stw	ra,16(sp)
 8043794:	df000315 	stw	fp,12(sp)
 8043798:	df000304 	addi	fp,sp,12
 804379c:	e13ffd15 	stw	r4,-12(fp)
 80437a0:	e17ffe15 	stw	r5,-8(fp)
 80437a4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 80437a8:	e0bffd17 	ldw	r2,-12(fp)
 80437ac:	10800b17 	ldw	r2,44(r2)
 80437b0:	10800220 	cmpeqi	r2,r2,8
 80437b4:	1000021e 	bne	r2,zero,80437c0 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 80437b8:	00bffa84 	movi	r2,-22
 80437bc:	00000406 	br	80437d0 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 80437c0:	e1bfff17 	ldw	r6,-4(fp)
 80437c4:	e17ffe17 	ldw	r5,-8(fp)
 80437c8:	e13ffd17 	ldw	r4,-12(fp)
 80437cc:	80433640 	call	8043364 <alt_up_av_config_read_data>
}
 80437d0:	e037883a 	mov	sp,fp
 80437d4:	dfc00117 	ldw	ra,4(sp)
 80437d8:	df000017 	ldw	fp,0(sp)
 80437dc:	dec00204 	addi	sp,sp,8
 80437e0:	f800283a 	ret

080437e4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 80437e4:	defffb04 	addi	sp,sp,-20
 80437e8:	dfc00415 	stw	ra,16(sp)
 80437ec:	df000315 	stw	fp,12(sp)
 80437f0:	df000304 	addi	fp,sp,12
 80437f4:	e13ffd15 	stw	r4,-12(fp)
 80437f8:	e17ffe15 	stw	r5,-8(fp)
 80437fc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 8043800:	e0bffd17 	ldw	r2,-12(fp)
 8043804:	10800b17 	ldw	r2,44(r2)
 8043808:	10800220 	cmpeqi	r2,r2,8
 804380c:	1000021e 	bne	r2,zero,8043818 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 8043810:	00bffa84 	movi	r2,-22
 8043814:	00000406 	br	8043828 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 8043818:	e1bfff17 	ldw	r6,-4(fp)
 804381c:	e17ffe17 	ldw	r5,-8(fp)
 8043820:	e13ffd17 	ldw	r4,-12(fp)
 8043824:	80433000 	call	8043300 <alt_up_av_config_write_data>
}
 8043828:	e037883a 	mov	sp,fp
 804382c:	dfc00117 	ldw	ra,4(sp)
 8043830:	df000017 	ldw	fp,0(sp)
 8043834:	dec00204 	addi	sp,sp,8
 8043838:	f800283a 	ret

0804383c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 804383c:	defffb04 	addi	sp,sp,-20
 8043840:	dfc00415 	stw	ra,16(sp)
 8043844:	df000315 	stw	fp,12(sp)
 8043848:	df000304 	addi	fp,sp,12
 804384c:	e13ffd15 	stw	r4,-12(fp)
 8043850:	e17ffe15 	stw	r5,-8(fp)
 8043854:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 8043858:	e0bffd17 	ldw	r2,-12(fp)
 804385c:	10800b17 	ldw	r2,44(r2)
 8043860:	10800260 	cmpeqi	r2,r2,9
 8043864:	1000021e 	bne	r2,zero,8043870 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 8043868:	00bffa84 	movi	r2,-22
 804386c:	00000406 	br	8043880 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 8043870:	e1bfff17 	ldw	r6,-4(fp)
 8043874:	e17ffe17 	ldw	r5,-8(fp)
 8043878:	e13ffd17 	ldw	r4,-12(fp)
 804387c:	80433640 	call	8043364 <alt_up_av_config_read_data>
}
 8043880:	e037883a 	mov	sp,fp
 8043884:	dfc00117 	ldw	ra,4(sp)
 8043888:	df000017 	ldw	fp,0(sp)
 804388c:	dec00204 	addi	sp,sp,8
 8043890:	f800283a 	ret

08043894 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8043894:	defffb04 	addi	sp,sp,-20
 8043898:	dfc00415 	stw	ra,16(sp)
 804389c:	df000315 	stw	fp,12(sp)
 80438a0:	df000304 	addi	fp,sp,12
 80438a4:	e13ffd15 	stw	r4,-12(fp)
 80438a8:	e17ffe15 	stw	r5,-8(fp)
 80438ac:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 80438b0:	e0bffd17 	ldw	r2,-12(fp)
 80438b4:	10800b17 	ldw	r2,44(r2)
 80438b8:	10800260 	cmpeqi	r2,r2,9
 80438bc:	1000021e 	bne	r2,zero,80438c8 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 80438c0:	00bffa84 	movi	r2,-22
 80438c4:	00000406 	br	80438d8 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 80438c8:	e1bfff17 	ldw	r6,-4(fp)
 80438cc:	e17ffe17 	ldw	r5,-8(fp)
 80438d0:	e13ffd17 	ldw	r4,-12(fp)
 80438d4:	80433000 	call	8043300 <alt_up_av_config_write_data>
}
 80438d8:	e037883a 	mov	sp,fp
 80438dc:	dfc00117 	ldw	ra,4(sp)
 80438e0:	df000017 	ldw	fp,0(sp)
 80438e4:	dec00204 	addi	sp,sp,8
 80438e8:	f800283a 	ret

080438ec <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 80438ec:	defffb04 	addi	sp,sp,-20
 80438f0:	dfc00415 	stw	ra,16(sp)
 80438f4:	df000315 	stw	fp,12(sp)
 80438f8:	df000304 	addi	fp,sp,12
 80438fc:	e13ffd15 	stw	r4,-12(fp)
 8043900:	e17ffe15 	stw	r5,-8(fp)
 8043904:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 8043908:	e0bffd17 	ldw	r2,-12(fp)
 804390c:	10800b17 	ldw	r2,44(r2)
 8043910:	108002a0 	cmpeqi	r2,r2,10
 8043914:	1000021e 	bne	r2,zero,8043920 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 8043918:	00bffa84 	movi	r2,-22
 804391c:	00000406 	br	8043930 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 8043920:	e1bfff17 	ldw	r6,-4(fp)
 8043924:	e17ffe17 	ldw	r5,-8(fp)
 8043928:	e13ffd17 	ldw	r4,-12(fp)
 804392c:	80433640 	call	8043364 <alt_up_av_config_read_data>
}
 8043930:	e037883a 	mov	sp,fp
 8043934:	dfc00117 	ldw	ra,4(sp)
 8043938:	df000017 	ldw	fp,0(sp)
 804393c:	dec00204 	addi	sp,sp,8
 8043940:	f800283a 	ret

08043944 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8043944:	defffb04 	addi	sp,sp,-20
 8043948:	dfc00415 	stw	ra,16(sp)
 804394c:	df000315 	stw	fp,12(sp)
 8043950:	df000304 	addi	fp,sp,12
 8043954:	e13ffd15 	stw	r4,-12(fp)
 8043958:	e17ffe15 	stw	r5,-8(fp)
 804395c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 8043960:	e0bffd17 	ldw	r2,-12(fp)
 8043964:	10800b17 	ldw	r2,44(r2)
 8043968:	108002a0 	cmpeqi	r2,r2,10
 804396c:	1000021e 	bne	r2,zero,8043978 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 8043970:	00bffa84 	movi	r2,-22
 8043974:	00000406 	br	8043988 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 8043978:	e1bfff17 	ldw	r6,-4(fp)
 804397c:	e17ffe17 	ldw	r5,-8(fp)
 8043980:	e13ffd17 	ldw	r4,-12(fp)
 8043984:	80433000 	call	8043300 <alt_up_av_config_write_data>
}
 8043988:	e037883a 	mov	sp,fp
 804398c:	dfc00117 	ldw	ra,4(sp)
 8043990:	df000017 	ldw	fp,0(sp)
 8043994:	dec00204 	addi	sp,sp,8
 8043998:	f800283a 	ret

0804399c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 804399c:	defff504 	addi	sp,sp,-44
 80439a0:	df000a15 	stw	fp,40(sp)
 80439a4:	df000a04 	addi	fp,sp,40
 80439a8:	e13ffc15 	stw	r4,-16(fp)
 80439ac:	e17ffd15 	stw	r5,-12(fp)
 80439b0:	e1bffe15 	stw	r6,-8(fp)
 80439b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80439b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80439bc:	d0a6ee17 	ldw	r2,-25672(gp)
  
  if (alt_ticks_per_second ())
 80439c0:	10003c26 	beq	r2,zero,8043ab4 <alt_alarm_start+0x118>
  {
    if (alarm)
 80439c4:	e0bffc17 	ldw	r2,-16(fp)
 80439c8:	10003826 	beq	r2,zero,8043aac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80439cc:	e0bffc17 	ldw	r2,-16(fp)
 80439d0:	e0fffe17 	ldw	r3,-8(fp)
 80439d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80439d8:	e0bffc17 	ldw	r2,-16(fp)
 80439dc:	e0ffff17 	ldw	r3,-4(fp)
 80439e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80439e4:	0005303a 	rdctl	r2,status
 80439e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80439ec:	e0fff917 	ldw	r3,-28(fp)
 80439f0:	00bfff84 	movi	r2,-2
 80439f4:	1884703a 	and	r2,r3,r2
 80439f8:	1001703a 	wrctl	status,r2
  
  return context;
 80439fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8043a00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8043a04:	d0a6ef17 	ldw	r2,-25668(gp)
      
      current_nticks = alt_nticks();
 8043a08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8043a0c:	e0fffd17 	ldw	r3,-12(fp)
 8043a10:	e0bff617 	ldw	r2,-40(fp)
 8043a14:	1885883a 	add	r2,r3,r2
 8043a18:	10c00044 	addi	r3,r2,1
 8043a1c:	e0bffc17 	ldw	r2,-16(fp)
 8043a20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8043a24:	e0bffc17 	ldw	r2,-16(fp)
 8043a28:	10c00217 	ldw	r3,8(r2)
 8043a2c:	e0bff617 	ldw	r2,-40(fp)
 8043a30:	1880042e 	bgeu	r3,r2,8043a44 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8043a34:	e0bffc17 	ldw	r2,-16(fp)
 8043a38:	00c00044 	movi	r3,1
 8043a3c:	10c00405 	stb	r3,16(r2)
 8043a40:	00000206 	br	8043a4c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8043a44:	e0bffc17 	ldw	r2,-16(fp)
 8043a48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8043a4c:	e0bffc17 	ldw	r2,-16(fp)
 8043a50:	d0e01104 	addi	r3,gp,-32700
 8043a54:	e0fffa15 	stw	r3,-24(fp)
 8043a58:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8043a5c:	e0bffb17 	ldw	r2,-20(fp)
 8043a60:	e0fffa17 	ldw	r3,-24(fp)
 8043a64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8043a68:	e0bffa17 	ldw	r2,-24(fp)
 8043a6c:	10c00017 	ldw	r3,0(r2)
 8043a70:	e0bffb17 	ldw	r2,-20(fp)
 8043a74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8043a78:	e0bffa17 	ldw	r2,-24(fp)
 8043a7c:	10800017 	ldw	r2,0(r2)
 8043a80:	e0fffb17 	ldw	r3,-20(fp)
 8043a84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8043a88:	e0bffa17 	ldw	r2,-24(fp)
 8043a8c:	e0fffb17 	ldw	r3,-20(fp)
 8043a90:	10c00015 	stw	r3,0(r2)
 8043a94:	e0bff817 	ldw	r2,-32(fp)
 8043a98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8043a9c:	e0bff717 	ldw	r2,-36(fp)
 8043aa0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8043aa4:	0005883a 	mov	r2,zero
 8043aa8:	00000306 	br	8043ab8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8043aac:	00bffa84 	movi	r2,-22
 8043ab0:	00000106 	br	8043ab8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8043ab4:	00bfde84 	movi	r2,-134
  }
}
 8043ab8:	e037883a 	mov	sp,fp
 8043abc:	df000017 	ldw	fp,0(sp)
 8043ac0:	dec00104 	addi	sp,sp,4
 8043ac4:	f800283a 	ret

08043ac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8043ac8:	defffe04 	addi	sp,sp,-8
 8043acc:	dfc00115 	stw	ra,4(sp)
 8043ad0:	df000015 	stw	fp,0(sp)
 8043ad4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8043ad8:	d0a01017 	ldw	r2,-32704(gp)
 8043adc:	10000326 	beq	r2,zero,8043aec <alt_get_errno+0x24>
 8043ae0:	d0a01017 	ldw	r2,-32704(gp)
 8043ae4:	103ee83a 	callr	r2
 8043ae8:	00000106 	br	8043af0 <alt_get_errno+0x28>
 8043aec:	d0a6f004 	addi	r2,gp,-25664
}
 8043af0:	e037883a 	mov	sp,fp
 8043af4:	dfc00117 	ldw	ra,4(sp)
 8043af8:	df000017 	ldw	fp,0(sp)
 8043afc:	dec00204 	addi	sp,sp,8
 8043b00:	f800283a 	ret

08043b04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8043b04:	defffb04 	addi	sp,sp,-20
 8043b08:	dfc00415 	stw	ra,16(sp)
 8043b0c:	df000315 	stw	fp,12(sp)
 8043b10:	df000304 	addi	fp,sp,12
 8043b14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8043b18:	e0bfff17 	ldw	r2,-4(fp)
 8043b1c:	10000616 	blt	r2,zero,8043b38 <close+0x34>
 8043b20:	e0bfff17 	ldw	r2,-4(fp)
 8043b24:	10c00324 	muli	r3,r2,12
 8043b28:	00820174 	movhi	r2,2053
 8043b2c:	10a27f04 	addi	r2,r2,-30212
 8043b30:	1885883a 	add	r2,r3,r2
 8043b34:	00000106 	br	8043b3c <close+0x38>
 8043b38:	0005883a 	mov	r2,zero
 8043b3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8043b40:	e0bffd17 	ldw	r2,-12(fp)
 8043b44:	10001926 	beq	r2,zero,8043bac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8043b48:	e0bffd17 	ldw	r2,-12(fp)
 8043b4c:	10800017 	ldw	r2,0(r2)
 8043b50:	10800417 	ldw	r2,16(r2)
 8043b54:	10000626 	beq	r2,zero,8043b70 <close+0x6c>
 8043b58:	e0bffd17 	ldw	r2,-12(fp)
 8043b5c:	10800017 	ldw	r2,0(r2)
 8043b60:	10800417 	ldw	r2,16(r2)
 8043b64:	e13ffd17 	ldw	r4,-12(fp)
 8043b68:	103ee83a 	callr	r2
 8043b6c:	00000106 	br	8043b74 <close+0x70>
 8043b70:	0005883a 	mov	r2,zero
 8043b74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8043b78:	e13fff17 	ldw	r4,-4(fp)
 8043b7c:	80442dc0 	call	80442dc <alt_release_fd>
    if (rval < 0)
 8043b80:	e0bffe17 	ldw	r2,-8(fp)
 8043b84:	1000070e 	bge	r2,zero,8043ba4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8043b88:	8043ac80 	call	8043ac8 <alt_get_errno>
 8043b8c:	1007883a 	mov	r3,r2
 8043b90:	e0bffe17 	ldw	r2,-8(fp)
 8043b94:	0085c83a 	sub	r2,zero,r2
 8043b98:	18800015 	stw	r2,0(r3)
      return -1;
 8043b9c:	00bfffc4 	movi	r2,-1
 8043ba0:	00000706 	br	8043bc0 <close+0xbc>
    }
    return 0;
 8043ba4:	0005883a 	mov	r2,zero
 8043ba8:	00000506 	br	8043bc0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8043bac:	8043ac80 	call	8043ac8 <alt_get_errno>
 8043bb0:	1007883a 	mov	r3,r2
 8043bb4:	00801444 	movi	r2,81
 8043bb8:	18800015 	stw	r2,0(r3)
    return -1;
 8043bbc:	00bfffc4 	movi	r2,-1
  }
}
 8043bc0:	e037883a 	mov	sp,fp
 8043bc4:	dfc00117 	ldw	ra,4(sp)
 8043bc8:	df000017 	ldw	fp,0(sp)
 8043bcc:	dec00204 	addi	sp,sp,8
 8043bd0:	f800283a 	ret

08043bd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8043bd4:	defffe04 	addi	sp,sp,-8
 8043bd8:	df000115 	stw	fp,4(sp)
 8043bdc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8043be0:	e03fff15 	stw	zero,-4(fp)
 8043be4:	00000506 	br	8043bfc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8043be8:	e0bfff17 	ldw	r2,-4(fp)
 8043bec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8043bf0:	e0bfff17 	ldw	r2,-4(fp)
 8043bf4:	10800804 	addi	r2,r2,32
 8043bf8:	e0bfff15 	stw	r2,-4(fp)
 8043bfc:	e0bfff17 	ldw	r2,-4(fp)
 8043c00:	10820030 	cmpltui	r2,r2,2048
 8043c04:	103ff81e 	bne	r2,zero,8043be8 <__alt_data_end+0xfffc3be8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8043c08:	0001883a 	nop
 8043c0c:	e037883a 	mov	sp,fp
 8043c10:	df000017 	ldw	fp,0(sp)
 8043c14:	dec00104 	addi	sp,sp,4
 8043c18:	f800283a 	ret

08043c1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8043c1c:	defffc04 	addi	sp,sp,-16
 8043c20:	df000315 	stw	fp,12(sp)
 8043c24:	df000304 	addi	fp,sp,12
 8043c28:	e13ffd15 	stw	r4,-12(fp)
 8043c2c:	e17ffe15 	stw	r5,-8(fp)
 8043c30:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8043c34:	e0bfff17 	ldw	r2,-4(fp)
}
 8043c38:	e037883a 	mov	sp,fp
 8043c3c:	df000017 	ldw	fp,0(sp)
 8043c40:	dec00104 	addi	sp,sp,4
 8043c44:	f800283a 	ret

08043c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8043c48:	defffe04 	addi	sp,sp,-8
 8043c4c:	dfc00115 	stw	ra,4(sp)
 8043c50:	df000015 	stw	fp,0(sp)
 8043c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8043c58:	d0a01017 	ldw	r2,-32704(gp)
 8043c5c:	10000326 	beq	r2,zero,8043c6c <alt_get_errno+0x24>
 8043c60:	d0a01017 	ldw	r2,-32704(gp)
 8043c64:	103ee83a 	callr	r2
 8043c68:	00000106 	br	8043c70 <alt_get_errno+0x28>
 8043c6c:	d0a6f004 	addi	r2,gp,-25664
}
 8043c70:	e037883a 	mov	sp,fp
 8043c74:	dfc00117 	ldw	ra,4(sp)
 8043c78:	df000017 	ldw	fp,0(sp)
 8043c7c:	dec00204 	addi	sp,sp,8
 8043c80:	f800283a 	ret

08043c84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8043c84:	defffa04 	addi	sp,sp,-24
 8043c88:	dfc00515 	stw	ra,20(sp)
 8043c8c:	df000415 	stw	fp,16(sp)
 8043c90:	df000404 	addi	fp,sp,16
 8043c94:	e13ffe15 	stw	r4,-8(fp)
 8043c98:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8043c9c:	e0bffe17 	ldw	r2,-8(fp)
 8043ca0:	10000326 	beq	r2,zero,8043cb0 <alt_dev_llist_insert+0x2c>
 8043ca4:	e0bffe17 	ldw	r2,-8(fp)
 8043ca8:	10800217 	ldw	r2,8(r2)
 8043cac:	1000061e 	bne	r2,zero,8043cc8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8043cb0:	8043c480 	call	8043c48 <alt_get_errno>
 8043cb4:	1007883a 	mov	r3,r2
 8043cb8:	00800584 	movi	r2,22
 8043cbc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8043cc0:	00bffa84 	movi	r2,-22
 8043cc4:	00001306 	br	8043d14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8043cc8:	e0bffe17 	ldw	r2,-8(fp)
 8043ccc:	e0ffff17 	ldw	r3,-4(fp)
 8043cd0:	e0fffc15 	stw	r3,-16(fp)
 8043cd4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8043cd8:	e0bffd17 	ldw	r2,-12(fp)
 8043cdc:	e0fffc17 	ldw	r3,-16(fp)
 8043ce0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8043ce4:	e0bffc17 	ldw	r2,-16(fp)
 8043ce8:	10c00017 	ldw	r3,0(r2)
 8043cec:	e0bffd17 	ldw	r2,-12(fp)
 8043cf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8043cf4:	e0bffc17 	ldw	r2,-16(fp)
 8043cf8:	10800017 	ldw	r2,0(r2)
 8043cfc:	e0fffd17 	ldw	r3,-12(fp)
 8043d00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8043d04:	e0bffc17 	ldw	r2,-16(fp)
 8043d08:	e0fffd17 	ldw	r3,-12(fp)
 8043d0c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8043d10:	0005883a 	mov	r2,zero
}
 8043d14:	e037883a 	mov	sp,fp
 8043d18:	dfc00117 	ldw	ra,4(sp)
 8043d1c:	df000017 	ldw	fp,0(sp)
 8043d20:	dec00204 	addi	sp,sp,8
 8043d24:	f800283a 	ret

08043d28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8043d28:	defffd04 	addi	sp,sp,-12
 8043d2c:	dfc00215 	stw	ra,8(sp)
 8043d30:	df000115 	stw	fp,4(sp)
 8043d34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8043d38:	00820134 	movhi	r2,2052
 8043d3c:	109cad04 	addi	r2,r2,29364
 8043d40:	e0bfff15 	stw	r2,-4(fp)
 8043d44:	00000606 	br	8043d60 <_do_ctors+0x38>
        (*ctor) (); 
 8043d48:	e0bfff17 	ldw	r2,-4(fp)
 8043d4c:	10800017 	ldw	r2,0(r2)
 8043d50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8043d54:	e0bfff17 	ldw	r2,-4(fp)
 8043d58:	10bfff04 	addi	r2,r2,-4
 8043d5c:	e0bfff15 	stw	r2,-4(fp)
 8043d60:	e0ffff17 	ldw	r3,-4(fp)
 8043d64:	00820134 	movhi	r2,2052
 8043d68:	109cae04 	addi	r2,r2,29368
 8043d6c:	18bff62e 	bgeu	r3,r2,8043d48 <__alt_data_end+0xfffc3d48>
        (*ctor) (); 
}
 8043d70:	0001883a 	nop
 8043d74:	e037883a 	mov	sp,fp
 8043d78:	dfc00117 	ldw	ra,4(sp)
 8043d7c:	df000017 	ldw	fp,0(sp)
 8043d80:	dec00204 	addi	sp,sp,8
 8043d84:	f800283a 	ret

08043d88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8043d88:	defffd04 	addi	sp,sp,-12
 8043d8c:	dfc00215 	stw	ra,8(sp)
 8043d90:	df000115 	stw	fp,4(sp)
 8043d94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8043d98:	00820134 	movhi	r2,2052
 8043d9c:	109cad04 	addi	r2,r2,29364
 8043da0:	e0bfff15 	stw	r2,-4(fp)
 8043da4:	00000606 	br	8043dc0 <_do_dtors+0x38>
        (*dtor) (); 
 8043da8:	e0bfff17 	ldw	r2,-4(fp)
 8043dac:	10800017 	ldw	r2,0(r2)
 8043db0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8043db4:	e0bfff17 	ldw	r2,-4(fp)
 8043db8:	10bfff04 	addi	r2,r2,-4
 8043dbc:	e0bfff15 	stw	r2,-4(fp)
 8043dc0:	e0ffff17 	ldw	r3,-4(fp)
 8043dc4:	00820134 	movhi	r2,2052
 8043dc8:	109cae04 	addi	r2,r2,29368
 8043dcc:	18bff62e 	bgeu	r3,r2,8043da8 <__alt_data_end+0xfffc3da8>
        (*dtor) (); 
}
 8043dd0:	0001883a 	nop
 8043dd4:	e037883a 	mov	sp,fp
 8043dd8:	dfc00117 	ldw	ra,4(sp)
 8043ddc:	df000017 	ldw	fp,0(sp)
 8043de0:	dec00204 	addi	sp,sp,8
 8043de4:	f800283a 	ret

08043de8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8043de8:	defffa04 	addi	sp,sp,-24
 8043dec:	dfc00515 	stw	ra,20(sp)
 8043df0:	df000415 	stw	fp,16(sp)
 8043df4:	df000404 	addi	fp,sp,16
 8043df8:	e13ffe15 	stw	r4,-8(fp)
 8043dfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8043e00:	e0bfff17 	ldw	r2,-4(fp)
 8043e04:	10800017 	ldw	r2,0(r2)
 8043e08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8043e0c:	e13ffe17 	ldw	r4,-8(fp)
 8043e10:	8044abc0 	call	8044abc <strlen>
 8043e14:	10800044 	addi	r2,r2,1
 8043e18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8043e1c:	00000d06 	br	8043e54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8043e20:	e0bffc17 	ldw	r2,-16(fp)
 8043e24:	10800217 	ldw	r2,8(r2)
 8043e28:	e0fffd17 	ldw	r3,-12(fp)
 8043e2c:	180d883a 	mov	r6,r3
 8043e30:	e17ffe17 	ldw	r5,-8(fp)
 8043e34:	1009883a 	mov	r4,r2
 8043e38:	80447900 	call	8044790 <memcmp>
 8043e3c:	1000021e 	bne	r2,zero,8043e48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8043e40:	e0bffc17 	ldw	r2,-16(fp)
 8043e44:	00000706 	br	8043e64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8043e48:	e0bffc17 	ldw	r2,-16(fp)
 8043e4c:	10800017 	ldw	r2,0(r2)
 8043e50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8043e54:	e0fffc17 	ldw	r3,-16(fp)
 8043e58:	e0bfff17 	ldw	r2,-4(fp)
 8043e5c:	18bff01e 	bne	r3,r2,8043e20 <__alt_data_end+0xfffc3e20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8043e60:	0005883a 	mov	r2,zero
}
 8043e64:	e037883a 	mov	sp,fp
 8043e68:	dfc00117 	ldw	ra,4(sp)
 8043e6c:	df000017 	ldw	fp,0(sp)
 8043e70:	dec00204 	addi	sp,sp,8
 8043e74:	f800283a 	ret

08043e78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8043e78:	defffe04 	addi	sp,sp,-8
 8043e7c:	dfc00115 	stw	ra,4(sp)
 8043e80:	df000015 	stw	fp,0(sp)
 8043e84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8043e88:	01440004 	movi	r5,4096
 8043e8c:	0009883a 	mov	r4,zero
 8043e90:	80446b40 	call	80446b4 <alt_icache_flush>
#endif
}
 8043e94:	0001883a 	nop
 8043e98:	e037883a 	mov	sp,fp
 8043e9c:	dfc00117 	ldw	ra,4(sp)
 8043ea0:	df000017 	ldw	fp,0(sp)
 8043ea4:	dec00204 	addi	sp,sp,8
 8043ea8:	f800283a 	ret

08043eac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8043eac:	defffe04 	addi	sp,sp,-8
 8043eb0:	df000115 	stw	fp,4(sp)
 8043eb4:	df000104 	addi	fp,sp,4
 8043eb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8043ebc:	e0bfff17 	ldw	r2,-4(fp)
 8043ec0:	10bffe84 	addi	r2,r2,-6
 8043ec4:	10c00428 	cmpgeui	r3,r2,16
 8043ec8:	18001a1e 	bne	r3,zero,8043f34 <alt_exception_cause_generated_bad_addr+0x88>
 8043ecc:	100690ba 	slli	r3,r2,2
 8043ed0:	00820134 	movhi	r2,2052
 8043ed4:	108fb904 	addi	r2,r2,16100
 8043ed8:	1885883a 	add	r2,r3,r2
 8043edc:	10800017 	ldw	r2,0(r2)
 8043ee0:	1000683a 	jmp	r2
 8043ee4:	08043f24 	muli	zero,at,4348
 8043ee8:	08043f24 	muli	zero,at,4348
 8043eec:	08043f34 	orhi	zero,at,4348
 8043ef0:	08043f34 	orhi	zero,at,4348
 8043ef4:	08043f34 	orhi	zero,at,4348
 8043ef8:	08043f24 	muli	zero,at,4348
 8043efc:	08043f2c 	andhi	zero,at,4348
 8043f00:	08043f34 	orhi	zero,at,4348
 8043f04:	08043f24 	muli	zero,at,4348
 8043f08:	08043f24 	muli	zero,at,4348
 8043f0c:	08043f34 	orhi	zero,at,4348
 8043f10:	08043f24 	muli	zero,at,4348
 8043f14:	08043f2c 	andhi	zero,at,4348
 8043f18:	08043f34 	orhi	zero,at,4348
 8043f1c:	08043f34 	orhi	zero,at,4348
 8043f20:	08043f24 	muli	zero,at,4348
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8043f24:	00800044 	movi	r2,1
 8043f28:	00000306 	br	8043f38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8043f2c:	0005883a 	mov	r2,zero
 8043f30:	00000106 	br	8043f38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8043f34:	0005883a 	mov	r2,zero
  }
}
 8043f38:	e037883a 	mov	sp,fp
 8043f3c:	df000017 	ldw	fp,0(sp)
 8043f40:	dec00104 	addi	sp,sp,4
 8043f44:	f800283a 	ret

08043f48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8043f48:	defff904 	addi	sp,sp,-28
 8043f4c:	dfc00615 	stw	ra,24(sp)
 8043f50:	df000515 	stw	fp,20(sp)
 8043f54:	df000504 	addi	fp,sp,20
 8043f58:	e13ffc15 	stw	r4,-16(fp)
 8043f5c:	e17ffd15 	stw	r5,-12(fp)
 8043f60:	e1bffe15 	stw	r6,-8(fp)
 8043f64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8043f68:	e1bfff17 	ldw	r6,-4(fp)
 8043f6c:	e17ffe17 	ldw	r5,-8(fp)
 8043f70:	e13ffd17 	ldw	r4,-12(fp)
 8043f74:	80441880 	call	8044188 <open>
 8043f78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8043f7c:	e0bffb17 	ldw	r2,-20(fp)
 8043f80:	10001c16 	blt	r2,zero,8043ff4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8043f84:	00820174 	movhi	r2,2053
 8043f88:	10a27f04 	addi	r2,r2,-30212
 8043f8c:	e0fffb17 	ldw	r3,-20(fp)
 8043f90:	18c00324 	muli	r3,r3,12
 8043f94:	10c5883a 	add	r2,r2,r3
 8043f98:	10c00017 	ldw	r3,0(r2)
 8043f9c:	e0bffc17 	ldw	r2,-16(fp)
 8043fa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8043fa4:	00820174 	movhi	r2,2053
 8043fa8:	10a27f04 	addi	r2,r2,-30212
 8043fac:	e0fffb17 	ldw	r3,-20(fp)
 8043fb0:	18c00324 	muli	r3,r3,12
 8043fb4:	10c5883a 	add	r2,r2,r3
 8043fb8:	10800104 	addi	r2,r2,4
 8043fbc:	10c00017 	ldw	r3,0(r2)
 8043fc0:	e0bffc17 	ldw	r2,-16(fp)
 8043fc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8043fc8:	00820174 	movhi	r2,2053
 8043fcc:	10a27f04 	addi	r2,r2,-30212
 8043fd0:	e0fffb17 	ldw	r3,-20(fp)
 8043fd4:	18c00324 	muli	r3,r3,12
 8043fd8:	10c5883a 	add	r2,r2,r3
 8043fdc:	10800204 	addi	r2,r2,8
 8043fe0:	10c00017 	ldw	r3,0(r2)
 8043fe4:	e0bffc17 	ldw	r2,-16(fp)
 8043fe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8043fec:	e13ffb17 	ldw	r4,-20(fp)
 8043ff0:	80442dc0 	call	80442dc <alt_release_fd>
  }
} 
 8043ff4:	0001883a 	nop
 8043ff8:	e037883a 	mov	sp,fp
 8043ffc:	dfc00117 	ldw	ra,4(sp)
 8044000:	df000017 	ldw	fp,0(sp)
 8044004:	dec00204 	addi	sp,sp,8
 8044008:	f800283a 	ret

0804400c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 804400c:	defffb04 	addi	sp,sp,-20
 8044010:	dfc00415 	stw	ra,16(sp)
 8044014:	df000315 	stw	fp,12(sp)
 8044018:	df000304 	addi	fp,sp,12
 804401c:	e13ffd15 	stw	r4,-12(fp)
 8044020:	e17ffe15 	stw	r5,-8(fp)
 8044024:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8044028:	01c07fc4 	movi	r7,511
 804402c:	01800044 	movi	r6,1
 8044030:	e17ffd17 	ldw	r5,-12(fp)
 8044034:	01020174 	movhi	r4,2053
 8044038:	21228204 	addi	r4,r4,-30200
 804403c:	8043f480 	call	8043f48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8044040:	01c07fc4 	movi	r7,511
 8044044:	000d883a 	mov	r6,zero
 8044048:	e17ffe17 	ldw	r5,-8(fp)
 804404c:	01020174 	movhi	r4,2053
 8044050:	21227f04 	addi	r4,r4,-30212
 8044054:	8043f480 	call	8043f48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8044058:	01c07fc4 	movi	r7,511
 804405c:	01800044 	movi	r6,1
 8044060:	e17fff17 	ldw	r5,-4(fp)
 8044064:	01020174 	movhi	r4,2053
 8044068:	21228504 	addi	r4,r4,-30188
 804406c:	8043f480 	call	8043f48 <alt_open_fd>
}  
 8044070:	0001883a 	nop
 8044074:	e037883a 	mov	sp,fp
 8044078:	dfc00117 	ldw	ra,4(sp)
 804407c:	df000017 	ldw	fp,0(sp)
 8044080:	dec00204 	addi	sp,sp,8
 8044084:	f800283a 	ret

08044088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044088:	defffe04 	addi	sp,sp,-8
 804408c:	dfc00115 	stw	ra,4(sp)
 8044090:	df000015 	stw	fp,0(sp)
 8044094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044098:	d0a01017 	ldw	r2,-32704(gp)
 804409c:	10000326 	beq	r2,zero,80440ac <alt_get_errno+0x24>
 80440a0:	d0a01017 	ldw	r2,-32704(gp)
 80440a4:	103ee83a 	callr	r2
 80440a8:	00000106 	br	80440b0 <alt_get_errno+0x28>
 80440ac:	d0a6f004 	addi	r2,gp,-25664
}
 80440b0:	e037883a 	mov	sp,fp
 80440b4:	dfc00117 	ldw	ra,4(sp)
 80440b8:	df000017 	ldw	fp,0(sp)
 80440bc:	dec00204 	addi	sp,sp,8
 80440c0:	f800283a 	ret

080440c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80440c4:	defffd04 	addi	sp,sp,-12
 80440c8:	df000215 	stw	fp,8(sp)
 80440cc:	df000204 	addi	fp,sp,8
 80440d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80440d4:	e0bfff17 	ldw	r2,-4(fp)
 80440d8:	10800217 	ldw	r2,8(r2)
 80440dc:	10d00034 	orhi	r3,r2,16384
 80440e0:	e0bfff17 	ldw	r2,-4(fp)
 80440e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80440e8:	e03ffe15 	stw	zero,-8(fp)
 80440ec:	00001d06 	br	8044164 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80440f0:	00820174 	movhi	r2,2053
 80440f4:	10a27f04 	addi	r2,r2,-30212
 80440f8:	e0fffe17 	ldw	r3,-8(fp)
 80440fc:	18c00324 	muli	r3,r3,12
 8044100:	10c5883a 	add	r2,r2,r3
 8044104:	10c00017 	ldw	r3,0(r2)
 8044108:	e0bfff17 	ldw	r2,-4(fp)
 804410c:	10800017 	ldw	r2,0(r2)
 8044110:	1880111e 	bne	r3,r2,8044158 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8044114:	00820174 	movhi	r2,2053
 8044118:	10a27f04 	addi	r2,r2,-30212
 804411c:	e0fffe17 	ldw	r3,-8(fp)
 8044120:	18c00324 	muli	r3,r3,12
 8044124:	10c5883a 	add	r2,r2,r3
 8044128:	10800204 	addi	r2,r2,8
 804412c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8044130:	1000090e 	bge	r2,zero,8044158 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8044134:	e0bffe17 	ldw	r2,-8(fp)
 8044138:	10c00324 	muli	r3,r2,12
 804413c:	00820174 	movhi	r2,2053
 8044140:	10a27f04 	addi	r2,r2,-30212
 8044144:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8044148:	e0bfff17 	ldw	r2,-4(fp)
 804414c:	18800226 	beq	r3,r2,8044158 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8044150:	00bffcc4 	movi	r2,-13
 8044154:	00000806 	br	8044178 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8044158:	e0bffe17 	ldw	r2,-8(fp)
 804415c:	10800044 	addi	r2,r2,1
 8044160:	e0bffe15 	stw	r2,-8(fp)
 8044164:	d0a00f17 	ldw	r2,-32708(gp)
 8044168:	1007883a 	mov	r3,r2
 804416c:	e0bffe17 	ldw	r2,-8(fp)
 8044170:	18bfdf2e 	bgeu	r3,r2,80440f0 <__alt_data_end+0xfffc40f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8044174:	0005883a 	mov	r2,zero
}
 8044178:	e037883a 	mov	sp,fp
 804417c:	df000017 	ldw	fp,0(sp)
 8044180:	dec00104 	addi	sp,sp,4
 8044184:	f800283a 	ret

08044188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8044188:	defff604 	addi	sp,sp,-40
 804418c:	dfc00915 	stw	ra,36(sp)
 8044190:	df000815 	stw	fp,32(sp)
 8044194:	df000804 	addi	fp,sp,32
 8044198:	e13ffd15 	stw	r4,-12(fp)
 804419c:	e17ffe15 	stw	r5,-8(fp)
 80441a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80441a4:	00bfffc4 	movi	r2,-1
 80441a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80441ac:	00bffb44 	movi	r2,-19
 80441b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80441b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80441b8:	d1600d04 	addi	r5,gp,-32716
 80441bc:	e13ffd17 	ldw	r4,-12(fp)
 80441c0:	8043de80 	call	8043de8 <alt_find_dev>
 80441c4:	e0bff815 	stw	r2,-32(fp)
 80441c8:	e0bff817 	ldw	r2,-32(fp)
 80441cc:	1000051e 	bne	r2,zero,80441e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80441d0:	e13ffd17 	ldw	r4,-12(fp)
 80441d4:	80445080 	call	8044508 <alt_find_file>
 80441d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80441dc:	00800044 	movi	r2,1
 80441e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80441e4:	e0bff817 	ldw	r2,-32(fp)
 80441e8:	10002926 	beq	r2,zero,8044290 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80441ec:	e13ff817 	ldw	r4,-32(fp)
 80441f0:	80446100 	call	8044610 <alt_get_fd>
 80441f4:	e0bff915 	stw	r2,-28(fp)
 80441f8:	e0bff917 	ldw	r2,-28(fp)
 80441fc:	1000030e 	bge	r2,zero,804420c <open+0x84>
    {
      status = index;
 8044200:	e0bff917 	ldw	r2,-28(fp)
 8044204:	e0bffa15 	stw	r2,-24(fp)
 8044208:	00002306 	br	8044298 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 804420c:	e0bff917 	ldw	r2,-28(fp)
 8044210:	10c00324 	muli	r3,r2,12
 8044214:	00820174 	movhi	r2,2053
 8044218:	10a27f04 	addi	r2,r2,-30212
 804421c:	1885883a 	add	r2,r3,r2
 8044220:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8044224:	e0fffe17 	ldw	r3,-8(fp)
 8044228:	00900034 	movhi	r2,16384
 804422c:	10bfffc4 	addi	r2,r2,-1
 8044230:	1886703a 	and	r3,r3,r2
 8044234:	e0bffc17 	ldw	r2,-16(fp)
 8044238:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 804423c:	e0bffb17 	ldw	r2,-20(fp)
 8044240:	1000051e 	bne	r2,zero,8044258 <open+0xd0>
 8044244:	e13ffc17 	ldw	r4,-16(fp)
 8044248:	80440c40 	call	80440c4 <alt_file_locked>
 804424c:	e0bffa15 	stw	r2,-24(fp)
 8044250:	e0bffa17 	ldw	r2,-24(fp)
 8044254:	10001016 	blt	r2,zero,8044298 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8044258:	e0bff817 	ldw	r2,-32(fp)
 804425c:	10800317 	ldw	r2,12(r2)
 8044260:	10000826 	beq	r2,zero,8044284 <open+0xfc>
 8044264:	e0bff817 	ldw	r2,-32(fp)
 8044268:	10800317 	ldw	r2,12(r2)
 804426c:	e1ffff17 	ldw	r7,-4(fp)
 8044270:	e1bffe17 	ldw	r6,-8(fp)
 8044274:	e17ffd17 	ldw	r5,-12(fp)
 8044278:	e13ffc17 	ldw	r4,-16(fp)
 804427c:	103ee83a 	callr	r2
 8044280:	00000106 	br	8044288 <open+0x100>
 8044284:	0005883a 	mov	r2,zero
 8044288:	e0bffa15 	stw	r2,-24(fp)
 804428c:	00000206 	br	8044298 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8044290:	00bffb44 	movi	r2,-19
 8044294:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8044298:	e0bffa17 	ldw	r2,-24(fp)
 804429c:	1000090e 	bge	r2,zero,80442c4 <open+0x13c>
  {
    alt_release_fd (index);  
 80442a0:	e13ff917 	ldw	r4,-28(fp)
 80442a4:	80442dc0 	call	80442dc <alt_release_fd>
    ALT_ERRNO = -status;
 80442a8:	80440880 	call	8044088 <alt_get_errno>
 80442ac:	1007883a 	mov	r3,r2
 80442b0:	e0bffa17 	ldw	r2,-24(fp)
 80442b4:	0085c83a 	sub	r2,zero,r2
 80442b8:	18800015 	stw	r2,0(r3)
    return -1;
 80442bc:	00bfffc4 	movi	r2,-1
 80442c0:	00000106 	br	80442c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 80442c4:	e0bff917 	ldw	r2,-28(fp)
}
 80442c8:	e037883a 	mov	sp,fp
 80442cc:	dfc00117 	ldw	ra,4(sp)
 80442d0:	df000017 	ldw	fp,0(sp)
 80442d4:	dec00204 	addi	sp,sp,8
 80442d8:	f800283a 	ret

080442dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80442dc:	defffe04 	addi	sp,sp,-8
 80442e0:	df000115 	stw	fp,4(sp)
 80442e4:	df000104 	addi	fp,sp,4
 80442e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80442ec:	e0bfff17 	ldw	r2,-4(fp)
 80442f0:	108000d0 	cmplti	r2,r2,3
 80442f4:	10000d1e 	bne	r2,zero,804432c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80442f8:	00820174 	movhi	r2,2053
 80442fc:	10a27f04 	addi	r2,r2,-30212
 8044300:	e0ffff17 	ldw	r3,-4(fp)
 8044304:	18c00324 	muli	r3,r3,12
 8044308:	10c5883a 	add	r2,r2,r3
 804430c:	10800204 	addi	r2,r2,8
 8044310:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8044314:	00820174 	movhi	r2,2053
 8044318:	10a27f04 	addi	r2,r2,-30212
 804431c:	e0ffff17 	ldw	r3,-4(fp)
 8044320:	18c00324 	muli	r3,r3,12
 8044324:	10c5883a 	add	r2,r2,r3
 8044328:	10000015 	stw	zero,0(r2)
  }
}
 804432c:	0001883a 	nop
 8044330:	e037883a 	mov	sp,fp
 8044334:	df000017 	ldw	fp,0(sp)
 8044338:	dec00104 	addi	sp,sp,4
 804433c:	f800283a 	ret

08044340 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8044340:	defffa04 	addi	sp,sp,-24
 8044344:	df000515 	stw	fp,20(sp)
 8044348:	df000504 	addi	fp,sp,20
 804434c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8044350:	0005303a 	rdctl	r2,status
 8044354:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044358:	e0fffc17 	ldw	r3,-16(fp)
 804435c:	00bfff84 	movi	r2,-2
 8044360:	1884703a 	and	r2,r3,r2
 8044364:	1001703a 	wrctl	status,r2
  
  return context;
 8044368:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 804436c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8044370:	e0bfff17 	ldw	r2,-4(fp)
 8044374:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8044378:	e0bffd17 	ldw	r2,-12(fp)
 804437c:	10800017 	ldw	r2,0(r2)
 8044380:	e0fffd17 	ldw	r3,-12(fp)
 8044384:	18c00117 	ldw	r3,4(r3)
 8044388:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 804438c:	e0bffd17 	ldw	r2,-12(fp)
 8044390:	10800117 	ldw	r2,4(r2)
 8044394:	e0fffd17 	ldw	r3,-12(fp)
 8044398:	18c00017 	ldw	r3,0(r3)
 804439c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80443a0:	e0bffd17 	ldw	r2,-12(fp)
 80443a4:	e0fffd17 	ldw	r3,-12(fp)
 80443a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80443ac:	e0bffd17 	ldw	r2,-12(fp)
 80443b0:	e0fffd17 	ldw	r3,-12(fp)
 80443b4:	10c00015 	stw	r3,0(r2)
 80443b8:	e0bffb17 	ldw	r2,-20(fp)
 80443bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80443c0:	e0bffe17 	ldw	r2,-8(fp)
 80443c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80443c8:	0001883a 	nop
 80443cc:	e037883a 	mov	sp,fp
 80443d0:	df000017 	ldw	fp,0(sp)
 80443d4:	dec00104 	addi	sp,sp,4
 80443d8:	f800283a 	ret

080443dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80443dc:	defffb04 	addi	sp,sp,-20
 80443e0:	dfc00415 	stw	ra,16(sp)
 80443e4:	df000315 	stw	fp,12(sp)
 80443e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80443ec:	d0a01117 	ldw	r2,-32700(gp)
 80443f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80443f4:	d0a6ef17 	ldw	r2,-25668(gp)
 80443f8:	10800044 	addi	r2,r2,1
 80443fc:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8044400:	00002e06 	br	80444bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8044404:	e0bffd17 	ldw	r2,-12(fp)
 8044408:	10800017 	ldw	r2,0(r2)
 804440c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8044410:	e0bffd17 	ldw	r2,-12(fp)
 8044414:	10800403 	ldbu	r2,16(r2)
 8044418:	10803fcc 	andi	r2,r2,255
 804441c:	10000426 	beq	r2,zero,8044430 <alt_tick+0x54>
 8044420:	d0a6ef17 	ldw	r2,-25668(gp)
 8044424:	1000021e 	bne	r2,zero,8044430 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8044428:	e0bffd17 	ldw	r2,-12(fp)
 804442c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8044430:	e0bffd17 	ldw	r2,-12(fp)
 8044434:	10800217 	ldw	r2,8(r2)
 8044438:	d0e6ef17 	ldw	r3,-25668(gp)
 804443c:	18801d36 	bltu	r3,r2,80444b4 <alt_tick+0xd8>
 8044440:	e0bffd17 	ldw	r2,-12(fp)
 8044444:	10800403 	ldbu	r2,16(r2)
 8044448:	10803fcc 	andi	r2,r2,255
 804444c:	1000191e 	bne	r2,zero,80444b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8044450:	e0bffd17 	ldw	r2,-12(fp)
 8044454:	10800317 	ldw	r2,12(r2)
 8044458:	e0fffd17 	ldw	r3,-12(fp)
 804445c:	18c00517 	ldw	r3,20(r3)
 8044460:	1809883a 	mov	r4,r3
 8044464:	103ee83a 	callr	r2
 8044468:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 804446c:	e0bfff17 	ldw	r2,-4(fp)
 8044470:	1000031e 	bne	r2,zero,8044480 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8044474:	e13ffd17 	ldw	r4,-12(fp)
 8044478:	80443400 	call	8044340 <alt_alarm_stop>
 804447c:	00000d06 	br	80444b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8044480:	e0bffd17 	ldw	r2,-12(fp)
 8044484:	10c00217 	ldw	r3,8(r2)
 8044488:	e0bfff17 	ldw	r2,-4(fp)
 804448c:	1887883a 	add	r3,r3,r2
 8044490:	e0bffd17 	ldw	r2,-12(fp)
 8044494:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8044498:	e0bffd17 	ldw	r2,-12(fp)
 804449c:	10c00217 	ldw	r3,8(r2)
 80444a0:	d0a6ef17 	ldw	r2,-25668(gp)
 80444a4:	1880032e 	bgeu	r3,r2,80444b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80444a8:	e0bffd17 	ldw	r2,-12(fp)
 80444ac:	00c00044 	movi	r3,1
 80444b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80444b4:	e0bffe17 	ldw	r2,-8(fp)
 80444b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80444bc:	e0fffd17 	ldw	r3,-12(fp)
 80444c0:	d0a01104 	addi	r2,gp,-32700
 80444c4:	18bfcf1e 	bne	r3,r2,8044404 <__alt_data_end+0xfffc4404>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80444c8:	0001883a 	nop
}
 80444cc:	0001883a 	nop
 80444d0:	e037883a 	mov	sp,fp
 80444d4:	dfc00117 	ldw	ra,4(sp)
 80444d8:	df000017 	ldw	fp,0(sp)
 80444dc:	dec00204 	addi	sp,sp,8
 80444e0:	f800283a 	ret

080444e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80444e4:	deffff04 	addi	sp,sp,-4
 80444e8:	df000015 	stw	fp,0(sp)
 80444ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80444f0:	000170fa 	wrctl	ienable,zero
}
 80444f4:	0001883a 	nop
 80444f8:	e037883a 	mov	sp,fp
 80444fc:	df000017 	ldw	fp,0(sp)
 8044500:	dec00104 	addi	sp,sp,4
 8044504:	f800283a 	ret

08044508 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8044508:	defffb04 	addi	sp,sp,-20
 804450c:	dfc00415 	stw	ra,16(sp)
 8044510:	df000315 	stw	fp,12(sp)
 8044514:	df000304 	addi	fp,sp,12
 8044518:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 804451c:	d0a00b17 	ldw	r2,-32724(gp)
 8044520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8044524:	00003106 	br	80445ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8044528:	e0bffd17 	ldw	r2,-12(fp)
 804452c:	10800217 	ldw	r2,8(r2)
 8044530:	1009883a 	mov	r4,r2
 8044534:	8044abc0 	call	8044abc <strlen>
 8044538:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 804453c:	e0bffd17 	ldw	r2,-12(fp)
 8044540:	10c00217 	ldw	r3,8(r2)
 8044544:	e0bffe17 	ldw	r2,-8(fp)
 8044548:	10bfffc4 	addi	r2,r2,-1
 804454c:	1885883a 	add	r2,r3,r2
 8044550:	10800003 	ldbu	r2,0(r2)
 8044554:	10803fcc 	andi	r2,r2,255
 8044558:	1080201c 	xori	r2,r2,128
 804455c:	10bfe004 	addi	r2,r2,-128
 8044560:	10800bd8 	cmpnei	r2,r2,47
 8044564:	1000031e 	bne	r2,zero,8044574 <alt_find_file+0x6c>
    {
      len -= 1;
 8044568:	e0bffe17 	ldw	r2,-8(fp)
 804456c:	10bfffc4 	addi	r2,r2,-1
 8044570:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8044574:	e0bffe17 	ldw	r2,-8(fp)
 8044578:	e0ffff17 	ldw	r3,-4(fp)
 804457c:	1885883a 	add	r2,r3,r2
 8044580:	10800003 	ldbu	r2,0(r2)
 8044584:	10803fcc 	andi	r2,r2,255
 8044588:	1080201c 	xori	r2,r2,128
 804458c:	10bfe004 	addi	r2,r2,-128
 8044590:	10800be0 	cmpeqi	r2,r2,47
 8044594:	1000081e 	bne	r2,zero,80445b8 <alt_find_file+0xb0>
 8044598:	e0bffe17 	ldw	r2,-8(fp)
 804459c:	e0ffff17 	ldw	r3,-4(fp)
 80445a0:	1885883a 	add	r2,r3,r2
 80445a4:	10800003 	ldbu	r2,0(r2)
 80445a8:	10803fcc 	andi	r2,r2,255
 80445ac:	1080201c 	xori	r2,r2,128
 80445b0:	10bfe004 	addi	r2,r2,-128
 80445b4:	10000a1e 	bne	r2,zero,80445e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80445b8:	e0bffd17 	ldw	r2,-12(fp)
 80445bc:	10800217 	ldw	r2,8(r2)
 80445c0:	e0fffe17 	ldw	r3,-8(fp)
 80445c4:	180d883a 	mov	r6,r3
 80445c8:	e17fff17 	ldw	r5,-4(fp)
 80445cc:	1009883a 	mov	r4,r2
 80445d0:	80447900 	call	8044790 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80445d4:	1000021e 	bne	r2,zero,80445e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80445d8:	e0bffd17 	ldw	r2,-12(fp)
 80445dc:	00000706 	br	80445fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80445e0:	e0bffd17 	ldw	r2,-12(fp)
 80445e4:	10800017 	ldw	r2,0(r2)
 80445e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80445ec:	e0fffd17 	ldw	r3,-12(fp)
 80445f0:	d0a00b04 	addi	r2,gp,-32724
 80445f4:	18bfcc1e 	bne	r3,r2,8044528 <__alt_data_end+0xfffc4528>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80445f8:	0005883a 	mov	r2,zero
}
 80445fc:	e037883a 	mov	sp,fp
 8044600:	dfc00117 	ldw	ra,4(sp)
 8044604:	df000017 	ldw	fp,0(sp)
 8044608:	dec00204 	addi	sp,sp,8
 804460c:	f800283a 	ret

08044610 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8044610:	defffc04 	addi	sp,sp,-16
 8044614:	df000315 	stw	fp,12(sp)
 8044618:	df000304 	addi	fp,sp,12
 804461c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8044620:	00bffa04 	movi	r2,-24
 8044624:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8044628:	e03ffd15 	stw	zero,-12(fp)
 804462c:	00001906 	br	8044694 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8044630:	00820174 	movhi	r2,2053
 8044634:	10a27f04 	addi	r2,r2,-30212
 8044638:	e0fffd17 	ldw	r3,-12(fp)
 804463c:	18c00324 	muli	r3,r3,12
 8044640:	10c5883a 	add	r2,r2,r3
 8044644:	10800017 	ldw	r2,0(r2)
 8044648:	10000f1e 	bne	r2,zero,8044688 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 804464c:	00820174 	movhi	r2,2053
 8044650:	10a27f04 	addi	r2,r2,-30212
 8044654:	e0fffd17 	ldw	r3,-12(fp)
 8044658:	18c00324 	muli	r3,r3,12
 804465c:	10c5883a 	add	r2,r2,r3
 8044660:	e0ffff17 	ldw	r3,-4(fp)
 8044664:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8044668:	d0e00f17 	ldw	r3,-32708(gp)
 804466c:	e0bffd17 	ldw	r2,-12(fp)
 8044670:	1880020e 	bge	r3,r2,804467c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8044674:	e0bffd17 	ldw	r2,-12(fp)
 8044678:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 804467c:	e0bffd17 	ldw	r2,-12(fp)
 8044680:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8044684:	00000606 	br	80446a0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8044688:	e0bffd17 	ldw	r2,-12(fp)
 804468c:	10800044 	addi	r2,r2,1
 8044690:	e0bffd15 	stw	r2,-12(fp)
 8044694:	e0bffd17 	ldw	r2,-12(fp)
 8044698:	10800810 	cmplti	r2,r2,32
 804469c:	103fe41e 	bne	r2,zero,8044630 <__alt_data_end+0xfffc4630>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80446a0:	e0bffe17 	ldw	r2,-8(fp)
}
 80446a4:	e037883a 	mov	sp,fp
 80446a8:	df000017 	ldw	fp,0(sp)
 80446ac:	dec00104 	addi	sp,sp,4
 80446b0:	f800283a 	ret

080446b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80446b4:	defffb04 	addi	sp,sp,-20
 80446b8:	df000415 	stw	fp,16(sp)
 80446bc:	df000404 	addi	fp,sp,16
 80446c0:	e13ffe15 	stw	r4,-8(fp)
 80446c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80446c8:	e0bfff17 	ldw	r2,-4(fp)
 80446cc:	10840070 	cmpltui	r2,r2,4097
 80446d0:	1000021e 	bne	r2,zero,80446dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80446d4:	00840004 	movi	r2,4096
 80446d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80446dc:	e0fffe17 	ldw	r3,-8(fp)
 80446e0:	e0bfff17 	ldw	r2,-4(fp)
 80446e4:	1885883a 	add	r2,r3,r2
 80446e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80446ec:	e0bffe17 	ldw	r2,-8(fp)
 80446f0:	e0bffc15 	stw	r2,-16(fp)
 80446f4:	00000506 	br	804470c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80446f8:	e0bffc17 	ldw	r2,-16(fp)
 80446fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8044700:	e0bffc17 	ldw	r2,-16(fp)
 8044704:	10800804 	addi	r2,r2,32
 8044708:	e0bffc15 	stw	r2,-16(fp)
 804470c:	e0fffc17 	ldw	r3,-16(fp)
 8044710:	e0bffd17 	ldw	r2,-12(fp)
 8044714:	18bff836 	bltu	r3,r2,80446f8 <__alt_data_end+0xfffc46f8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8044718:	e0bffe17 	ldw	r2,-8(fp)
 804471c:	108007cc 	andi	r2,r2,31
 8044720:	10000226 	beq	r2,zero,804472c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8044724:	e0bffc17 	ldw	r2,-16(fp)
 8044728:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 804472c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8044730:	0001883a 	nop
 8044734:	e037883a 	mov	sp,fp
 8044738:	df000017 	ldw	fp,0(sp)
 804473c:	dec00104 	addi	sp,sp,4
 8044740:	f800283a 	ret

08044744 <atexit>:
 8044744:	200b883a 	mov	r5,r4
 8044748:	000f883a 	mov	r7,zero
 804474c:	000d883a 	mov	r6,zero
 8044750:	0009883a 	mov	r4,zero
 8044754:	8044e001 	jmpi	8044e00 <__register_exitproc>

08044758 <exit>:
 8044758:	defffe04 	addi	sp,sp,-8
 804475c:	000b883a 	mov	r5,zero
 8044760:	dc000015 	stw	r16,0(sp)
 8044764:	dfc00115 	stw	ra,4(sp)
 8044768:	2021883a 	mov	r16,r4
 804476c:	8044f180 	call	8044f18 <__call_exitprocs>
 8044770:	00820174 	movhi	r2,2053
 8044774:	10a3e904 	addi	r2,r2,-28764
 8044778:	11000017 	ldw	r4,0(r2)
 804477c:	20800f17 	ldw	r2,60(r4)
 8044780:	10000126 	beq	r2,zero,8044788 <exit+0x30>
 8044784:	103ee83a 	callr	r2
 8044788:	8009883a 	mov	r4,r16
 804478c:	8046c440 	call	8046c44 <_exit>

08044790 <memcmp>:
 8044790:	01c000c4 	movi	r7,3
 8044794:	3980192e 	bgeu	r7,r6,80447fc <memcmp+0x6c>
 8044798:	2144b03a 	or	r2,r4,r5
 804479c:	11c4703a 	and	r2,r2,r7
 80447a0:	10000f26 	beq	r2,zero,80447e0 <memcmp+0x50>
 80447a4:	20800003 	ldbu	r2,0(r4)
 80447a8:	28c00003 	ldbu	r3,0(r5)
 80447ac:	10c0151e 	bne	r2,r3,8044804 <memcmp+0x74>
 80447b0:	31bfff84 	addi	r6,r6,-2
 80447b4:	01ffffc4 	movi	r7,-1
 80447b8:	00000406 	br	80447cc <memcmp+0x3c>
 80447bc:	20800003 	ldbu	r2,0(r4)
 80447c0:	28c00003 	ldbu	r3,0(r5)
 80447c4:	31bfffc4 	addi	r6,r6,-1
 80447c8:	10c00e1e 	bne	r2,r3,8044804 <memcmp+0x74>
 80447cc:	21000044 	addi	r4,r4,1
 80447d0:	29400044 	addi	r5,r5,1
 80447d4:	31fff91e 	bne	r6,r7,80447bc <__alt_data_end+0xfffc47bc>
 80447d8:	0005883a 	mov	r2,zero
 80447dc:	f800283a 	ret
 80447e0:	20c00017 	ldw	r3,0(r4)
 80447e4:	28800017 	ldw	r2,0(r5)
 80447e8:	18bfee1e 	bne	r3,r2,80447a4 <__alt_data_end+0xfffc47a4>
 80447ec:	31bfff04 	addi	r6,r6,-4
 80447f0:	21000104 	addi	r4,r4,4
 80447f4:	29400104 	addi	r5,r5,4
 80447f8:	39bff936 	bltu	r7,r6,80447e0 <__alt_data_end+0xfffc47e0>
 80447fc:	303fe91e 	bne	r6,zero,80447a4 <__alt_data_end+0xfffc47a4>
 8044800:	003ff506 	br	80447d8 <__alt_data_end+0xfffc47d8>
 8044804:	10c5c83a 	sub	r2,r2,r3
 8044808:	f800283a 	ret

0804480c <memcpy>:
 804480c:	defffd04 	addi	sp,sp,-12
 8044810:	dfc00215 	stw	ra,8(sp)
 8044814:	dc400115 	stw	r17,4(sp)
 8044818:	dc000015 	stw	r16,0(sp)
 804481c:	00c003c4 	movi	r3,15
 8044820:	2005883a 	mov	r2,r4
 8044824:	1980452e 	bgeu	r3,r6,804493c <memcpy+0x130>
 8044828:	2906b03a 	or	r3,r5,r4
 804482c:	18c000cc 	andi	r3,r3,3
 8044830:	1800441e 	bne	r3,zero,8044944 <memcpy+0x138>
 8044834:	347ffc04 	addi	r17,r6,-16
 8044838:	8822d13a 	srli	r17,r17,4
 804483c:	28c00104 	addi	r3,r5,4
 8044840:	23400104 	addi	r13,r4,4
 8044844:	8820913a 	slli	r16,r17,4
 8044848:	2b000204 	addi	r12,r5,8
 804484c:	22c00204 	addi	r11,r4,8
 8044850:	84000504 	addi	r16,r16,20
 8044854:	2a800304 	addi	r10,r5,12
 8044858:	22400304 	addi	r9,r4,12
 804485c:	2c21883a 	add	r16,r5,r16
 8044860:	2811883a 	mov	r8,r5
 8044864:	200f883a 	mov	r7,r4
 8044868:	41000017 	ldw	r4,0(r8)
 804486c:	1fc00017 	ldw	ra,0(r3)
 8044870:	63c00017 	ldw	r15,0(r12)
 8044874:	39000015 	stw	r4,0(r7)
 8044878:	53800017 	ldw	r14,0(r10)
 804487c:	6fc00015 	stw	ra,0(r13)
 8044880:	5bc00015 	stw	r15,0(r11)
 8044884:	4b800015 	stw	r14,0(r9)
 8044888:	18c00404 	addi	r3,r3,16
 804488c:	39c00404 	addi	r7,r7,16
 8044890:	42000404 	addi	r8,r8,16
 8044894:	6b400404 	addi	r13,r13,16
 8044898:	63000404 	addi	r12,r12,16
 804489c:	5ac00404 	addi	r11,r11,16
 80448a0:	52800404 	addi	r10,r10,16
 80448a4:	4a400404 	addi	r9,r9,16
 80448a8:	1c3fef1e 	bne	r3,r16,8044868 <__alt_data_end+0xfffc4868>
 80448ac:	89c00044 	addi	r7,r17,1
 80448b0:	380e913a 	slli	r7,r7,4
 80448b4:	310003cc 	andi	r4,r6,15
 80448b8:	02c000c4 	movi	r11,3
 80448bc:	11c7883a 	add	r3,r2,r7
 80448c0:	29cb883a 	add	r5,r5,r7
 80448c4:	5900212e 	bgeu	r11,r4,804494c <memcpy+0x140>
 80448c8:	1813883a 	mov	r9,r3
 80448cc:	2811883a 	mov	r8,r5
 80448d0:	200f883a 	mov	r7,r4
 80448d4:	42800017 	ldw	r10,0(r8)
 80448d8:	4a400104 	addi	r9,r9,4
 80448dc:	39ffff04 	addi	r7,r7,-4
 80448e0:	4abfff15 	stw	r10,-4(r9)
 80448e4:	42000104 	addi	r8,r8,4
 80448e8:	59fffa36 	bltu	r11,r7,80448d4 <__alt_data_end+0xfffc48d4>
 80448ec:	213fff04 	addi	r4,r4,-4
 80448f0:	2008d0ba 	srli	r4,r4,2
 80448f4:	318000cc 	andi	r6,r6,3
 80448f8:	21000044 	addi	r4,r4,1
 80448fc:	2109883a 	add	r4,r4,r4
 8044900:	2109883a 	add	r4,r4,r4
 8044904:	1907883a 	add	r3,r3,r4
 8044908:	290b883a 	add	r5,r5,r4
 804490c:	30000626 	beq	r6,zero,8044928 <memcpy+0x11c>
 8044910:	198d883a 	add	r6,r3,r6
 8044914:	29c00003 	ldbu	r7,0(r5)
 8044918:	18c00044 	addi	r3,r3,1
 804491c:	29400044 	addi	r5,r5,1
 8044920:	19ffffc5 	stb	r7,-1(r3)
 8044924:	19bffb1e 	bne	r3,r6,8044914 <__alt_data_end+0xfffc4914>
 8044928:	dfc00217 	ldw	ra,8(sp)
 804492c:	dc400117 	ldw	r17,4(sp)
 8044930:	dc000017 	ldw	r16,0(sp)
 8044934:	dec00304 	addi	sp,sp,12
 8044938:	f800283a 	ret
 804493c:	2007883a 	mov	r3,r4
 8044940:	003ff206 	br	804490c <__alt_data_end+0xfffc490c>
 8044944:	2007883a 	mov	r3,r4
 8044948:	003ff106 	br	8044910 <__alt_data_end+0xfffc4910>
 804494c:	200d883a 	mov	r6,r4
 8044950:	003fee06 	br	804490c <__alt_data_end+0xfffc490c>

08044954 <_putc_r>:
 8044954:	defffc04 	addi	sp,sp,-16
 8044958:	dc000215 	stw	r16,8(sp)
 804495c:	dfc00315 	stw	ra,12(sp)
 8044960:	2021883a 	mov	r16,r4
 8044964:	20000226 	beq	r4,zero,8044970 <_putc_r+0x1c>
 8044968:	20800e17 	ldw	r2,56(r4)
 804496c:	10001b26 	beq	r2,zero,80449dc <_putc_r+0x88>
 8044970:	30800217 	ldw	r2,8(r6)
 8044974:	10bfffc4 	addi	r2,r2,-1
 8044978:	30800215 	stw	r2,8(r6)
 804497c:	10000a16 	blt	r2,zero,80449a8 <_putc_r+0x54>
 8044980:	30800017 	ldw	r2,0(r6)
 8044984:	11400005 	stb	r5,0(r2)
 8044988:	30800017 	ldw	r2,0(r6)
 804498c:	10c00044 	addi	r3,r2,1
 8044990:	30c00015 	stw	r3,0(r6)
 8044994:	10800003 	ldbu	r2,0(r2)
 8044998:	dfc00317 	ldw	ra,12(sp)
 804499c:	dc000217 	ldw	r16,8(sp)
 80449a0:	dec00404 	addi	sp,sp,16
 80449a4:	f800283a 	ret
 80449a8:	30c00617 	ldw	r3,24(r6)
 80449ac:	10c00616 	blt	r2,r3,80449c8 <_putc_r+0x74>
 80449b0:	30800017 	ldw	r2,0(r6)
 80449b4:	00c00284 	movi	r3,10
 80449b8:	11400005 	stb	r5,0(r2)
 80449bc:	30800017 	ldw	r2,0(r6)
 80449c0:	11400003 	ldbu	r5,0(r2)
 80449c4:	28fff11e 	bne	r5,r3,804498c <__alt_data_end+0xfffc498c>
 80449c8:	8009883a 	mov	r4,r16
 80449cc:	dfc00317 	ldw	ra,12(sp)
 80449d0:	dc000217 	ldw	r16,8(sp)
 80449d4:	dec00404 	addi	sp,sp,16
 80449d8:	8044b541 	jmpi	8044b54 <__swbuf_r>
 80449dc:	d9400015 	stw	r5,0(sp)
 80449e0:	d9800115 	stw	r6,4(sp)
 80449e4:	80456900 	call	8045690 <__sinit>
 80449e8:	d9800117 	ldw	r6,4(sp)
 80449ec:	d9400017 	ldw	r5,0(sp)
 80449f0:	003fdf06 	br	8044970 <__alt_data_end+0xfffc4970>

080449f4 <putc>:
 80449f4:	00820174 	movhi	r2,2053
 80449f8:	defffc04 	addi	sp,sp,-16
 80449fc:	10a3ea04 	addi	r2,r2,-28760
 8044a00:	dc000115 	stw	r16,4(sp)
 8044a04:	14000017 	ldw	r16,0(r2)
 8044a08:	dc400215 	stw	r17,8(sp)
 8044a0c:	dfc00315 	stw	ra,12(sp)
 8044a10:	2023883a 	mov	r17,r4
 8044a14:	80000226 	beq	r16,zero,8044a20 <putc+0x2c>
 8044a18:	80800e17 	ldw	r2,56(r16)
 8044a1c:	10001a26 	beq	r2,zero,8044a88 <putc+0x94>
 8044a20:	28800217 	ldw	r2,8(r5)
 8044a24:	10bfffc4 	addi	r2,r2,-1
 8044a28:	28800215 	stw	r2,8(r5)
 8044a2c:	10000b16 	blt	r2,zero,8044a5c <putc+0x68>
 8044a30:	28800017 	ldw	r2,0(r5)
 8044a34:	14400005 	stb	r17,0(r2)
 8044a38:	28800017 	ldw	r2,0(r5)
 8044a3c:	10c00044 	addi	r3,r2,1
 8044a40:	28c00015 	stw	r3,0(r5)
 8044a44:	10800003 	ldbu	r2,0(r2)
 8044a48:	dfc00317 	ldw	ra,12(sp)
 8044a4c:	dc400217 	ldw	r17,8(sp)
 8044a50:	dc000117 	ldw	r16,4(sp)
 8044a54:	dec00404 	addi	sp,sp,16
 8044a58:	f800283a 	ret
 8044a5c:	28c00617 	ldw	r3,24(r5)
 8044a60:	10c00e16 	blt	r2,r3,8044a9c <putc+0xa8>
 8044a64:	28800017 	ldw	r2,0(r5)
 8044a68:	01000284 	movi	r4,10
 8044a6c:	14400005 	stb	r17,0(r2)
 8044a70:	28800017 	ldw	r2,0(r5)
 8044a74:	10c00003 	ldbu	r3,0(r2)
 8044a78:	193ff01e 	bne	r3,r4,8044a3c <__alt_data_end+0xfffc4a3c>
 8044a7c:	280d883a 	mov	r6,r5
 8044a80:	180b883a 	mov	r5,r3
 8044a84:	00000706 	br	8044aa4 <putc+0xb0>
 8044a88:	8009883a 	mov	r4,r16
 8044a8c:	d9400015 	stw	r5,0(sp)
 8044a90:	80456900 	call	8045690 <__sinit>
 8044a94:	d9400017 	ldw	r5,0(sp)
 8044a98:	003fe106 	br	8044a20 <__alt_data_end+0xfffc4a20>
 8044a9c:	280d883a 	mov	r6,r5
 8044aa0:	880b883a 	mov	r5,r17
 8044aa4:	8009883a 	mov	r4,r16
 8044aa8:	dfc00317 	ldw	ra,12(sp)
 8044aac:	dc400217 	ldw	r17,8(sp)
 8044ab0:	dc000117 	ldw	r16,4(sp)
 8044ab4:	dec00404 	addi	sp,sp,16
 8044ab8:	8044b541 	jmpi	8044b54 <__swbuf_r>

08044abc <strlen>:
 8044abc:	208000cc 	andi	r2,r4,3
 8044ac0:	10002026 	beq	r2,zero,8044b44 <strlen+0x88>
 8044ac4:	20800007 	ldb	r2,0(r4)
 8044ac8:	10002026 	beq	r2,zero,8044b4c <strlen+0x90>
 8044acc:	2005883a 	mov	r2,r4
 8044ad0:	00000206 	br	8044adc <strlen+0x20>
 8044ad4:	10c00007 	ldb	r3,0(r2)
 8044ad8:	18001826 	beq	r3,zero,8044b3c <strlen+0x80>
 8044adc:	10800044 	addi	r2,r2,1
 8044ae0:	10c000cc 	andi	r3,r2,3
 8044ae4:	183ffb1e 	bne	r3,zero,8044ad4 <__alt_data_end+0xfffc4ad4>
 8044ae8:	10c00017 	ldw	r3,0(r2)
 8044aec:	01ffbff4 	movhi	r7,65279
 8044af0:	39ffbfc4 	addi	r7,r7,-257
 8044af4:	00ca303a 	nor	r5,zero,r3
 8044af8:	01a02074 	movhi	r6,32897
 8044afc:	19c7883a 	add	r3,r3,r7
 8044b00:	31a02004 	addi	r6,r6,-32640
 8044b04:	1946703a 	and	r3,r3,r5
 8044b08:	1986703a 	and	r3,r3,r6
 8044b0c:	1800091e 	bne	r3,zero,8044b34 <strlen+0x78>
 8044b10:	10800104 	addi	r2,r2,4
 8044b14:	10c00017 	ldw	r3,0(r2)
 8044b18:	19cb883a 	add	r5,r3,r7
 8044b1c:	00c6303a 	nor	r3,zero,r3
 8044b20:	28c6703a 	and	r3,r5,r3
 8044b24:	1986703a 	and	r3,r3,r6
 8044b28:	183ff926 	beq	r3,zero,8044b10 <__alt_data_end+0xfffc4b10>
 8044b2c:	00000106 	br	8044b34 <strlen+0x78>
 8044b30:	10800044 	addi	r2,r2,1
 8044b34:	10c00007 	ldb	r3,0(r2)
 8044b38:	183ffd1e 	bne	r3,zero,8044b30 <__alt_data_end+0xfffc4b30>
 8044b3c:	1105c83a 	sub	r2,r2,r4
 8044b40:	f800283a 	ret
 8044b44:	2005883a 	mov	r2,r4
 8044b48:	003fe706 	br	8044ae8 <__alt_data_end+0xfffc4ae8>
 8044b4c:	0005883a 	mov	r2,zero
 8044b50:	f800283a 	ret

08044b54 <__swbuf_r>:
 8044b54:	defffb04 	addi	sp,sp,-20
 8044b58:	dcc00315 	stw	r19,12(sp)
 8044b5c:	dc800215 	stw	r18,8(sp)
 8044b60:	dc000015 	stw	r16,0(sp)
 8044b64:	dfc00415 	stw	ra,16(sp)
 8044b68:	dc400115 	stw	r17,4(sp)
 8044b6c:	2025883a 	mov	r18,r4
 8044b70:	2827883a 	mov	r19,r5
 8044b74:	3021883a 	mov	r16,r6
 8044b78:	20000226 	beq	r4,zero,8044b84 <__swbuf_r+0x30>
 8044b7c:	20800e17 	ldw	r2,56(r4)
 8044b80:	10004226 	beq	r2,zero,8044c8c <__swbuf_r+0x138>
 8044b84:	80800617 	ldw	r2,24(r16)
 8044b88:	8100030b 	ldhu	r4,12(r16)
 8044b8c:	80800215 	stw	r2,8(r16)
 8044b90:	2080020c 	andi	r2,r4,8
 8044b94:	10003626 	beq	r2,zero,8044c70 <__swbuf_r+0x11c>
 8044b98:	80c00417 	ldw	r3,16(r16)
 8044b9c:	18003426 	beq	r3,zero,8044c70 <__swbuf_r+0x11c>
 8044ba0:	2088000c 	andi	r2,r4,8192
 8044ba4:	9c403fcc 	andi	r17,r19,255
 8044ba8:	10001a26 	beq	r2,zero,8044c14 <__swbuf_r+0xc0>
 8044bac:	80800017 	ldw	r2,0(r16)
 8044bb0:	81000517 	ldw	r4,20(r16)
 8044bb4:	10c7c83a 	sub	r3,r2,r3
 8044bb8:	1900200e 	bge	r3,r4,8044c3c <__swbuf_r+0xe8>
 8044bbc:	18c00044 	addi	r3,r3,1
 8044bc0:	81000217 	ldw	r4,8(r16)
 8044bc4:	11400044 	addi	r5,r2,1
 8044bc8:	81400015 	stw	r5,0(r16)
 8044bcc:	213fffc4 	addi	r4,r4,-1
 8044bd0:	81000215 	stw	r4,8(r16)
 8044bd4:	14c00005 	stb	r19,0(r2)
 8044bd8:	80800517 	ldw	r2,20(r16)
 8044bdc:	10c01e26 	beq	r2,r3,8044c58 <__swbuf_r+0x104>
 8044be0:	8080030b 	ldhu	r2,12(r16)
 8044be4:	1080004c 	andi	r2,r2,1
 8044be8:	10000226 	beq	r2,zero,8044bf4 <__swbuf_r+0xa0>
 8044bec:	00800284 	movi	r2,10
 8044bf0:	88801926 	beq	r17,r2,8044c58 <__swbuf_r+0x104>
 8044bf4:	8805883a 	mov	r2,r17
 8044bf8:	dfc00417 	ldw	ra,16(sp)
 8044bfc:	dcc00317 	ldw	r19,12(sp)
 8044c00:	dc800217 	ldw	r18,8(sp)
 8044c04:	dc400117 	ldw	r17,4(sp)
 8044c08:	dc000017 	ldw	r16,0(sp)
 8044c0c:	dec00504 	addi	sp,sp,20
 8044c10:	f800283a 	ret
 8044c14:	81401917 	ldw	r5,100(r16)
 8044c18:	00b7ffc4 	movi	r2,-8193
 8044c1c:	21080014 	ori	r4,r4,8192
 8044c20:	2884703a 	and	r2,r5,r2
 8044c24:	80801915 	stw	r2,100(r16)
 8044c28:	80800017 	ldw	r2,0(r16)
 8044c2c:	8100030d 	sth	r4,12(r16)
 8044c30:	81000517 	ldw	r4,20(r16)
 8044c34:	10c7c83a 	sub	r3,r2,r3
 8044c38:	193fe016 	blt	r3,r4,8044bbc <__alt_data_end+0xfffc4bbc>
 8044c3c:	800b883a 	mov	r5,r16
 8044c40:	9009883a 	mov	r4,r18
 8044c44:	80452b40 	call	80452b4 <_fflush_r>
 8044c48:	1000071e 	bne	r2,zero,8044c68 <__swbuf_r+0x114>
 8044c4c:	80800017 	ldw	r2,0(r16)
 8044c50:	00c00044 	movi	r3,1
 8044c54:	003fda06 	br	8044bc0 <__alt_data_end+0xfffc4bc0>
 8044c58:	800b883a 	mov	r5,r16
 8044c5c:	9009883a 	mov	r4,r18
 8044c60:	80452b40 	call	80452b4 <_fflush_r>
 8044c64:	103fe326 	beq	r2,zero,8044bf4 <__alt_data_end+0xfffc4bf4>
 8044c68:	00bfffc4 	movi	r2,-1
 8044c6c:	003fe206 	br	8044bf8 <__alt_data_end+0xfffc4bf8>
 8044c70:	800b883a 	mov	r5,r16
 8044c74:	9009883a 	mov	r4,r18
 8044c78:	8044cac0 	call	8044cac <__swsetup_r>
 8044c7c:	103ffa1e 	bne	r2,zero,8044c68 <__alt_data_end+0xfffc4c68>
 8044c80:	8100030b 	ldhu	r4,12(r16)
 8044c84:	80c00417 	ldw	r3,16(r16)
 8044c88:	003fc506 	br	8044ba0 <__alt_data_end+0xfffc4ba0>
 8044c8c:	80456900 	call	8045690 <__sinit>
 8044c90:	003fbc06 	br	8044b84 <__alt_data_end+0xfffc4b84>

08044c94 <__swbuf>:
 8044c94:	00820174 	movhi	r2,2053
 8044c98:	10a3ea04 	addi	r2,r2,-28760
 8044c9c:	280d883a 	mov	r6,r5
 8044ca0:	200b883a 	mov	r5,r4
 8044ca4:	11000017 	ldw	r4,0(r2)
 8044ca8:	8044b541 	jmpi	8044b54 <__swbuf_r>

08044cac <__swsetup_r>:
 8044cac:	00820174 	movhi	r2,2053
 8044cb0:	defffd04 	addi	sp,sp,-12
 8044cb4:	10a3ea04 	addi	r2,r2,-28760
 8044cb8:	dc400115 	stw	r17,4(sp)
 8044cbc:	2023883a 	mov	r17,r4
 8044cc0:	11000017 	ldw	r4,0(r2)
 8044cc4:	dc000015 	stw	r16,0(sp)
 8044cc8:	dfc00215 	stw	ra,8(sp)
 8044ccc:	2821883a 	mov	r16,r5
 8044cd0:	20000226 	beq	r4,zero,8044cdc <__swsetup_r+0x30>
 8044cd4:	20800e17 	ldw	r2,56(r4)
 8044cd8:	10003126 	beq	r2,zero,8044da0 <__swsetup_r+0xf4>
 8044cdc:	8080030b 	ldhu	r2,12(r16)
 8044ce0:	10c0020c 	andi	r3,r2,8
 8044ce4:	1009883a 	mov	r4,r2
 8044ce8:	18000f26 	beq	r3,zero,8044d28 <__swsetup_r+0x7c>
 8044cec:	80c00417 	ldw	r3,16(r16)
 8044cf0:	18001526 	beq	r3,zero,8044d48 <__swsetup_r+0x9c>
 8044cf4:	1100004c 	andi	r4,r2,1
 8044cf8:	20001c1e 	bne	r4,zero,8044d6c <__swsetup_r+0xc0>
 8044cfc:	1080008c 	andi	r2,r2,2
 8044d00:	1000291e 	bne	r2,zero,8044da8 <__swsetup_r+0xfc>
 8044d04:	80800517 	ldw	r2,20(r16)
 8044d08:	80800215 	stw	r2,8(r16)
 8044d0c:	18001c26 	beq	r3,zero,8044d80 <__swsetup_r+0xd4>
 8044d10:	0005883a 	mov	r2,zero
 8044d14:	dfc00217 	ldw	ra,8(sp)
 8044d18:	dc400117 	ldw	r17,4(sp)
 8044d1c:	dc000017 	ldw	r16,0(sp)
 8044d20:	dec00304 	addi	sp,sp,12
 8044d24:	f800283a 	ret
 8044d28:	2080040c 	andi	r2,r4,16
 8044d2c:	10002e26 	beq	r2,zero,8044de8 <__swsetup_r+0x13c>
 8044d30:	2080010c 	andi	r2,r4,4
 8044d34:	10001e1e 	bne	r2,zero,8044db0 <__swsetup_r+0x104>
 8044d38:	80c00417 	ldw	r3,16(r16)
 8044d3c:	20800214 	ori	r2,r4,8
 8044d40:	8080030d 	sth	r2,12(r16)
 8044d44:	183feb1e 	bne	r3,zero,8044cf4 <__alt_data_end+0xfffc4cf4>
 8044d48:	1100a00c 	andi	r4,r2,640
 8044d4c:	01408004 	movi	r5,512
 8044d50:	217fe826 	beq	r4,r5,8044cf4 <__alt_data_end+0xfffc4cf4>
 8044d54:	800b883a 	mov	r5,r16
 8044d58:	8809883a 	mov	r4,r17
 8044d5c:	8045c9c0 	call	8045c9c <__smakebuf_r>
 8044d60:	8080030b 	ldhu	r2,12(r16)
 8044d64:	80c00417 	ldw	r3,16(r16)
 8044d68:	003fe206 	br	8044cf4 <__alt_data_end+0xfffc4cf4>
 8044d6c:	80800517 	ldw	r2,20(r16)
 8044d70:	80000215 	stw	zero,8(r16)
 8044d74:	0085c83a 	sub	r2,zero,r2
 8044d78:	80800615 	stw	r2,24(r16)
 8044d7c:	183fe41e 	bne	r3,zero,8044d10 <__alt_data_end+0xfffc4d10>
 8044d80:	80c0030b 	ldhu	r3,12(r16)
 8044d84:	0005883a 	mov	r2,zero
 8044d88:	1900200c 	andi	r4,r3,128
 8044d8c:	203fe126 	beq	r4,zero,8044d14 <__alt_data_end+0xfffc4d14>
 8044d90:	18c01014 	ori	r3,r3,64
 8044d94:	80c0030d 	sth	r3,12(r16)
 8044d98:	00bfffc4 	movi	r2,-1
 8044d9c:	003fdd06 	br	8044d14 <__alt_data_end+0xfffc4d14>
 8044da0:	80456900 	call	8045690 <__sinit>
 8044da4:	003fcd06 	br	8044cdc <__alt_data_end+0xfffc4cdc>
 8044da8:	0005883a 	mov	r2,zero
 8044dac:	003fd606 	br	8044d08 <__alt_data_end+0xfffc4d08>
 8044db0:	81400c17 	ldw	r5,48(r16)
 8044db4:	28000626 	beq	r5,zero,8044dd0 <__swsetup_r+0x124>
 8044db8:	80801004 	addi	r2,r16,64
 8044dbc:	28800326 	beq	r5,r2,8044dcc <__swsetup_r+0x120>
 8044dc0:	8809883a 	mov	r4,r17
 8044dc4:	80458040 	call	8045804 <_free_r>
 8044dc8:	8100030b 	ldhu	r4,12(r16)
 8044dcc:	80000c15 	stw	zero,48(r16)
 8044dd0:	80c00417 	ldw	r3,16(r16)
 8044dd4:	00bff6c4 	movi	r2,-37
 8044dd8:	1108703a 	and	r4,r2,r4
 8044ddc:	80000115 	stw	zero,4(r16)
 8044de0:	80c00015 	stw	r3,0(r16)
 8044de4:	003fd506 	br	8044d3c <__alt_data_end+0xfffc4d3c>
 8044de8:	00800244 	movi	r2,9
 8044dec:	88800015 	stw	r2,0(r17)
 8044df0:	20801014 	ori	r2,r4,64
 8044df4:	8080030d 	sth	r2,12(r16)
 8044df8:	00bfffc4 	movi	r2,-1
 8044dfc:	003fc506 	br	8044d14 <__alt_data_end+0xfffc4d14>

08044e00 <__register_exitproc>:
 8044e00:	defffa04 	addi	sp,sp,-24
 8044e04:	dc000315 	stw	r16,12(sp)
 8044e08:	04020174 	movhi	r16,2053
 8044e0c:	8423e904 	addi	r16,r16,-28764
 8044e10:	80c00017 	ldw	r3,0(r16)
 8044e14:	dc400415 	stw	r17,16(sp)
 8044e18:	dfc00515 	stw	ra,20(sp)
 8044e1c:	18805217 	ldw	r2,328(r3)
 8044e20:	2023883a 	mov	r17,r4
 8044e24:	10003726 	beq	r2,zero,8044f04 <__register_exitproc+0x104>
 8044e28:	10c00117 	ldw	r3,4(r2)
 8044e2c:	010007c4 	movi	r4,31
 8044e30:	20c00e16 	blt	r4,r3,8044e6c <__register_exitproc+0x6c>
 8044e34:	1a000044 	addi	r8,r3,1
 8044e38:	8800221e 	bne	r17,zero,8044ec4 <__register_exitproc+0xc4>
 8044e3c:	18c00084 	addi	r3,r3,2
 8044e40:	18c7883a 	add	r3,r3,r3
 8044e44:	18c7883a 	add	r3,r3,r3
 8044e48:	12000115 	stw	r8,4(r2)
 8044e4c:	10c7883a 	add	r3,r2,r3
 8044e50:	19400015 	stw	r5,0(r3)
 8044e54:	0005883a 	mov	r2,zero
 8044e58:	dfc00517 	ldw	ra,20(sp)
 8044e5c:	dc400417 	ldw	r17,16(sp)
 8044e60:	dc000317 	ldw	r16,12(sp)
 8044e64:	dec00604 	addi	sp,sp,24
 8044e68:	f800283a 	ret
 8044e6c:	00800034 	movhi	r2,0
 8044e70:	10800004 	addi	r2,r2,0
 8044e74:	10002626 	beq	r2,zero,8044f10 <__register_exitproc+0x110>
 8044e78:	01006404 	movi	r4,400
 8044e7c:	d9400015 	stw	r5,0(sp)
 8044e80:	d9800115 	stw	r6,4(sp)
 8044e84:	d9c00215 	stw	r7,8(sp)
 8044e88:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8044e8c:	d9400017 	ldw	r5,0(sp)
 8044e90:	d9800117 	ldw	r6,4(sp)
 8044e94:	d9c00217 	ldw	r7,8(sp)
 8044e98:	10001d26 	beq	r2,zero,8044f10 <__register_exitproc+0x110>
 8044e9c:	81000017 	ldw	r4,0(r16)
 8044ea0:	10000115 	stw	zero,4(r2)
 8044ea4:	02000044 	movi	r8,1
 8044ea8:	22405217 	ldw	r9,328(r4)
 8044eac:	0007883a 	mov	r3,zero
 8044eb0:	12400015 	stw	r9,0(r2)
 8044eb4:	20805215 	stw	r2,328(r4)
 8044eb8:	10006215 	stw	zero,392(r2)
 8044ebc:	10006315 	stw	zero,396(r2)
 8044ec0:	883fde26 	beq	r17,zero,8044e3c <__alt_data_end+0xfffc4e3c>
 8044ec4:	18c9883a 	add	r4,r3,r3
 8044ec8:	2109883a 	add	r4,r4,r4
 8044ecc:	1109883a 	add	r4,r2,r4
 8044ed0:	21802215 	stw	r6,136(r4)
 8044ed4:	01800044 	movi	r6,1
 8044ed8:	12406217 	ldw	r9,392(r2)
 8044edc:	30cc983a 	sll	r6,r6,r3
 8044ee0:	4992b03a 	or	r9,r9,r6
 8044ee4:	12406215 	stw	r9,392(r2)
 8044ee8:	21c04215 	stw	r7,264(r4)
 8044eec:	01000084 	movi	r4,2
 8044ef0:	893fd21e 	bne	r17,r4,8044e3c <__alt_data_end+0xfffc4e3c>
 8044ef4:	11006317 	ldw	r4,396(r2)
 8044ef8:	218cb03a 	or	r6,r4,r6
 8044efc:	11806315 	stw	r6,396(r2)
 8044f00:	003fce06 	br	8044e3c <__alt_data_end+0xfffc4e3c>
 8044f04:	18805304 	addi	r2,r3,332
 8044f08:	18805215 	stw	r2,328(r3)
 8044f0c:	003fc606 	br	8044e28 <__alt_data_end+0xfffc4e28>
 8044f10:	00bfffc4 	movi	r2,-1
 8044f14:	003fd006 	br	8044e58 <__alt_data_end+0xfffc4e58>

08044f18 <__call_exitprocs>:
 8044f18:	defff504 	addi	sp,sp,-44
 8044f1c:	df000915 	stw	fp,36(sp)
 8044f20:	dd400615 	stw	r21,24(sp)
 8044f24:	dc800315 	stw	r18,12(sp)
 8044f28:	dfc00a15 	stw	ra,40(sp)
 8044f2c:	ddc00815 	stw	r23,32(sp)
 8044f30:	dd800715 	stw	r22,28(sp)
 8044f34:	dd000515 	stw	r20,20(sp)
 8044f38:	dcc00415 	stw	r19,16(sp)
 8044f3c:	dc400215 	stw	r17,8(sp)
 8044f40:	dc000115 	stw	r16,4(sp)
 8044f44:	d9000015 	stw	r4,0(sp)
 8044f48:	2839883a 	mov	fp,r5
 8044f4c:	04800044 	movi	r18,1
 8044f50:	057fffc4 	movi	r21,-1
 8044f54:	00820174 	movhi	r2,2053
 8044f58:	10a3e904 	addi	r2,r2,-28764
 8044f5c:	12000017 	ldw	r8,0(r2)
 8044f60:	45005217 	ldw	r20,328(r8)
 8044f64:	44c05204 	addi	r19,r8,328
 8044f68:	a0001c26 	beq	r20,zero,8044fdc <__call_exitprocs+0xc4>
 8044f6c:	a0800117 	ldw	r2,4(r20)
 8044f70:	15ffffc4 	addi	r23,r2,-1
 8044f74:	b8000d16 	blt	r23,zero,8044fac <__call_exitprocs+0x94>
 8044f78:	14000044 	addi	r16,r2,1
 8044f7c:	8421883a 	add	r16,r16,r16
 8044f80:	8421883a 	add	r16,r16,r16
 8044f84:	84402004 	addi	r17,r16,128
 8044f88:	a463883a 	add	r17,r20,r17
 8044f8c:	a421883a 	add	r16,r20,r16
 8044f90:	e0001e26 	beq	fp,zero,804500c <__call_exitprocs+0xf4>
 8044f94:	80804017 	ldw	r2,256(r16)
 8044f98:	e0801c26 	beq	fp,r2,804500c <__call_exitprocs+0xf4>
 8044f9c:	bdffffc4 	addi	r23,r23,-1
 8044fa0:	843fff04 	addi	r16,r16,-4
 8044fa4:	8c7fff04 	addi	r17,r17,-4
 8044fa8:	bd7ff91e 	bne	r23,r21,8044f90 <__alt_data_end+0xfffc4f90>
 8044fac:	00800034 	movhi	r2,0
 8044fb0:	10800004 	addi	r2,r2,0
 8044fb4:	10000926 	beq	r2,zero,8044fdc <__call_exitprocs+0xc4>
 8044fb8:	a0800117 	ldw	r2,4(r20)
 8044fbc:	1000301e 	bne	r2,zero,8045080 <__call_exitprocs+0x168>
 8044fc0:	a0800017 	ldw	r2,0(r20)
 8044fc4:	10003226 	beq	r2,zero,8045090 <__call_exitprocs+0x178>
 8044fc8:	a009883a 	mov	r4,r20
 8044fcc:	98800015 	stw	r2,0(r19)
 8044fd0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8044fd4:	9d000017 	ldw	r20,0(r19)
 8044fd8:	a03fe41e 	bne	r20,zero,8044f6c <__alt_data_end+0xfffc4f6c>
 8044fdc:	dfc00a17 	ldw	ra,40(sp)
 8044fe0:	df000917 	ldw	fp,36(sp)
 8044fe4:	ddc00817 	ldw	r23,32(sp)
 8044fe8:	dd800717 	ldw	r22,28(sp)
 8044fec:	dd400617 	ldw	r21,24(sp)
 8044ff0:	dd000517 	ldw	r20,20(sp)
 8044ff4:	dcc00417 	ldw	r19,16(sp)
 8044ff8:	dc800317 	ldw	r18,12(sp)
 8044ffc:	dc400217 	ldw	r17,8(sp)
 8045000:	dc000117 	ldw	r16,4(sp)
 8045004:	dec00b04 	addi	sp,sp,44
 8045008:	f800283a 	ret
 804500c:	a0800117 	ldw	r2,4(r20)
 8045010:	80c00017 	ldw	r3,0(r16)
 8045014:	10bfffc4 	addi	r2,r2,-1
 8045018:	15c01426 	beq	r2,r23,804506c <__call_exitprocs+0x154>
 804501c:	80000015 	stw	zero,0(r16)
 8045020:	183fde26 	beq	r3,zero,8044f9c <__alt_data_end+0xfffc4f9c>
 8045024:	95c8983a 	sll	r4,r18,r23
 8045028:	a0806217 	ldw	r2,392(r20)
 804502c:	a5800117 	ldw	r22,4(r20)
 8045030:	2084703a 	and	r2,r4,r2
 8045034:	10000b26 	beq	r2,zero,8045064 <__call_exitprocs+0x14c>
 8045038:	a0806317 	ldw	r2,396(r20)
 804503c:	2088703a 	and	r4,r4,r2
 8045040:	20000c1e 	bne	r4,zero,8045074 <__call_exitprocs+0x15c>
 8045044:	89400017 	ldw	r5,0(r17)
 8045048:	d9000017 	ldw	r4,0(sp)
 804504c:	183ee83a 	callr	r3
 8045050:	a0800117 	ldw	r2,4(r20)
 8045054:	15bfbf1e 	bne	r2,r22,8044f54 <__alt_data_end+0xfffc4f54>
 8045058:	98800017 	ldw	r2,0(r19)
 804505c:	153fcf26 	beq	r2,r20,8044f9c <__alt_data_end+0xfffc4f9c>
 8045060:	003fbc06 	br	8044f54 <__alt_data_end+0xfffc4f54>
 8045064:	183ee83a 	callr	r3
 8045068:	003ff906 	br	8045050 <__alt_data_end+0xfffc5050>
 804506c:	a5c00115 	stw	r23,4(r20)
 8045070:	003feb06 	br	8045020 <__alt_data_end+0xfffc5020>
 8045074:	89000017 	ldw	r4,0(r17)
 8045078:	183ee83a 	callr	r3
 804507c:	003ff406 	br	8045050 <__alt_data_end+0xfffc5050>
 8045080:	a0800017 	ldw	r2,0(r20)
 8045084:	a027883a 	mov	r19,r20
 8045088:	1029883a 	mov	r20,r2
 804508c:	003fb606 	br	8044f68 <__alt_data_end+0xfffc4f68>
 8045090:	0005883a 	mov	r2,zero
 8045094:	003ffb06 	br	8045084 <__alt_data_end+0xfffc5084>

08045098 <__sflush_r>:
 8045098:	2880030b 	ldhu	r2,12(r5)
 804509c:	defffb04 	addi	sp,sp,-20
 80450a0:	dcc00315 	stw	r19,12(sp)
 80450a4:	dc400115 	stw	r17,4(sp)
 80450a8:	dfc00415 	stw	ra,16(sp)
 80450ac:	dc800215 	stw	r18,8(sp)
 80450b0:	dc000015 	stw	r16,0(sp)
 80450b4:	10c0020c 	andi	r3,r2,8
 80450b8:	2823883a 	mov	r17,r5
 80450bc:	2027883a 	mov	r19,r4
 80450c0:	1800311e 	bne	r3,zero,8045188 <__sflush_r+0xf0>
 80450c4:	28c00117 	ldw	r3,4(r5)
 80450c8:	10820014 	ori	r2,r2,2048
 80450cc:	2880030d 	sth	r2,12(r5)
 80450d0:	00c04b0e 	bge	zero,r3,8045200 <__sflush_r+0x168>
 80450d4:	8a000a17 	ldw	r8,40(r17)
 80450d8:	40002326 	beq	r8,zero,8045168 <__sflush_r+0xd0>
 80450dc:	9c000017 	ldw	r16,0(r19)
 80450e0:	10c4000c 	andi	r3,r2,4096
 80450e4:	98000015 	stw	zero,0(r19)
 80450e8:	18004826 	beq	r3,zero,804520c <__sflush_r+0x174>
 80450ec:	89801417 	ldw	r6,80(r17)
 80450f0:	10c0010c 	andi	r3,r2,4
 80450f4:	18000626 	beq	r3,zero,8045110 <__sflush_r+0x78>
 80450f8:	88c00117 	ldw	r3,4(r17)
 80450fc:	88800c17 	ldw	r2,48(r17)
 8045100:	30cdc83a 	sub	r6,r6,r3
 8045104:	10000226 	beq	r2,zero,8045110 <__sflush_r+0x78>
 8045108:	88800f17 	ldw	r2,60(r17)
 804510c:	308dc83a 	sub	r6,r6,r2
 8045110:	89400717 	ldw	r5,28(r17)
 8045114:	000f883a 	mov	r7,zero
 8045118:	9809883a 	mov	r4,r19
 804511c:	403ee83a 	callr	r8
 8045120:	00ffffc4 	movi	r3,-1
 8045124:	10c04426 	beq	r2,r3,8045238 <__sflush_r+0x1a0>
 8045128:	88c0030b 	ldhu	r3,12(r17)
 804512c:	89000417 	ldw	r4,16(r17)
 8045130:	88000115 	stw	zero,4(r17)
 8045134:	197dffcc 	andi	r5,r3,63487
 8045138:	8940030d 	sth	r5,12(r17)
 804513c:	89000015 	stw	r4,0(r17)
 8045140:	18c4000c 	andi	r3,r3,4096
 8045144:	18002c1e 	bne	r3,zero,80451f8 <__sflush_r+0x160>
 8045148:	89400c17 	ldw	r5,48(r17)
 804514c:	9c000015 	stw	r16,0(r19)
 8045150:	28000526 	beq	r5,zero,8045168 <__sflush_r+0xd0>
 8045154:	88801004 	addi	r2,r17,64
 8045158:	28800226 	beq	r5,r2,8045164 <__sflush_r+0xcc>
 804515c:	9809883a 	mov	r4,r19
 8045160:	80458040 	call	8045804 <_free_r>
 8045164:	88000c15 	stw	zero,48(r17)
 8045168:	0005883a 	mov	r2,zero
 804516c:	dfc00417 	ldw	ra,16(sp)
 8045170:	dcc00317 	ldw	r19,12(sp)
 8045174:	dc800217 	ldw	r18,8(sp)
 8045178:	dc400117 	ldw	r17,4(sp)
 804517c:	dc000017 	ldw	r16,0(sp)
 8045180:	dec00504 	addi	sp,sp,20
 8045184:	f800283a 	ret
 8045188:	2c800417 	ldw	r18,16(r5)
 804518c:	903ff626 	beq	r18,zero,8045168 <__alt_data_end+0xfffc5168>
 8045190:	2c000017 	ldw	r16,0(r5)
 8045194:	108000cc 	andi	r2,r2,3
 8045198:	2c800015 	stw	r18,0(r5)
 804519c:	84a1c83a 	sub	r16,r16,r18
 80451a0:	1000131e 	bne	r2,zero,80451f0 <__sflush_r+0x158>
 80451a4:	28800517 	ldw	r2,20(r5)
 80451a8:	88800215 	stw	r2,8(r17)
 80451ac:	04000316 	blt	zero,r16,80451bc <__sflush_r+0x124>
 80451b0:	003fed06 	br	8045168 <__alt_data_end+0xfffc5168>
 80451b4:	90a5883a 	add	r18,r18,r2
 80451b8:	043feb0e 	bge	zero,r16,8045168 <__alt_data_end+0xfffc5168>
 80451bc:	88800917 	ldw	r2,36(r17)
 80451c0:	89400717 	ldw	r5,28(r17)
 80451c4:	800f883a 	mov	r7,r16
 80451c8:	900d883a 	mov	r6,r18
 80451cc:	9809883a 	mov	r4,r19
 80451d0:	103ee83a 	callr	r2
 80451d4:	80a1c83a 	sub	r16,r16,r2
 80451d8:	00bff616 	blt	zero,r2,80451b4 <__alt_data_end+0xfffc51b4>
 80451dc:	88c0030b 	ldhu	r3,12(r17)
 80451e0:	00bfffc4 	movi	r2,-1
 80451e4:	18c01014 	ori	r3,r3,64
 80451e8:	88c0030d 	sth	r3,12(r17)
 80451ec:	003fdf06 	br	804516c <__alt_data_end+0xfffc516c>
 80451f0:	0005883a 	mov	r2,zero
 80451f4:	003fec06 	br	80451a8 <__alt_data_end+0xfffc51a8>
 80451f8:	88801415 	stw	r2,80(r17)
 80451fc:	003fd206 	br	8045148 <__alt_data_end+0xfffc5148>
 8045200:	28c00f17 	ldw	r3,60(r5)
 8045204:	00ffb316 	blt	zero,r3,80450d4 <__alt_data_end+0xfffc50d4>
 8045208:	003fd706 	br	8045168 <__alt_data_end+0xfffc5168>
 804520c:	89400717 	ldw	r5,28(r17)
 8045210:	000d883a 	mov	r6,zero
 8045214:	01c00044 	movi	r7,1
 8045218:	9809883a 	mov	r4,r19
 804521c:	403ee83a 	callr	r8
 8045220:	100d883a 	mov	r6,r2
 8045224:	00bfffc4 	movi	r2,-1
 8045228:	30801426 	beq	r6,r2,804527c <__sflush_r+0x1e4>
 804522c:	8880030b 	ldhu	r2,12(r17)
 8045230:	8a000a17 	ldw	r8,40(r17)
 8045234:	003fae06 	br	80450f0 <__alt_data_end+0xfffc50f0>
 8045238:	98c00017 	ldw	r3,0(r19)
 804523c:	183fba26 	beq	r3,zero,8045128 <__alt_data_end+0xfffc5128>
 8045240:	01000744 	movi	r4,29
 8045244:	19000626 	beq	r3,r4,8045260 <__sflush_r+0x1c8>
 8045248:	01000584 	movi	r4,22
 804524c:	19000426 	beq	r3,r4,8045260 <__sflush_r+0x1c8>
 8045250:	88c0030b 	ldhu	r3,12(r17)
 8045254:	18c01014 	ori	r3,r3,64
 8045258:	88c0030d 	sth	r3,12(r17)
 804525c:	003fc306 	br	804516c <__alt_data_end+0xfffc516c>
 8045260:	8880030b 	ldhu	r2,12(r17)
 8045264:	88c00417 	ldw	r3,16(r17)
 8045268:	88000115 	stw	zero,4(r17)
 804526c:	10bdffcc 	andi	r2,r2,63487
 8045270:	8880030d 	sth	r2,12(r17)
 8045274:	88c00015 	stw	r3,0(r17)
 8045278:	003fb306 	br	8045148 <__alt_data_end+0xfffc5148>
 804527c:	98800017 	ldw	r2,0(r19)
 8045280:	103fea26 	beq	r2,zero,804522c <__alt_data_end+0xfffc522c>
 8045284:	00c00744 	movi	r3,29
 8045288:	10c00226 	beq	r2,r3,8045294 <__sflush_r+0x1fc>
 804528c:	00c00584 	movi	r3,22
 8045290:	10c0031e 	bne	r2,r3,80452a0 <__sflush_r+0x208>
 8045294:	9c000015 	stw	r16,0(r19)
 8045298:	0005883a 	mov	r2,zero
 804529c:	003fb306 	br	804516c <__alt_data_end+0xfffc516c>
 80452a0:	88c0030b 	ldhu	r3,12(r17)
 80452a4:	3005883a 	mov	r2,r6
 80452a8:	18c01014 	ori	r3,r3,64
 80452ac:	88c0030d 	sth	r3,12(r17)
 80452b0:	003fae06 	br	804516c <__alt_data_end+0xfffc516c>

080452b4 <_fflush_r>:
 80452b4:	defffd04 	addi	sp,sp,-12
 80452b8:	dc000115 	stw	r16,4(sp)
 80452bc:	dfc00215 	stw	ra,8(sp)
 80452c0:	2021883a 	mov	r16,r4
 80452c4:	20000226 	beq	r4,zero,80452d0 <_fflush_r+0x1c>
 80452c8:	20800e17 	ldw	r2,56(r4)
 80452cc:	10000c26 	beq	r2,zero,8045300 <_fflush_r+0x4c>
 80452d0:	2880030f 	ldh	r2,12(r5)
 80452d4:	1000051e 	bne	r2,zero,80452ec <_fflush_r+0x38>
 80452d8:	0005883a 	mov	r2,zero
 80452dc:	dfc00217 	ldw	ra,8(sp)
 80452e0:	dc000117 	ldw	r16,4(sp)
 80452e4:	dec00304 	addi	sp,sp,12
 80452e8:	f800283a 	ret
 80452ec:	8009883a 	mov	r4,r16
 80452f0:	dfc00217 	ldw	ra,8(sp)
 80452f4:	dc000117 	ldw	r16,4(sp)
 80452f8:	dec00304 	addi	sp,sp,12
 80452fc:	80450981 	jmpi	8045098 <__sflush_r>
 8045300:	d9400015 	stw	r5,0(sp)
 8045304:	80456900 	call	8045690 <__sinit>
 8045308:	d9400017 	ldw	r5,0(sp)
 804530c:	003ff006 	br	80452d0 <__alt_data_end+0xfffc52d0>

08045310 <fflush>:
 8045310:	20000526 	beq	r4,zero,8045328 <fflush+0x18>
 8045314:	00820174 	movhi	r2,2053
 8045318:	10a3ea04 	addi	r2,r2,-28760
 804531c:	200b883a 	mov	r5,r4
 8045320:	11000017 	ldw	r4,0(r2)
 8045324:	80452b41 	jmpi	80452b4 <_fflush_r>
 8045328:	00820174 	movhi	r2,2053
 804532c:	10a3e904 	addi	r2,r2,-28764
 8045330:	11000017 	ldw	r4,0(r2)
 8045334:	01420134 	movhi	r5,2052
 8045338:	2954ad04 	addi	r5,r5,21172
 804533c:	8045bd81 	jmpi	8045bd8 <_fwalk_reent>

08045340 <__fp_unlock>:
 8045340:	0005883a 	mov	r2,zero
 8045344:	f800283a 	ret

08045348 <_cleanup_r>:
 8045348:	01420134 	movhi	r5,2052
 804534c:	295a7404 	addi	r5,r5,27088
 8045350:	8045bd81 	jmpi	8045bd8 <_fwalk_reent>

08045354 <__sinit.part.1>:
 8045354:	defff704 	addi	sp,sp,-36
 8045358:	00c20134 	movhi	r3,2052
 804535c:	dfc00815 	stw	ra,32(sp)
 8045360:	ddc00715 	stw	r23,28(sp)
 8045364:	dd800615 	stw	r22,24(sp)
 8045368:	dd400515 	stw	r21,20(sp)
 804536c:	dd000415 	stw	r20,16(sp)
 8045370:	dcc00315 	stw	r19,12(sp)
 8045374:	dc800215 	stw	r18,8(sp)
 8045378:	dc400115 	stw	r17,4(sp)
 804537c:	dc000015 	stw	r16,0(sp)
 8045380:	18d4d204 	addi	r3,r3,21320
 8045384:	24000117 	ldw	r16,4(r4)
 8045388:	20c00f15 	stw	r3,60(r4)
 804538c:	2080bb04 	addi	r2,r4,748
 8045390:	00c000c4 	movi	r3,3
 8045394:	20c0b915 	stw	r3,740(r4)
 8045398:	2080ba15 	stw	r2,744(r4)
 804539c:	2000b815 	stw	zero,736(r4)
 80453a0:	05c00204 	movi	r23,8
 80453a4:	00800104 	movi	r2,4
 80453a8:	2025883a 	mov	r18,r4
 80453ac:	b80d883a 	mov	r6,r23
 80453b0:	81001704 	addi	r4,r16,92
 80453b4:	000b883a 	mov	r5,zero
 80453b8:	80000015 	stw	zero,0(r16)
 80453bc:	80000115 	stw	zero,4(r16)
 80453c0:	80000215 	stw	zero,8(r16)
 80453c4:	8080030d 	sth	r2,12(r16)
 80453c8:	80001915 	stw	zero,100(r16)
 80453cc:	8000038d 	sth	zero,14(r16)
 80453d0:	80000415 	stw	zero,16(r16)
 80453d4:	80000515 	stw	zero,20(r16)
 80453d8:	80000615 	stw	zero,24(r16)
 80453dc:	80466640 	call	8046664 <memset>
 80453e0:	05820134 	movhi	r22,2052
 80453e4:	94400217 	ldw	r17,8(r18)
 80453e8:	05420134 	movhi	r21,2052
 80453ec:	05020134 	movhi	r20,2052
 80453f0:	04c20134 	movhi	r19,2052
 80453f4:	b599f804 	addi	r22,r22,26592
 80453f8:	ad5a0f04 	addi	r21,r21,26684
 80453fc:	a51a2e04 	addi	r20,r20,26808
 8045400:	9cda4504 	addi	r19,r19,26900
 8045404:	85800815 	stw	r22,32(r16)
 8045408:	85400915 	stw	r21,36(r16)
 804540c:	85000a15 	stw	r20,40(r16)
 8045410:	84c00b15 	stw	r19,44(r16)
 8045414:	84000715 	stw	r16,28(r16)
 8045418:	00800284 	movi	r2,10
 804541c:	8880030d 	sth	r2,12(r17)
 8045420:	00800044 	movi	r2,1
 8045424:	b80d883a 	mov	r6,r23
 8045428:	89001704 	addi	r4,r17,92
 804542c:	000b883a 	mov	r5,zero
 8045430:	88000015 	stw	zero,0(r17)
 8045434:	88000115 	stw	zero,4(r17)
 8045438:	88000215 	stw	zero,8(r17)
 804543c:	88001915 	stw	zero,100(r17)
 8045440:	8880038d 	sth	r2,14(r17)
 8045444:	88000415 	stw	zero,16(r17)
 8045448:	88000515 	stw	zero,20(r17)
 804544c:	88000615 	stw	zero,24(r17)
 8045450:	80466640 	call	8046664 <memset>
 8045454:	94000317 	ldw	r16,12(r18)
 8045458:	00800484 	movi	r2,18
 804545c:	8c400715 	stw	r17,28(r17)
 8045460:	8d800815 	stw	r22,32(r17)
 8045464:	8d400915 	stw	r21,36(r17)
 8045468:	8d000a15 	stw	r20,40(r17)
 804546c:	8cc00b15 	stw	r19,44(r17)
 8045470:	8080030d 	sth	r2,12(r16)
 8045474:	00800084 	movi	r2,2
 8045478:	80000015 	stw	zero,0(r16)
 804547c:	80000115 	stw	zero,4(r16)
 8045480:	80000215 	stw	zero,8(r16)
 8045484:	80001915 	stw	zero,100(r16)
 8045488:	8080038d 	sth	r2,14(r16)
 804548c:	80000415 	stw	zero,16(r16)
 8045490:	80000515 	stw	zero,20(r16)
 8045494:	80000615 	stw	zero,24(r16)
 8045498:	b80d883a 	mov	r6,r23
 804549c:	000b883a 	mov	r5,zero
 80454a0:	81001704 	addi	r4,r16,92
 80454a4:	80466640 	call	8046664 <memset>
 80454a8:	00800044 	movi	r2,1
 80454ac:	84000715 	stw	r16,28(r16)
 80454b0:	85800815 	stw	r22,32(r16)
 80454b4:	85400915 	stw	r21,36(r16)
 80454b8:	85000a15 	stw	r20,40(r16)
 80454bc:	84c00b15 	stw	r19,44(r16)
 80454c0:	90800e15 	stw	r2,56(r18)
 80454c4:	dfc00817 	ldw	ra,32(sp)
 80454c8:	ddc00717 	ldw	r23,28(sp)
 80454cc:	dd800617 	ldw	r22,24(sp)
 80454d0:	dd400517 	ldw	r21,20(sp)
 80454d4:	dd000417 	ldw	r20,16(sp)
 80454d8:	dcc00317 	ldw	r19,12(sp)
 80454dc:	dc800217 	ldw	r18,8(sp)
 80454e0:	dc400117 	ldw	r17,4(sp)
 80454e4:	dc000017 	ldw	r16,0(sp)
 80454e8:	dec00904 	addi	sp,sp,36
 80454ec:	f800283a 	ret

080454f0 <__fp_lock>:
 80454f0:	0005883a 	mov	r2,zero
 80454f4:	f800283a 	ret

080454f8 <__sfmoreglue>:
 80454f8:	defffc04 	addi	sp,sp,-16
 80454fc:	dc400115 	stw	r17,4(sp)
 8045500:	2c7fffc4 	addi	r17,r5,-1
 8045504:	8c401a24 	muli	r17,r17,104
 8045508:	dc800215 	stw	r18,8(sp)
 804550c:	2825883a 	mov	r18,r5
 8045510:	89401d04 	addi	r5,r17,116
 8045514:	dc000015 	stw	r16,0(sp)
 8045518:	dfc00315 	stw	ra,12(sp)
 804551c:	8045e580 	call	8045e58 <_malloc_r>
 8045520:	1021883a 	mov	r16,r2
 8045524:	10000726 	beq	r2,zero,8045544 <__sfmoreglue+0x4c>
 8045528:	11000304 	addi	r4,r2,12
 804552c:	10000015 	stw	zero,0(r2)
 8045530:	14800115 	stw	r18,4(r2)
 8045534:	11000215 	stw	r4,8(r2)
 8045538:	89801a04 	addi	r6,r17,104
 804553c:	000b883a 	mov	r5,zero
 8045540:	80466640 	call	8046664 <memset>
 8045544:	8005883a 	mov	r2,r16
 8045548:	dfc00317 	ldw	ra,12(sp)
 804554c:	dc800217 	ldw	r18,8(sp)
 8045550:	dc400117 	ldw	r17,4(sp)
 8045554:	dc000017 	ldw	r16,0(sp)
 8045558:	dec00404 	addi	sp,sp,16
 804555c:	f800283a 	ret

08045560 <__sfp>:
 8045560:	defffb04 	addi	sp,sp,-20
 8045564:	dc000015 	stw	r16,0(sp)
 8045568:	04020174 	movhi	r16,2053
 804556c:	8423e904 	addi	r16,r16,-28764
 8045570:	dcc00315 	stw	r19,12(sp)
 8045574:	2027883a 	mov	r19,r4
 8045578:	81000017 	ldw	r4,0(r16)
 804557c:	dfc00415 	stw	ra,16(sp)
 8045580:	dc800215 	stw	r18,8(sp)
 8045584:	20800e17 	ldw	r2,56(r4)
 8045588:	dc400115 	stw	r17,4(sp)
 804558c:	1000021e 	bne	r2,zero,8045598 <__sfp+0x38>
 8045590:	80453540 	call	8045354 <__sinit.part.1>
 8045594:	81000017 	ldw	r4,0(r16)
 8045598:	2480b804 	addi	r18,r4,736
 804559c:	047fffc4 	movi	r17,-1
 80455a0:	91000117 	ldw	r4,4(r18)
 80455a4:	94000217 	ldw	r16,8(r18)
 80455a8:	213fffc4 	addi	r4,r4,-1
 80455ac:	20000a16 	blt	r4,zero,80455d8 <__sfp+0x78>
 80455b0:	8080030f 	ldh	r2,12(r16)
 80455b4:	10000c26 	beq	r2,zero,80455e8 <__sfp+0x88>
 80455b8:	80c01d04 	addi	r3,r16,116
 80455bc:	00000206 	br	80455c8 <__sfp+0x68>
 80455c0:	18bfe60f 	ldh	r2,-104(r3)
 80455c4:	10000826 	beq	r2,zero,80455e8 <__sfp+0x88>
 80455c8:	213fffc4 	addi	r4,r4,-1
 80455cc:	1c3ffd04 	addi	r16,r3,-12
 80455d0:	18c01a04 	addi	r3,r3,104
 80455d4:	247ffa1e 	bne	r4,r17,80455c0 <__alt_data_end+0xfffc55c0>
 80455d8:	90800017 	ldw	r2,0(r18)
 80455dc:	10001d26 	beq	r2,zero,8045654 <__sfp+0xf4>
 80455e0:	1025883a 	mov	r18,r2
 80455e4:	003fee06 	br	80455a0 <__alt_data_end+0xfffc55a0>
 80455e8:	00bfffc4 	movi	r2,-1
 80455ec:	8080038d 	sth	r2,14(r16)
 80455f0:	00800044 	movi	r2,1
 80455f4:	8080030d 	sth	r2,12(r16)
 80455f8:	80001915 	stw	zero,100(r16)
 80455fc:	80000015 	stw	zero,0(r16)
 8045600:	80000215 	stw	zero,8(r16)
 8045604:	80000115 	stw	zero,4(r16)
 8045608:	80000415 	stw	zero,16(r16)
 804560c:	80000515 	stw	zero,20(r16)
 8045610:	80000615 	stw	zero,24(r16)
 8045614:	01800204 	movi	r6,8
 8045618:	000b883a 	mov	r5,zero
 804561c:	81001704 	addi	r4,r16,92
 8045620:	80466640 	call	8046664 <memset>
 8045624:	8005883a 	mov	r2,r16
 8045628:	80000c15 	stw	zero,48(r16)
 804562c:	80000d15 	stw	zero,52(r16)
 8045630:	80001115 	stw	zero,68(r16)
 8045634:	80001215 	stw	zero,72(r16)
 8045638:	dfc00417 	ldw	ra,16(sp)
 804563c:	dcc00317 	ldw	r19,12(sp)
 8045640:	dc800217 	ldw	r18,8(sp)
 8045644:	dc400117 	ldw	r17,4(sp)
 8045648:	dc000017 	ldw	r16,0(sp)
 804564c:	dec00504 	addi	sp,sp,20
 8045650:	f800283a 	ret
 8045654:	01400104 	movi	r5,4
 8045658:	9809883a 	mov	r4,r19
 804565c:	80454f80 	call	80454f8 <__sfmoreglue>
 8045660:	90800015 	stw	r2,0(r18)
 8045664:	103fde1e 	bne	r2,zero,80455e0 <__alt_data_end+0xfffc55e0>
 8045668:	00800304 	movi	r2,12
 804566c:	98800015 	stw	r2,0(r19)
 8045670:	0005883a 	mov	r2,zero
 8045674:	003ff006 	br	8045638 <__alt_data_end+0xfffc5638>

08045678 <_cleanup>:
 8045678:	00820174 	movhi	r2,2053
 804567c:	10a3e904 	addi	r2,r2,-28764
 8045680:	11000017 	ldw	r4,0(r2)
 8045684:	01420134 	movhi	r5,2052
 8045688:	295a7404 	addi	r5,r5,27088
 804568c:	8045bd81 	jmpi	8045bd8 <_fwalk_reent>

08045690 <__sinit>:
 8045690:	20800e17 	ldw	r2,56(r4)
 8045694:	10000126 	beq	r2,zero,804569c <__sinit+0xc>
 8045698:	f800283a 	ret
 804569c:	80453541 	jmpi	8045354 <__sinit.part.1>

080456a0 <__sfp_lock_acquire>:
 80456a0:	f800283a 	ret

080456a4 <__sfp_lock_release>:
 80456a4:	f800283a 	ret

080456a8 <__sinit_lock_acquire>:
 80456a8:	f800283a 	ret

080456ac <__sinit_lock_release>:
 80456ac:	f800283a 	ret

080456b0 <__fp_lock_all>:
 80456b0:	00820174 	movhi	r2,2053
 80456b4:	10a3ea04 	addi	r2,r2,-28760
 80456b8:	11000017 	ldw	r4,0(r2)
 80456bc:	01420134 	movhi	r5,2052
 80456c0:	29553c04 	addi	r5,r5,21744
 80456c4:	8045b141 	jmpi	8045b14 <_fwalk>

080456c8 <__fp_unlock_all>:
 80456c8:	00820174 	movhi	r2,2053
 80456cc:	10a3ea04 	addi	r2,r2,-28760
 80456d0:	11000017 	ldw	r4,0(r2)
 80456d4:	01420134 	movhi	r5,2052
 80456d8:	2954d004 	addi	r5,r5,21312
 80456dc:	8045b141 	jmpi	8045b14 <_fwalk>

080456e0 <_malloc_trim_r>:
 80456e0:	defffb04 	addi	sp,sp,-20
 80456e4:	dcc00315 	stw	r19,12(sp)
 80456e8:	04c20174 	movhi	r19,2053
 80456ec:	dc800215 	stw	r18,8(sp)
 80456f0:	dc400115 	stw	r17,4(sp)
 80456f4:	dc000015 	stw	r16,0(sp)
 80456f8:	dfc00415 	stw	ra,16(sp)
 80456fc:	2821883a 	mov	r16,r5
 8045700:	9ce2df04 	addi	r19,r19,-29828
 8045704:	2025883a 	mov	r18,r4
 8045708:	8046f540 	call	8046f54 <__malloc_lock>
 804570c:	98800217 	ldw	r2,8(r19)
 8045710:	14400117 	ldw	r17,4(r2)
 8045714:	00bfff04 	movi	r2,-4
 8045718:	88a2703a 	and	r17,r17,r2
 804571c:	8c21c83a 	sub	r16,r17,r16
 8045720:	8403fbc4 	addi	r16,r16,4079
 8045724:	8020d33a 	srli	r16,r16,12
 8045728:	0083ffc4 	movi	r2,4095
 804572c:	843fffc4 	addi	r16,r16,-1
 8045730:	8020933a 	slli	r16,r16,12
 8045734:	1400060e 	bge	r2,r16,8045750 <_malloc_trim_r+0x70>
 8045738:	000b883a 	mov	r5,zero
 804573c:	9009883a 	mov	r4,r18
 8045740:	804678c0 	call	804678c <_sbrk_r>
 8045744:	98c00217 	ldw	r3,8(r19)
 8045748:	1c47883a 	add	r3,r3,r17
 804574c:	10c00a26 	beq	r2,r3,8045778 <_malloc_trim_r+0x98>
 8045750:	9009883a 	mov	r4,r18
 8045754:	8046f780 	call	8046f78 <__malloc_unlock>
 8045758:	0005883a 	mov	r2,zero
 804575c:	dfc00417 	ldw	ra,16(sp)
 8045760:	dcc00317 	ldw	r19,12(sp)
 8045764:	dc800217 	ldw	r18,8(sp)
 8045768:	dc400117 	ldw	r17,4(sp)
 804576c:	dc000017 	ldw	r16,0(sp)
 8045770:	dec00504 	addi	sp,sp,20
 8045774:	f800283a 	ret
 8045778:	040bc83a 	sub	r5,zero,r16
 804577c:	9009883a 	mov	r4,r18
 8045780:	804678c0 	call	804678c <_sbrk_r>
 8045784:	00ffffc4 	movi	r3,-1
 8045788:	10c00d26 	beq	r2,r3,80457c0 <_malloc_trim_r+0xe0>
 804578c:	00c20174 	movhi	r3,2053
 8045790:	18ead504 	addi	r3,r3,-21676
 8045794:	18800017 	ldw	r2,0(r3)
 8045798:	99000217 	ldw	r4,8(r19)
 804579c:	8c23c83a 	sub	r17,r17,r16
 80457a0:	8c400054 	ori	r17,r17,1
 80457a4:	1421c83a 	sub	r16,r2,r16
 80457a8:	24400115 	stw	r17,4(r4)
 80457ac:	9009883a 	mov	r4,r18
 80457b0:	1c000015 	stw	r16,0(r3)
 80457b4:	8046f780 	call	8046f78 <__malloc_unlock>
 80457b8:	00800044 	movi	r2,1
 80457bc:	003fe706 	br	804575c <__alt_data_end+0xfffc575c>
 80457c0:	000b883a 	mov	r5,zero
 80457c4:	9009883a 	mov	r4,r18
 80457c8:	804678c0 	call	804678c <_sbrk_r>
 80457cc:	99000217 	ldw	r4,8(r19)
 80457d0:	014003c4 	movi	r5,15
 80457d4:	1107c83a 	sub	r3,r2,r4
 80457d8:	28ffdd0e 	bge	r5,r3,8045750 <__alt_data_end+0xfffc5750>
 80457dc:	01420174 	movhi	r5,2053
 80457e0:	2963f404 	addi	r5,r5,-28720
 80457e4:	29400017 	ldw	r5,0(r5)
 80457e8:	18c00054 	ori	r3,r3,1
 80457ec:	20c00115 	stw	r3,4(r4)
 80457f0:	00c20174 	movhi	r3,2053
 80457f4:	1145c83a 	sub	r2,r2,r5
 80457f8:	18ead504 	addi	r3,r3,-21676
 80457fc:	18800015 	stw	r2,0(r3)
 8045800:	003fd306 	br	8045750 <__alt_data_end+0xfffc5750>

08045804 <_free_r>:
 8045804:	28004126 	beq	r5,zero,804590c <_free_r+0x108>
 8045808:	defffd04 	addi	sp,sp,-12
 804580c:	dc400115 	stw	r17,4(sp)
 8045810:	dc000015 	stw	r16,0(sp)
 8045814:	2023883a 	mov	r17,r4
 8045818:	2821883a 	mov	r16,r5
 804581c:	dfc00215 	stw	ra,8(sp)
 8045820:	8046f540 	call	8046f54 <__malloc_lock>
 8045824:	81ffff17 	ldw	r7,-4(r16)
 8045828:	00bfff84 	movi	r2,-2
 804582c:	01020174 	movhi	r4,2053
 8045830:	81bffe04 	addi	r6,r16,-8
 8045834:	3884703a 	and	r2,r7,r2
 8045838:	2122df04 	addi	r4,r4,-29828
 804583c:	308b883a 	add	r5,r6,r2
 8045840:	2a400117 	ldw	r9,4(r5)
 8045844:	22000217 	ldw	r8,8(r4)
 8045848:	00ffff04 	movi	r3,-4
 804584c:	48c6703a 	and	r3,r9,r3
 8045850:	2a005726 	beq	r5,r8,80459b0 <_free_r+0x1ac>
 8045854:	28c00115 	stw	r3,4(r5)
 8045858:	39c0004c 	andi	r7,r7,1
 804585c:	3800091e 	bne	r7,zero,8045884 <_free_r+0x80>
 8045860:	823ffe17 	ldw	r8,-8(r16)
 8045864:	22400204 	addi	r9,r4,8
 8045868:	320dc83a 	sub	r6,r6,r8
 804586c:	31c00217 	ldw	r7,8(r6)
 8045870:	1205883a 	add	r2,r2,r8
 8045874:	3a406526 	beq	r7,r9,8045a0c <_free_r+0x208>
 8045878:	32000317 	ldw	r8,12(r6)
 804587c:	3a000315 	stw	r8,12(r7)
 8045880:	41c00215 	stw	r7,8(r8)
 8045884:	28cf883a 	add	r7,r5,r3
 8045888:	39c00117 	ldw	r7,4(r7)
 804588c:	39c0004c 	andi	r7,r7,1
 8045890:	38003a26 	beq	r7,zero,804597c <_free_r+0x178>
 8045894:	10c00054 	ori	r3,r2,1
 8045898:	30c00115 	stw	r3,4(r6)
 804589c:	3087883a 	add	r3,r6,r2
 80458a0:	18800015 	stw	r2,0(r3)
 80458a4:	00c07fc4 	movi	r3,511
 80458a8:	18801936 	bltu	r3,r2,8045910 <_free_r+0x10c>
 80458ac:	1004d0fa 	srli	r2,r2,3
 80458b0:	01c00044 	movi	r7,1
 80458b4:	21400117 	ldw	r5,4(r4)
 80458b8:	10c00044 	addi	r3,r2,1
 80458bc:	18c7883a 	add	r3,r3,r3
 80458c0:	1005d0ba 	srai	r2,r2,2
 80458c4:	18c7883a 	add	r3,r3,r3
 80458c8:	18c7883a 	add	r3,r3,r3
 80458cc:	1907883a 	add	r3,r3,r4
 80458d0:	3884983a 	sll	r2,r7,r2
 80458d4:	19c00017 	ldw	r7,0(r3)
 80458d8:	1a3ffe04 	addi	r8,r3,-8
 80458dc:	1144b03a 	or	r2,r2,r5
 80458e0:	32000315 	stw	r8,12(r6)
 80458e4:	31c00215 	stw	r7,8(r6)
 80458e8:	20800115 	stw	r2,4(r4)
 80458ec:	19800015 	stw	r6,0(r3)
 80458f0:	39800315 	stw	r6,12(r7)
 80458f4:	8809883a 	mov	r4,r17
 80458f8:	dfc00217 	ldw	ra,8(sp)
 80458fc:	dc400117 	ldw	r17,4(sp)
 8045900:	dc000017 	ldw	r16,0(sp)
 8045904:	dec00304 	addi	sp,sp,12
 8045908:	8046f781 	jmpi	8046f78 <__malloc_unlock>
 804590c:	f800283a 	ret
 8045910:	100ad27a 	srli	r5,r2,9
 8045914:	00c00104 	movi	r3,4
 8045918:	19404a36 	bltu	r3,r5,8045a44 <_free_r+0x240>
 804591c:	100ad1ba 	srli	r5,r2,6
 8045920:	28c00e44 	addi	r3,r5,57
 8045924:	18c7883a 	add	r3,r3,r3
 8045928:	29400e04 	addi	r5,r5,56
 804592c:	18c7883a 	add	r3,r3,r3
 8045930:	18c7883a 	add	r3,r3,r3
 8045934:	1909883a 	add	r4,r3,r4
 8045938:	20c00017 	ldw	r3,0(r4)
 804593c:	01c20174 	movhi	r7,2053
 8045940:	213ffe04 	addi	r4,r4,-8
 8045944:	39e2df04 	addi	r7,r7,-29828
 8045948:	20c04426 	beq	r4,r3,8045a5c <_free_r+0x258>
 804594c:	01ffff04 	movi	r7,-4
 8045950:	19400117 	ldw	r5,4(r3)
 8045954:	29ca703a 	and	r5,r5,r7
 8045958:	1140022e 	bgeu	r2,r5,8045964 <_free_r+0x160>
 804595c:	18c00217 	ldw	r3,8(r3)
 8045960:	20fffb1e 	bne	r4,r3,8045950 <__alt_data_end+0xfffc5950>
 8045964:	19000317 	ldw	r4,12(r3)
 8045968:	31000315 	stw	r4,12(r6)
 804596c:	30c00215 	stw	r3,8(r6)
 8045970:	21800215 	stw	r6,8(r4)
 8045974:	19800315 	stw	r6,12(r3)
 8045978:	003fde06 	br	80458f4 <__alt_data_end+0xfffc58f4>
 804597c:	29c00217 	ldw	r7,8(r5)
 8045980:	10c5883a 	add	r2,r2,r3
 8045984:	00c20174 	movhi	r3,2053
 8045988:	18e2e104 	addi	r3,r3,-29820
 804598c:	38c03b26 	beq	r7,r3,8045a7c <_free_r+0x278>
 8045990:	2a000317 	ldw	r8,12(r5)
 8045994:	11400054 	ori	r5,r2,1
 8045998:	3087883a 	add	r3,r6,r2
 804599c:	3a000315 	stw	r8,12(r7)
 80459a0:	41c00215 	stw	r7,8(r8)
 80459a4:	31400115 	stw	r5,4(r6)
 80459a8:	18800015 	stw	r2,0(r3)
 80459ac:	003fbd06 	br	80458a4 <__alt_data_end+0xfffc58a4>
 80459b0:	39c0004c 	andi	r7,r7,1
 80459b4:	10c5883a 	add	r2,r2,r3
 80459b8:	3800071e 	bne	r7,zero,80459d8 <_free_r+0x1d4>
 80459bc:	81fffe17 	ldw	r7,-8(r16)
 80459c0:	31cdc83a 	sub	r6,r6,r7
 80459c4:	30c00317 	ldw	r3,12(r6)
 80459c8:	31400217 	ldw	r5,8(r6)
 80459cc:	11c5883a 	add	r2,r2,r7
 80459d0:	28c00315 	stw	r3,12(r5)
 80459d4:	19400215 	stw	r5,8(r3)
 80459d8:	10c00054 	ori	r3,r2,1
 80459dc:	30c00115 	stw	r3,4(r6)
 80459e0:	00c20174 	movhi	r3,2053
 80459e4:	18e3f504 	addi	r3,r3,-28716
 80459e8:	18c00017 	ldw	r3,0(r3)
 80459ec:	21800215 	stw	r6,8(r4)
 80459f0:	10ffc036 	bltu	r2,r3,80458f4 <__alt_data_end+0xfffc58f4>
 80459f4:	00820174 	movhi	r2,2053
 80459f8:	10aad404 	addi	r2,r2,-21680
 80459fc:	11400017 	ldw	r5,0(r2)
 8045a00:	8809883a 	mov	r4,r17
 8045a04:	80456e00 	call	80456e0 <_malloc_trim_r>
 8045a08:	003fba06 	br	80458f4 <__alt_data_end+0xfffc58f4>
 8045a0c:	28c9883a 	add	r4,r5,r3
 8045a10:	21000117 	ldw	r4,4(r4)
 8045a14:	2100004c 	andi	r4,r4,1
 8045a18:	2000391e 	bne	r4,zero,8045b00 <_free_r+0x2fc>
 8045a1c:	29c00217 	ldw	r7,8(r5)
 8045a20:	29000317 	ldw	r4,12(r5)
 8045a24:	1885883a 	add	r2,r3,r2
 8045a28:	10c00054 	ori	r3,r2,1
 8045a2c:	39000315 	stw	r4,12(r7)
 8045a30:	21c00215 	stw	r7,8(r4)
 8045a34:	30c00115 	stw	r3,4(r6)
 8045a38:	308d883a 	add	r6,r6,r2
 8045a3c:	30800015 	stw	r2,0(r6)
 8045a40:	003fac06 	br	80458f4 <__alt_data_end+0xfffc58f4>
 8045a44:	00c00504 	movi	r3,20
 8045a48:	19401536 	bltu	r3,r5,8045aa0 <_free_r+0x29c>
 8045a4c:	28c01704 	addi	r3,r5,92
 8045a50:	18c7883a 	add	r3,r3,r3
 8045a54:	294016c4 	addi	r5,r5,91
 8045a58:	003fb406 	br	804592c <__alt_data_end+0xfffc592c>
 8045a5c:	280bd0ba 	srai	r5,r5,2
 8045a60:	00c00044 	movi	r3,1
 8045a64:	38800117 	ldw	r2,4(r7)
 8045a68:	194a983a 	sll	r5,r3,r5
 8045a6c:	2007883a 	mov	r3,r4
 8045a70:	2884b03a 	or	r2,r5,r2
 8045a74:	38800115 	stw	r2,4(r7)
 8045a78:	003fbb06 	br	8045968 <__alt_data_end+0xfffc5968>
 8045a7c:	21800515 	stw	r6,20(r4)
 8045a80:	21800415 	stw	r6,16(r4)
 8045a84:	10c00054 	ori	r3,r2,1
 8045a88:	31c00315 	stw	r7,12(r6)
 8045a8c:	31c00215 	stw	r7,8(r6)
 8045a90:	30c00115 	stw	r3,4(r6)
 8045a94:	308d883a 	add	r6,r6,r2
 8045a98:	30800015 	stw	r2,0(r6)
 8045a9c:	003f9506 	br	80458f4 <__alt_data_end+0xfffc58f4>
 8045aa0:	00c01504 	movi	r3,84
 8045aa4:	19400536 	bltu	r3,r5,8045abc <_free_r+0x2b8>
 8045aa8:	100ad33a 	srli	r5,r2,12
 8045aac:	28c01bc4 	addi	r3,r5,111
 8045ab0:	18c7883a 	add	r3,r3,r3
 8045ab4:	29401b84 	addi	r5,r5,110
 8045ab8:	003f9c06 	br	804592c <__alt_data_end+0xfffc592c>
 8045abc:	00c05504 	movi	r3,340
 8045ac0:	19400536 	bltu	r3,r5,8045ad8 <_free_r+0x2d4>
 8045ac4:	100ad3fa 	srli	r5,r2,15
 8045ac8:	28c01e04 	addi	r3,r5,120
 8045acc:	18c7883a 	add	r3,r3,r3
 8045ad0:	29401dc4 	addi	r5,r5,119
 8045ad4:	003f9506 	br	804592c <__alt_data_end+0xfffc592c>
 8045ad8:	00c15504 	movi	r3,1364
 8045adc:	19400536 	bltu	r3,r5,8045af4 <_free_r+0x2f0>
 8045ae0:	100ad4ba 	srli	r5,r2,18
 8045ae4:	28c01f44 	addi	r3,r5,125
 8045ae8:	18c7883a 	add	r3,r3,r3
 8045aec:	29401f04 	addi	r5,r5,124
 8045af0:	003f8e06 	br	804592c <__alt_data_end+0xfffc592c>
 8045af4:	00c03f84 	movi	r3,254
 8045af8:	01401f84 	movi	r5,126
 8045afc:	003f8b06 	br	804592c <__alt_data_end+0xfffc592c>
 8045b00:	10c00054 	ori	r3,r2,1
 8045b04:	30c00115 	stw	r3,4(r6)
 8045b08:	308d883a 	add	r6,r6,r2
 8045b0c:	30800015 	stw	r2,0(r6)
 8045b10:	003f7806 	br	80458f4 <__alt_data_end+0xfffc58f4>

08045b14 <_fwalk>:
 8045b14:	defff704 	addi	sp,sp,-36
 8045b18:	dd000415 	stw	r20,16(sp)
 8045b1c:	dfc00815 	stw	ra,32(sp)
 8045b20:	ddc00715 	stw	r23,28(sp)
 8045b24:	dd800615 	stw	r22,24(sp)
 8045b28:	dd400515 	stw	r21,20(sp)
 8045b2c:	dcc00315 	stw	r19,12(sp)
 8045b30:	dc800215 	stw	r18,8(sp)
 8045b34:	dc400115 	stw	r17,4(sp)
 8045b38:	dc000015 	stw	r16,0(sp)
 8045b3c:	2500b804 	addi	r20,r4,736
 8045b40:	a0002326 	beq	r20,zero,8045bd0 <_fwalk+0xbc>
 8045b44:	282b883a 	mov	r21,r5
 8045b48:	002f883a 	mov	r23,zero
 8045b4c:	05800044 	movi	r22,1
 8045b50:	04ffffc4 	movi	r19,-1
 8045b54:	a4400117 	ldw	r17,4(r20)
 8045b58:	a4800217 	ldw	r18,8(r20)
 8045b5c:	8c7fffc4 	addi	r17,r17,-1
 8045b60:	88000d16 	blt	r17,zero,8045b98 <_fwalk+0x84>
 8045b64:	94000304 	addi	r16,r18,12
 8045b68:	94800384 	addi	r18,r18,14
 8045b6c:	8080000b 	ldhu	r2,0(r16)
 8045b70:	8c7fffc4 	addi	r17,r17,-1
 8045b74:	813ffd04 	addi	r4,r16,-12
 8045b78:	b080042e 	bgeu	r22,r2,8045b8c <_fwalk+0x78>
 8045b7c:	9080000f 	ldh	r2,0(r18)
 8045b80:	14c00226 	beq	r2,r19,8045b8c <_fwalk+0x78>
 8045b84:	a83ee83a 	callr	r21
 8045b88:	b8aeb03a 	or	r23,r23,r2
 8045b8c:	84001a04 	addi	r16,r16,104
 8045b90:	94801a04 	addi	r18,r18,104
 8045b94:	8cfff51e 	bne	r17,r19,8045b6c <__alt_data_end+0xfffc5b6c>
 8045b98:	a5000017 	ldw	r20,0(r20)
 8045b9c:	a03fed1e 	bne	r20,zero,8045b54 <__alt_data_end+0xfffc5b54>
 8045ba0:	b805883a 	mov	r2,r23
 8045ba4:	dfc00817 	ldw	ra,32(sp)
 8045ba8:	ddc00717 	ldw	r23,28(sp)
 8045bac:	dd800617 	ldw	r22,24(sp)
 8045bb0:	dd400517 	ldw	r21,20(sp)
 8045bb4:	dd000417 	ldw	r20,16(sp)
 8045bb8:	dcc00317 	ldw	r19,12(sp)
 8045bbc:	dc800217 	ldw	r18,8(sp)
 8045bc0:	dc400117 	ldw	r17,4(sp)
 8045bc4:	dc000017 	ldw	r16,0(sp)
 8045bc8:	dec00904 	addi	sp,sp,36
 8045bcc:	f800283a 	ret
 8045bd0:	002f883a 	mov	r23,zero
 8045bd4:	003ff206 	br	8045ba0 <__alt_data_end+0xfffc5ba0>

08045bd8 <_fwalk_reent>:
 8045bd8:	defff704 	addi	sp,sp,-36
 8045bdc:	dd000415 	stw	r20,16(sp)
 8045be0:	dfc00815 	stw	ra,32(sp)
 8045be4:	ddc00715 	stw	r23,28(sp)
 8045be8:	dd800615 	stw	r22,24(sp)
 8045bec:	dd400515 	stw	r21,20(sp)
 8045bf0:	dcc00315 	stw	r19,12(sp)
 8045bf4:	dc800215 	stw	r18,8(sp)
 8045bf8:	dc400115 	stw	r17,4(sp)
 8045bfc:	dc000015 	stw	r16,0(sp)
 8045c00:	2500b804 	addi	r20,r4,736
 8045c04:	a0002326 	beq	r20,zero,8045c94 <_fwalk_reent+0xbc>
 8045c08:	282b883a 	mov	r21,r5
 8045c0c:	2027883a 	mov	r19,r4
 8045c10:	002f883a 	mov	r23,zero
 8045c14:	05800044 	movi	r22,1
 8045c18:	04bfffc4 	movi	r18,-1
 8045c1c:	a4400117 	ldw	r17,4(r20)
 8045c20:	a4000217 	ldw	r16,8(r20)
 8045c24:	8c7fffc4 	addi	r17,r17,-1
 8045c28:	88000c16 	blt	r17,zero,8045c5c <_fwalk_reent+0x84>
 8045c2c:	84000304 	addi	r16,r16,12
 8045c30:	8080000b 	ldhu	r2,0(r16)
 8045c34:	8c7fffc4 	addi	r17,r17,-1
 8045c38:	817ffd04 	addi	r5,r16,-12
 8045c3c:	b080052e 	bgeu	r22,r2,8045c54 <_fwalk_reent+0x7c>
 8045c40:	8080008f 	ldh	r2,2(r16)
 8045c44:	9809883a 	mov	r4,r19
 8045c48:	14800226 	beq	r2,r18,8045c54 <_fwalk_reent+0x7c>
 8045c4c:	a83ee83a 	callr	r21
 8045c50:	b8aeb03a 	or	r23,r23,r2
 8045c54:	84001a04 	addi	r16,r16,104
 8045c58:	8cbff51e 	bne	r17,r18,8045c30 <__alt_data_end+0xfffc5c30>
 8045c5c:	a5000017 	ldw	r20,0(r20)
 8045c60:	a03fee1e 	bne	r20,zero,8045c1c <__alt_data_end+0xfffc5c1c>
 8045c64:	b805883a 	mov	r2,r23
 8045c68:	dfc00817 	ldw	ra,32(sp)
 8045c6c:	ddc00717 	ldw	r23,28(sp)
 8045c70:	dd800617 	ldw	r22,24(sp)
 8045c74:	dd400517 	ldw	r21,20(sp)
 8045c78:	dd000417 	ldw	r20,16(sp)
 8045c7c:	dcc00317 	ldw	r19,12(sp)
 8045c80:	dc800217 	ldw	r18,8(sp)
 8045c84:	dc400117 	ldw	r17,4(sp)
 8045c88:	dc000017 	ldw	r16,0(sp)
 8045c8c:	dec00904 	addi	sp,sp,36
 8045c90:	f800283a 	ret
 8045c94:	002f883a 	mov	r23,zero
 8045c98:	003ff206 	br	8045c64 <__alt_data_end+0xfffc5c64>

08045c9c <__smakebuf_r>:
 8045c9c:	2880030b 	ldhu	r2,12(r5)
 8045ca0:	10c0008c 	andi	r3,r2,2
 8045ca4:	1800411e 	bne	r3,zero,8045dac <__smakebuf_r+0x110>
 8045ca8:	deffec04 	addi	sp,sp,-80
 8045cac:	dc000f15 	stw	r16,60(sp)
 8045cb0:	2821883a 	mov	r16,r5
 8045cb4:	2940038f 	ldh	r5,14(r5)
 8045cb8:	dc401015 	stw	r17,64(sp)
 8045cbc:	dfc01315 	stw	ra,76(sp)
 8045cc0:	dcc01215 	stw	r19,72(sp)
 8045cc4:	dc801115 	stw	r18,68(sp)
 8045cc8:	2023883a 	mov	r17,r4
 8045ccc:	28001c16 	blt	r5,zero,8045d40 <__smakebuf_r+0xa4>
 8045cd0:	d80d883a 	mov	r6,sp
 8045cd4:	8046ad40 	call	8046ad4 <_fstat_r>
 8045cd8:	10001816 	blt	r2,zero,8045d3c <__smakebuf_r+0xa0>
 8045cdc:	d8800117 	ldw	r2,4(sp)
 8045ce0:	00e00014 	movui	r3,32768
 8045ce4:	10bc000c 	andi	r2,r2,61440
 8045ce8:	14c80020 	cmpeqi	r19,r2,8192
 8045cec:	10c03726 	beq	r2,r3,8045dcc <__smakebuf_r+0x130>
 8045cf0:	80c0030b 	ldhu	r3,12(r16)
 8045cf4:	18c20014 	ori	r3,r3,2048
 8045cf8:	80c0030d 	sth	r3,12(r16)
 8045cfc:	00c80004 	movi	r3,8192
 8045d00:	10c0521e 	bne	r2,r3,8045e4c <__smakebuf_r+0x1b0>
 8045d04:	8140038f 	ldh	r5,14(r16)
 8045d08:	8809883a 	mov	r4,r17
 8045d0c:	8046b300 	call	8046b30 <_isatty_r>
 8045d10:	10004c26 	beq	r2,zero,8045e44 <__smakebuf_r+0x1a8>
 8045d14:	8080030b 	ldhu	r2,12(r16)
 8045d18:	80c010c4 	addi	r3,r16,67
 8045d1c:	80c00015 	stw	r3,0(r16)
 8045d20:	10800054 	ori	r2,r2,1
 8045d24:	8080030d 	sth	r2,12(r16)
 8045d28:	00800044 	movi	r2,1
 8045d2c:	80c00415 	stw	r3,16(r16)
 8045d30:	80800515 	stw	r2,20(r16)
 8045d34:	04810004 	movi	r18,1024
 8045d38:	00000706 	br	8045d58 <__smakebuf_r+0xbc>
 8045d3c:	8080030b 	ldhu	r2,12(r16)
 8045d40:	10c0200c 	andi	r3,r2,128
 8045d44:	18001f1e 	bne	r3,zero,8045dc4 <__smakebuf_r+0x128>
 8045d48:	04810004 	movi	r18,1024
 8045d4c:	10820014 	ori	r2,r2,2048
 8045d50:	8080030d 	sth	r2,12(r16)
 8045d54:	0027883a 	mov	r19,zero
 8045d58:	900b883a 	mov	r5,r18
 8045d5c:	8809883a 	mov	r4,r17
 8045d60:	8045e580 	call	8045e58 <_malloc_r>
 8045d64:	10002c26 	beq	r2,zero,8045e18 <__smakebuf_r+0x17c>
 8045d68:	80c0030b 	ldhu	r3,12(r16)
 8045d6c:	01020134 	movhi	r4,2052
 8045d70:	2114d204 	addi	r4,r4,21320
 8045d74:	89000f15 	stw	r4,60(r17)
 8045d78:	18c02014 	ori	r3,r3,128
 8045d7c:	80c0030d 	sth	r3,12(r16)
 8045d80:	80800015 	stw	r2,0(r16)
 8045d84:	80800415 	stw	r2,16(r16)
 8045d88:	84800515 	stw	r18,20(r16)
 8045d8c:	98001a1e 	bne	r19,zero,8045df8 <__smakebuf_r+0x15c>
 8045d90:	dfc01317 	ldw	ra,76(sp)
 8045d94:	dcc01217 	ldw	r19,72(sp)
 8045d98:	dc801117 	ldw	r18,68(sp)
 8045d9c:	dc401017 	ldw	r17,64(sp)
 8045da0:	dc000f17 	ldw	r16,60(sp)
 8045da4:	dec01404 	addi	sp,sp,80
 8045da8:	f800283a 	ret
 8045dac:	288010c4 	addi	r2,r5,67
 8045db0:	28800015 	stw	r2,0(r5)
 8045db4:	28800415 	stw	r2,16(r5)
 8045db8:	00800044 	movi	r2,1
 8045dbc:	28800515 	stw	r2,20(r5)
 8045dc0:	f800283a 	ret
 8045dc4:	04801004 	movi	r18,64
 8045dc8:	003fe006 	br	8045d4c <__alt_data_end+0xfffc5d4c>
 8045dcc:	81000a17 	ldw	r4,40(r16)
 8045dd0:	00c20134 	movhi	r3,2052
 8045dd4:	18da2e04 	addi	r3,r3,26808
 8045dd8:	20ffc51e 	bne	r4,r3,8045cf0 <__alt_data_end+0xfffc5cf0>
 8045ddc:	8080030b 	ldhu	r2,12(r16)
 8045de0:	04810004 	movi	r18,1024
 8045de4:	84801315 	stw	r18,76(r16)
 8045de8:	1484b03a 	or	r2,r2,r18
 8045dec:	8080030d 	sth	r2,12(r16)
 8045df0:	0027883a 	mov	r19,zero
 8045df4:	003fd806 	br	8045d58 <__alt_data_end+0xfffc5d58>
 8045df8:	8140038f 	ldh	r5,14(r16)
 8045dfc:	8809883a 	mov	r4,r17
 8045e00:	8046b300 	call	8046b30 <_isatty_r>
 8045e04:	103fe226 	beq	r2,zero,8045d90 <__alt_data_end+0xfffc5d90>
 8045e08:	8080030b 	ldhu	r2,12(r16)
 8045e0c:	10800054 	ori	r2,r2,1
 8045e10:	8080030d 	sth	r2,12(r16)
 8045e14:	003fde06 	br	8045d90 <__alt_data_end+0xfffc5d90>
 8045e18:	8080030b 	ldhu	r2,12(r16)
 8045e1c:	10c0800c 	andi	r3,r2,512
 8045e20:	183fdb1e 	bne	r3,zero,8045d90 <__alt_data_end+0xfffc5d90>
 8045e24:	10800094 	ori	r2,r2,2
 8045e28:	80c010c4 	addi	r3,r16,67
 8045e2c:	8080030d 	sth	r2,12(r16)
 8045e30:	00800044 	movi	r2,1
 8045e34:	80c00015 	stw	r3,0(r16)
 8045e38:	80c00415 	stw	r3,16(r16)
 8045e3c:	80800515 	stw	r2,20(r16)
 8045e40:	003fd306 	br	8045d90 <__alt_data_end+0xfffc5d90>
 8045e44:	04810004 	movi	r18,1024
 8045e48:	003fc306 	br	8045d58 <__alt_data_end+0xfffc5d58>
 8045e4c:	0027883a 	mov	r19,zero
 8045e50:	04810004 	movi	r18,1024
 8045e54:	003fc006 	br	8045d58 <__alt_data_end+0xfffc5d58>

08045e58 <_malloc_r>:
 8045e58:	defff504 	addi	sp,sp,-44
 8045e5c:	dc800315 	stw	r18,12(sp)
 8045e60:	dfc00a15 	stw	ra,40(sp)
 8045e64:	df000915 	stw	fp,36(sp)
 8045e68:	ddc00815 	stw	r23,32(sp)
 8045e6c:	dd800715 	stw	r22,28(sp)
 8045e70:	dd400615 	stw	r21,24(sp)
 8045e74:	dd000515 	stw	r20,20(sp)
 8045e78:	dcc00415 	stw	r19,16(sp)
 8045e7c:	dc400215 	stw	r17,8(sp)
 8045e80:	dc000115 	stw	r16,4(sp)
 8045e84:	288002c4 	addi	r2,r5,11
 8045e88:	00c00584 	movi	r3,22
 8045e8c:	2025883a 	mov	r18,r4
 8045e90:	18807f2e 	bgeu	r3,r2,8046090 <_malloc_r+0x238>
 8045e94:	047ffe04 	movi	r17,-8
 8045e98:	1462703a 	and	r17,r2,r17
 8045e9c:	8800a316 	blt	r17,zero,804612c <_malloc_r+0x2d4>
 8045ea0:	8940a236 	bltu	r17,r5,804612c <_malloc_r+0x2d4>
 8045ea4:	8046f540 	call	8046f54 <__malloc_lock>
 8045ea8:	00807dc4 	movi	r2,503
 8045eac:	1441e92e 	bgeu	r2,r17,8046654 <_malloc_r+0x7fc>
 8045eb0:	8804d27a 	srli	r2,r17,9
 8045eb4:	1000a126 	beq	r2,zero,804613c <_malloc_r+0x2e4>
 8045eb8:	00c00104 	movi	r3,4
 8045ebc:	18811e36 	bltu	r3,r2,8046338 <_malloc_r+0x4e0>
 8045ec0:	8804d1ba 	srli	r2,r17,6
 8045ec4:	12000e44 	addi	r8,r2,57
 8045ec8:	11c00e04 	addi	r7,r2,56
 8045ecc:	4209883a 	add	r4,r8,r8
 8045ed0:	04c20174 	movhi	r19,2053
 8045ed4:	2109883a 	add	r4,r4,r4
 8045ed8:	9ce2df04 	addi	r19,r19,-29828
 8045edc:	2109883a 	add	r4,r4,r4
 8045ee0:	9909883a 	add	r4,r19,r4
 8045ee4:	24000117 	ldw	r16,4(r4)
 8045ee8:	213ffe04 	addi	r4,r4,-8
 8045eec:	24009726 	beq	r4,r16,804614c <_malloc_r+0x2f4>
 8045ef0:	80800117 	ldw	r2,4(r16)
 8045ef4:	01bfff04 	movi	r6,-4
 8045ef8:	014003c4 	movi	r5,15
 8045efc:	1184703a 	and	r2,r2,r6
 8045f00:	1447c83a 	sub	r3,r2,r17
 8045f04:	28c00716 	blt	r5,r3,8045f24 <_malloc_r+0xcc>
 8045f08:	1800920e 	bge	r3,zero,8046154 <_malloc_r+0x2fc>
 8045f0c:	84000317 	ldw	r16,12(r16)
 8045f10:	24008e26 	beq	r4,r16,804614c <_malloc_r+0x2f4>
 8045f14:	80800117 	ldw	r2,4(r16)
 8045f18:	1184703a 	and	r2,r2,r6
 8045f1c:	1447c83a 	sub	r3,r2,r17
 8045f20:	28fff90e 	bge	r5,r3,8045f08 <__alt_data_end+0xfffc5f08>
 8045f24:	3809883a 	mov	r4,r7
 8045f28:	01820174 	movhi	r6,2053
 8045f2c:	9c000417 	ldw	r16,16(r19)
 8045f30:	31a2df04 	addi	r6,r6,-29828
 8045f34:	32000204 	addi	r8,r6,8
 8045f38:	82013426 	beq	r16,r8,804640c <_malloc_r+0x5b4>
 8045f3c:	80c00117 	ldw	r3,4(r16)
 8045f40:	00bfff04 	movi	r2,-4
 8045f44:	188e703a 	and	r7,r3,r2
 8045f48:	3c45c83a 	sub	r2,r7,r17
 8045f4c:	00c003c4 	movi	r3,15
 8045f50:	18811f16 	blt	r3,r2,80463d0 <_malloc_r+0x578>
 8045f54:	32000515 	stw	r8,20(r6)
 8045f58:	32000415 	stw	r8,16(r6)
 8045f5c:	10007f0e 	bge	r2,zero,804615c <_malloc_r+0x304>
 8045f60:	00807fc4 	movi	r2,511
 8045f64:	11c0fd36 	bltu	r2,r7,804635c <_malloc_r+0x504>
 8045f68:	3806d0fa 	srli	r3,r7,3
 8045f6c:	01c00044 	movi	r7,1
 8045f70:	30800117 	ldw	r2,4(r6)
 8045f74:	19400044 	addi	r5,r3,1
 8045f78:	294b883a 	add	r5,r5,r5
 8045f7c:	1807d0ba 	srai	r3,r3,2
 8045f80:	294b883a 	add	r5,r5,r5
 8045f84:	294b883a 	add	r5,r5,r5
 8045f88:	298b883a 	add	r5,r5,r6
 8045f8c:	38c6983a 	sll	r3,r7,r3
 8045f90:	29c00017 	ldw	r7,0(r5)
 8045f94:	2a7ffe04 	addi	r9,r5,-8
 8045f98:	1886b03a 	or	r3,r3,r2
 8045f9c:	82400315 	stw	r9,12(r16)
 8045fa0:	81c00215 	stw	r7,8(r16)
 8045fa4:	30c00115 	stw	r3,4(r6)
 8045fa8:	2c000015 	stw	r16,0(r5)
 8045fac:	3c000315 	stw	r16,12(r7)
 8045fb0:	2005d0ba 	srai	r2,r4,2
 8045fb4:	01400044 	movi	r5,1
 8045fb8:	288a983a 	sll	r5,r5,r2
 8045fbc:	19406f36 	bltu	r3,r5,804617c <_malloc_r+0x324>
 8045fc0:	28c4703a 	and	r2,r5,r3
 8045fc4:	10000a1e 	bne	r2,zero,8045ff0 <_malloc_r+0x198>
 8045fc8:	00bfff04 	movi	r2,-4
 8045fcc:	294b883a 	add	r5,r5,r5
 8045fd0:	2088703a 	and	r4,r4,r2
 8045fd4:	28c4703a 	and	r2,r5,r3
 8045fd8:	21000104 	addi	r4,r4,4
 8045fdc:	1000041e 	bne	r2,zero,8045ff0 <_malloc_r+0x198>
 8045fe0:	294b883a 	add	r5,r5,r5
 8045fe4:	28c4703a 	and	r2,r5,r3
 8045fe8:	21000104 	addi	r4,r4,4
 8045fec:	103ffc26 	beq	r2,zero,8045fe0 <__alt_data_end+0xfffc5fe0>
 8045ff0:	02bfff04 	movi	r10,-4
 8045ff4:	024003c4 	movi	r9,15
 8045ff8:	21800044 	addi	r6,r4,1
 8045ffc:	318d883a 	add	r6,r6,r6
 8046000:	318d883a 	add	r6,r6,r6
 8046004:	318d883a 	add	r6,r6,r6
 8046008:	998d883a 	add	r6,r19,r6
 804600c:	333ffe04 	addi	r12,r6,-8
 8046010:	2017883a 	mov	r11,r4
 8046014:	31800104 	addi	r6,r6,4
 8046018:	34000017 	ldw	r16,0(r6)
 804601c:	31fffd04 	addi	r7,r6,-12
 8046020:	81c0041e 	bne	r16,r7,8046034 <_malloc_r+0x1dc>
 8046024:	0000fb06 	br	8046414 <_malloc_r+0x5bc>
 8046028:	1801030e 	bge	r3,zero,8046438 <_malloc_r+0x5e0>
 804602c:	84000317 	ldw	r16,12(r16)
 8046030:	81c0f826 	beq	r16,r7,8046414 <_malloc_r+0x5bc>
 8046034:	80800117 	ldw	r2,4(r16)
 8046038:	1284703a 	and	r2,r2,r10
 804603c:	1447c83a 	sub	r3,r2,r17
 8046040:	48fff90e 	bge	r9,r3,8046028 <__alt_data_end+0xfffc6028>
 8046044:	80800317 	ldw	r2,12(r16)
 8046048:	81000217 	ldw	r4,8(r16)
 804604c:	89400054 	ori	r5,r17,1
 8046050:	81400115 	stw	r5,4(r16)
 8046054:	20800315 	stw	r2,12(r4)
 8046058:	11000215 	stw	r4,8(r2)
 804605c:	8463883a 	add	r17,r16,r17
 8046060:	9c400515 	stw	r17,20(r19)
 8046064:	9c400415 	stw	r17,16(r19)
 8046068:	18800054 	ori	r2,r3,1
 804606c:	88800115 	stw	r2,4(r17)
 8046070:	8a000315 	stw	r8,12(r17)
 8046074:	8a000215 	stw	r8,8(r17)
 8046078:	88e3883a 	add	r17,r17,r3
 804607c:	88c00015 	stw	r3,0(r17)
 8046080:	9009883a 	mov	r4,r18
 8046084:	8046f780 	call	8046f78 <__malloc_unlock>
 8046088:	80800204 	addi	r2,r16,8
 804608c:	00001b06 	br	80460fc <_malloc_r+0x2a4>
 8046090:	04400404 	movi	r17,16
 8046094:	89402536 	bltu	r17,r5,804612c <_malloc_r+0x2d4>
 8046098:	8046f540 	call	8046f54 <__malloc_lock>
 804609c:	00800184 	movi	r2,6
 80460a0:	01000084 	movi	r4,2
 80460a4:	04c20174 	movhi	r19,2053
 80460a8:	1085883a 	add	r2,r2,r2
 80460ac:	9ce2df04 	addi	r19,r19,-29828
 80460b0:	1085883a 	add	r2,r2,r2
 80460b4:	9885883a 	add	r2,r19,r2
 80460b8:	14000117 	ldw	r16,4(r2)
 80460bc:	10fffe04 	addi	r3,r2,-8
 80460c0:	80c0d926 	beq	r16,r3,8046428 <_malloc_r+0x5d0>
 80460c4:	80c00117 	ldw	r3,4(r16)
 80460c8:	81000317 	ldw	r4,12(r16)
 80460cc:	00bfff04 	movi	r2,-4
 80460d0:	1884703a 	and	r2,r3,r2
 80460d4:	81400217 	ldw	r5,8(r16)
 80460d8:	8085883a 	add	r2,r16,r2
 80460dc:	10c00117 	ldw	r3,4(r2)
 80460e0:	29000315 	stw	r4,12(r5)
 80460e4:	21400215 	stw	r5,8(r4)
 80460e8:	18c00054 	ori	r3,r3,1
 80460ec:	10c00115 	stw	r3,4(r2)
 80460f0:	9009883a 	mov	r4,r18
 80460f4:	8046f780 	call	8046f78 <__malloc_unlock>
 80460f8:	80800204 	addi	r2,r16,8
 80460fc:	dfc00a17 	ldw	ra,40(sp)
 8046100:	df000917 	ldw	fp,36(sp)
 8046104:	ddc00817 	ldw	r23,32(sp)
 8046108:	dd800717 	ldw	r22,28(sp)
 804610c:	dd400617 	ldw	r21,24(sp)
 8046110:	dd000517 	ldw	r20,20(sp)
 8046114:	dcc00417 	ldw	r19,16(sp)
 8046118:	dc800317 	ldw	r18,12(sp)
 804611c:	dc400217 	ldw	r17,8(sp)
 8046120:	dc000117 	ldw	r16,4(sp)
 8046124:	dec00b04 	addi	sp,sp,44
 8046128:	f800283a 	ret
 804612c:	00800304 	movi	r2,12
 8046130:	90800015 	stw	r2,0(r18)
 8046134:	0005883a 	mov	r2,zero
 8046138:	003ff006 	br	80460fc <__alt_data_end+0xfffc60fc>
 804613c:	01002004 	movi	r4,128
 8046140:	02001004 	movi	r8,64
 8046144:	01c00fc4 	movi	r7,63
 8046148:	003f6106 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 804614c:	4009883a 	mov	r4,r8
 8046150:	003f7506 	br	8045f28 <__alt_data_end+0xfffc5f28>
 8046154:	81000317 	ldw	r4,12(r16)
 8046158:	003fde06 	br	80460d4 <__alt_data_end+0xfffc60d4>
 804615c:	81c5883a 	add	r2,r16,r7
 8046160:	11400117 	ldw	r5,4(r2)
 8046164:	9009883a 	mov	r4,r18
 8046168:	29400054 	ori	r5,r5,1
 804616c:	11400115 	stw	r5,4(r2)
 8046170:	8046f780 	call	8046f78 <__malloc_unlock>
 8046174:	80800204 	addi	r2,r16,8
 8046178:	003fe006 	br	80460fc <__alt_data_end+0xfffc60fc>
 804617c:	9c000217 	ldw	r16,8(r19)
 8046180:	00bfff04 	movi	r2,-4
 8046184:	85800117 	ldw	r22,4(r16)
 8046188:	b0ac703a 	and	r22,r22,r2
 804618c:	b4400336 	bltu	r22,r17,804619c <_malloc_r+0x344>
 8046190:	b445c83a 	sub	r2,r22,r17
 8046194:	00c003c4 	movi	r3,15
 8046198:	18805d16 	blt	r3,r2,8046310 <_malloc_r+0x4b8>
 804619c:	05c20174 	movhi	r23,2053
 80461a0:	00820174 	movhi	r2,2053
 80461a4:	10aad404 	addi	r2,r2,-21680
 80461a8:	bde3f404 	addi	r23,r23,-28720
 80461ac:	15400017 	ldw	r21,0(r2)
 80461b0:	b8c00017 	ldw	r3,0(r23)
 80461b4:	00bfffc4 	movi	r2,-1
 80461b8:	858d883a 	add	r6,r16,r22
 80461bc:	8d6b883a 	add	r21,r17,r21
 80461c0:	1880ea26 	beq	r3,r2,804656c <_malloc_r+0x714>
 80461c4:	ad4403c4 	addi	r21,r21,4111
 80461c8:	00bc0004 	movi	r2,-4096
 80461cc:	a8aa703a 	and	r21,r21,r2
 80461d0:	a80b883a 	mov	r5,r21
 80461d4:	9009883a 	mov	r4,r18
 80461d8:	d9800015 	stw	r6,0(sp)
 80461dc:	804678c0 	call	804678c <_sbrk_r>
 80461e0:	1029883a 	mov	r20,r2
 80461e4:	00bfffc4 	movi	r2,-1
 80461e8:	d9800017 	ldw	r6,0(sp)
 80461ec:	a080e826 	beq	r20,r2,8046590 <_malloc_r+0x738>
 80461f0:	a180a636 	bltu	r20,r6,804648c <_malloc_r+0x634>
 80461f4:	07020174 	movhi	fp,2053
 80461f8:	e72ad504 	addi	fp,fp,-21676
 80461fc:	e0800017 	ldw	r2,0(fp)
 8046200:	a887883a 	add	r3,r21,r2
 8046204:	e0c00015 	stw	r3,0(fp)
 8046208:	3500e626 	beq	r6,r20,80465a4 <_malloc_r+0x74c>
 804620c:	b9000017 	ldw	r4,0(r23)
 8046210:	00bfffc4 	movi	r2,-1
 8046214:	2080ee26 	beq	r4,r2,80465d0 <_malloc_r+0x778>
 8046218:	a185c83a 	sub	r2,r20,r6
 804621c:	10c5883a 	add	r2,r2,r3
 8046220:	e0800015 	stw	r2,0(fp)
 8046224:	a0c001cc 	andi	r3,r20,7
 8046228:	1800bc26 	beq	r3,zero,804651c <_malloc_r+0x6c4>
 804622c:	a0e9c83a 	sub	r20,r20,r3
 8046230:	00840204 	movi	r2,4104
 8046234:	a5000204 	addi	r20,r20,8
 8046238:	10c7c83a 	sub	r3,r2,r3
 804623c:	a545883a 	add	r2,r20,r21
 8046240:	1083ffcc 	andi	r2,r2,4095
 8046244:	18abc83a 	sub	r21,r3,r2
 8046248:	a80b883a 	mov	r5,r21
 804624c:	9009883a 	mov	r4,r18
 8046250:	804678c0 	call	804678c <_sbrk_r>
 8046254:	00ffffc4 	movi	r3,-1
 8046258:	10c0e126 	beq	r2,r3,80465e0 <_malloc_r+0x788>
 804625c:	1505c83a 	sub	r2,r2,r20
 8046260:	1545883a 	add	r2,r2,r21
 8046264:	10800054 	ori	r2,r2,1
 8046268:	e0c00017 	ldw	r3,0(fp)
 804626c:	9d000215 	stw	r20,8(r19)
 8046270:	a0800115 	stw	r2,4(r20)
 8046274:	a8c7883a 	add	r3,r21,r3
 8046278:	e0c00015 	stw	r3,0(fp)
 804627c:	84c00e26 	beq	r16,r19,80462b8 <_malloc_r+0x460>
 8046280:	018003c4 	movi	r6,15
 8046284:	3580a72e 	bgeu	r6,r22,8046524 <_malloc_r+0x6cc>
 8046288:	81400117 	ldw	r5,4(r16)
 804628c:	013ffe04 	movi	r4,-8
 8046290:	b0bffd04 	addi	r2,r22,-12
 8046294:	1104703a 	and	r2,r2,r4
 8046298:	2900004c 	andi	r4,r5,1
 804629c:	2088b03a 	or	r4,r4,r2
 80462a0:	81000115 	stw	r4,4(r16)
 80462a4:	01400144 	movi	r5,5
 80462a8:	8089883a 	add	r4,r16,r2
 80462ac:	21400115 	stw	r5,4(r4)
 80462b0:	21400215 	stw	r5,8(r4)
 80462b4:	3080cd36 	bltu	r6,r2,80465ec <_malloc_r+0x794>
 80462b8:	00820174 	movhi	r2,2053
 80462bc:	10aad304 	addi	r2,r2,-21684
 80462c0:	11000017 	ldw	r4,0(r2)
 80462c4:	20c0012e 	bgeu	r4,r3,80462cc <_malloc_r+0x474>
 80462c8:	10c00015 	stw	r3,0(r2)
 80462cc:	00820174 	movhi	r2,2053
 80462d0:	10aad204 	addi	r2,r2,-21688
 80462d4:	11000017 	ldw	r4,0(r2)
 80462d8:	9c000217 	ldw	r16,8(r19)
 80462dc:	20c0012e 	bgeu	r4,r3,80462e4 <_malloc_r+0x48c>
 80462e0:	10c00015 	stw	r3,0(r2)
 80462e4:	80c00117 	ldw	r3,4(r16)
 80462e8:	00bfff04 	movi	r2,-4
 80462ec:	1886703a 	and	r3,r3,r2
 80462f0:	1c45c83a 	sub	r2,r3,r17
 80462f4:	1c400236 	bltu	r3,r17,8046300 <_malloc_r+0x4a8>
 80462f8:	00c003c4 	movi	r3,15
 80462fc:	18800416 	blt	r3,r2,8046310 <_malloc_r+0x4b8>
 8046300:	9009883a 	mov	r4,r18
 8046304:	8046f780 	call	8046f78 <__malloc_unlock>
 8046308:	0005883a 	mov	r2,zero
 804630c:	003f7b06 	br	80460fc <__alt_data_end+0xfffc60fc>
 8046310:	88c00054 	ori	r3,r17,1
 8046314:	80c00115 	stw	r3,4(r16)
 8046318:	8463883a 	add	r17,r16,r17
 804631c:	10800054 	ori	r2,r2,1
 8046320:	9c400215 	stw	r17,8(r19)
 8046324:	88800115 	stw	r2,4(r17)
 8046328:	9009883a 	mov	r4,r18
 804632c:	8046f780 	call	8046f78 <__malloc_unlock>
 8046330:	80800204 	addi	r2,r16,8
 8046334:	003f7106 	br	80460fc <__alt_data_end+0xfffc60fc>
 8046338:	00c00504 	movi	r3,20
 804633c:	18804a2e 	bgeu	r3,r2,8046468 <_malloc_r+0x610>
 8046340:	00c01504 	movi	r3,84
 8046344:	18806e36 	bltu	r3,r2,8046500 <_malloc_r+0x6a8>
 8046348:	8804d33a 	srli	r2,r17,12
 804634c:	12001bc4 	addi	r8,r2,111
 8046350:	11c01b84 	addi	r7,r2,110
 8046354:	4209883a 	add	r4,r8,r8
 8046358:	003edd06 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 804635c:	3804d27a 	srli	r2,r7,9
 8046360:	00c00104 	movi	r3,4
 8046364:	1880442e 	bgeu	r3,r2,8046478 <_malloc_r+0x620>
 8046368:	00c00504 	movi	r3,20
 804636c:	18808136 	bltu	r3,r2,8046574 <_malloc_r+0x71c>
 8046370:	11401704 	addi	r5,r2,92
 8046374:	10c016c4 	addi	r3,r2,91
 8046378:	294b883a 	add	r5,r5,r5
 804637c:	294b883a 	add	r5,r5,r5
 8046380:	294b883a 	add	r5,r5,r5
 8046384:	994b883a 	add	r5,r19,r5
 8046388:	28800017 	ldw	r2,0(r5)
 804638c:	01820174 	movhi	r6,2053
 8046390:	297ffe04 	addi	r5,r5,-8
 8046394:	31a2df04 	addi	r6,r6,-29828
 8046398:	28806526 	beq	r5,r2,8046530 <_malloc_r+0x6d8>
 804639c:	01bfff04 	movi	r6,-4
 80463a0:	10c00117 	ldw	r3,4(r2)
 80463a4:	1986703a 	and	r3,r3,r6
 80463a8:	38c0022e 	bgeu	r7,r3,80463b4 <_malloc_r+0x55c>
 80463ac:	10800217 	ldw	r2,8(r2)
 80463b0:	28bffb1e 	bne	r5,r2,80463a0 <__alt_data_end+0xfffc63a0>
 80463b4:	11400317 	ldw	r5,12(r2)
 80463b8:	98c00117 	ldw	r3,4(r19)
 80463bc:	81400315 	stw	r5,12(r16)
 80463c0:	80800215 	stw	r2,8(r16)
 80463c4:	2c000215 	stw	r16,8(r5)
 80463c8:	14000315 	stw	r16,12(r2)
 80463cc:	003ef806 	br	8045fb0 <__alt_data_end+0xfffc5fb0>
 80463d0:	88c00054 	ori	r3,r17,1
 80463d4:	80c00115 	stw	r3,4(r16)
 80463d8:	8463883a 	add	r17,r16,r17
 80463dc:	34400515 	stw	r17,20(r6)
 80463e0:	34400415 	stw	r17,16(r6)
 80463e4:	10c00054 	ori	r3,r2,1
 80463e8:	8a000315 	stw	r8,12(r17)
 80463ec:	8a000215 	stw	r8,8(r17)
 80463f0:	88c00115 	stw	r3,4(r17)
 80463f4:	88a3883a 	add	r17,r17,r2
 80463f8:	88800015 	stw	r2,0(r17)
 80463fc:	9009883a 	mov	r4,r18
 8046400:	8046f780 	call	8046f78 <__malloc_unlock>
 8046404:	80800204 	addi	r2,r16,8
 8046408:	003f3c06 	br	80460fc <__alt_data_end+0xfffc60fc>
 804640c:	30c00117 	ldw	r3,4(r6)
 8046410:	003ee706 	br	8045fb0 <__alt_data_end+0xfffc5fb0>
 8046414:	5ac00044 	addi	r11,r11,1
 8046418:	588000cc 	andi	r2,r11,3
 804641c:	31800204 	addi	r6,r6,8
 8046420:	103efd1e 	bne	r2,zero,8046018 <__alt_data_end+0xfffc6018>
 8046424:	00002406 	br	80464b8 <_malloc_r+0x660>
 8046428:	14000317 	ldw	r16,12(r2)
 804642c:	143f251e 	bne	r2,r16,80460c4 <__alt_data_end+0xfffc60c4>
 8046430:	21000084 	addi	r4,r4,2
 8046434:	003ebc06 	br	8045f28 <__alt_data_end+0xfffc5f28>
 8046438:	8085883a 	add	r2,r16,r2
 804643c:	10c00117 	ldw	r3,4(r2)
 8046440:	81000317 	ldw	r4,12(r16)
 8046444:	81400217 	ldw	r5,8(r16)
 8046448:	18c00054 	ori	r3,r3,1
 804644c:	10c00115 	stw	r3,4(r2)
 8046450:	29000315 	stw	r4,12(r5)
 8046454:	21400215 	stw	r5,8(r4)
 8046458:	9009883a 	mov	r4,r18
 804645c:	8046f780 	call	8046f78 <__malloc_unlock>
 8046460:	80800204 	addi	r2,r16,8
 8046464:	003f2506 	br	80460fc <__alt_data_end+0xfffc60fc>
 8046468:	12001704 	addi	r8,r2,92
 804646c:	11c016c4 	addi	r7,r2,91
 8046470:	4209883a 	add	r4,r8,r8
 8046474:	003e9606 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 8046478:	3804d1ba 	srli	r2,r7,6
 804647c:	11400e44 	addi	r5,r2,57
 8046480:	10c00e04 	addi	r3,r2,56
 8046484:	294b883a 	add	r5,r5,r5
 8046488:	003fbc06 	br	804637c <__alt_data_end+0xfffc637c>
 804648c:	84ff5926 	beq	r16,r19,80461f4 <__alt_data_end+0xfffc61f4>
 8046490:	00820174 	movhi	r2,2053
 8046494:	10a2df04 	addi	r2,r2,-29828
 8046498:	14000217 	ldw	r16,8(r2)
 804649c:	00bfff04 	movi	r2,-4
 80464a0:	80c00117 	ldw	r3,4(r16)
 80464a4:	1886703a 	and	r3,r3,r2
 80464a8:	003f9106 	br	80462f0 <__alt_data_end+0xfffc62f0>
 80464ac:	60800217 	ldw	r2,8(r12)
 80464b0:	213fffc4 	addi	r4,r4,-1
 80464b4:	1300651e 	bne	r2,r12,804664c <_malloc_r+0x7f4>
 80464b8:	208000cc 	andi	r2,r4,3
 80464bc:	633ffe04 	addi	r12,r12,-8
 80464c0:	103ffa1e 	bne	r2,zero,80464ac <__alt_data_end+0xfffc64ac>
 80464c4:	98800117 	ldw	r2,4(r19)
 80464c8:	0146303a 	nor	r3,zero,r5
 80464cc:	1884703a 	and	r2,r3,r2
 80464d0:	98800115 	stw	r2,4(r19)
 80464d4:	294b883a 	add	r5,r5,r5
 80464d8:	117f2836 	bltu	r2,r5,804617c <__alt_data_end+0xfffc617c>
 80464dc:	283f2726 	beq	r5,zero,804617c <__alt_data_end+0xfffc617c>
 80464e0:	2886703a 	and	r3,r5,r2
 80464e4:	5809883a 	mov	r4,r11
 80464e8:	183ec31e 	bne	r3,zero,8045ff8 <__alt_data_end+0xfffc5ff8>
 80464ec:	294b883a 	add	r5,r5,r5
 80464f0:	2886703a 	and	r3,r5,r2
 80464f4:	21000104 	addi	r4,r4,4
 80464f8:	183ffc26 	beq	r3,zero,80464ec <__alt_data_end+0xfffc64ec>
 80464fc:	003ebe06 	br	8045ff8 <__alt_data_end+0xfffc5ff8>
 8046500:	00c05504 	movi	r3,340
 8046504:	18801236 	bltu	r3,r2,8046550 <_malloc_r+0x6f8>
 8046508:	8804d3fa 	srli	r2,r17,15
 804650c:	12001e04 	addi	r8,r2,120
 8046510:	11c01dc4 	addi	r7,r2,119
 8046514:	4209883a 	add	r4,r8,r8
 8046518:	003e6d06 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 804651c:	00c40004 	movi	r3,4096
 8046520:	003f4606 	br	804623c <__alt_data_end+0xfffc623c>
 8046524:	00800044 	movi	r2,1
 8046528:	a0800115 	stw	r2,4(r20)
 804652c:	003f7406 	br	8046300 <__alt_data_end+0xfffc6300>
 8046530:	1805d0ba 	srai	r2,r3,2
 8046534:	01c00044 	movi	r7,1
 8046538:	30c00117 	ldw	r3,4(r6)
 804653c:	388e983a 	sll	r7,r7,r2
 8046540:	2805883a 	mov	r2,r5
 8046544:	38c6b03a 	or	r3,r7,r3
 8046548:	30c00115 	stw	r3,4(r6)
 804654c:	003f9b06 	br	80463bc <__alt_data_end+0xfffc63bc>
 8046550:	00c15504 	movi	r3,1364
 8046554:	18801a36 	bltu	r3,r2,80465c0 <_malloc_r+0x768>
 8046558:	8804d4ba 	srli	r2,r17,18
 804655c:	12001f44 	addi	r8,r2,125
 8046560:	11c01f04 	addi	r7,r2,124
 8046564:	4209883a 	add	r4,r8,r8
 8046568:	003e5906 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 804656c:	ad400404 	addi	r21,r21,16
 8046570:	003f1706 	br	80461d0 <__alt_data_end+0xfffc61d0>
 8046574:	00c01504 	movi	r3,84
 8046578:	18802336 	bltu	r3,r2,8046608 <_malloc_r+0x7b0>
 804657c:	3804d33a 	srli	r2,r7,12
 8046580:	11401bc4 	addi	r5,r2,111
 8046584:	10c01b84 	addi	r3,r2,110
 8046588:	294b883a 	add	r5,r5,r5
 804658c:	003f7b06 	br	804637c <__alt_data_end+0xfffc637c>
 8046590:	9c000217 	ldw	r16,8(r19)
 8046594:	00bfff04 	movi	r2,-4
 8046598:	80c00117 	ldw	r3,4(r16)
 804659c:	1886703a 	and	r3,r3,r2
 80465a0:	003f5306 	br	80462f0 <__alt_data_end+0xfffc62f0>
 80465a4:	3083ffcc 	andi	r2,r6,4095
 80465a8:	103f181e 	bne	r2,zero,804620c <__alt_data_end+0xfffc620c>
 80465ac:	99000217 	ldw	r4,8(r19)
 80465b0:	b545883a 	add	r2,r22,r21
 80465b4:	10800054 	ori	r2,r2,1
 80465b8:	20800115 	stw	r2,4(r4)
 80465bc:	003f3e06 	br	80462b8 <__alt_data_end+0xfffc62b8>
 80465c0:	01003f84 	movi	r4,254
 80465c4:	02001fc4 	movi	r8,127
 80465c8:	01c01f84 	movi	r7,126
 80465cc:	003e4006 	br	8045ed0 <__alt_data_end+0xfffc5ed0>
 80465d0:	00820174 	movhi	r2,2053
 80465d4:	10a3f404 	addi	r2,r2,-28720
 80465d8:	15000015 	stw	r20,0(r2)
 80465dc:	003f1106 	br	8046224 <__alt_data_end+0xfffc6224>
 80465e0:	00800044 	movi	r2,1
 80465e4:	002b883a 	mov	r21,zero
 80465e8:	003f1f06 	br	8046268 <__alt_data_end+0xfffc6268>
 80465ec:	81400204 	addi	r5,r16,8
 80465f0:	9009883a 	mov	r4,r18
 80465f4:	80458040 	call	8045804 <_free_r>
 80465f8:	00820174 	movhi	r2,2053
 80465fc:	10aad504 	addi	r2,r2,-21676
 8046600:	10c00017 	ldw	r3,0(r2)
 8046604:	003f2c06 	br	80462b8 <__alt_data_end+0xfffc62b8>
 8046608:	00c05504 	movi	r3,340
 804660c:	18800536 	bltu	r3,r2,8046624 <_malloc_r+0x7cc>
 8046610:	3804d3fa 	srli	r2,r7,15
 8046614:	11401e04 	addi	r5,r2,120
 8046618:	10c01dc4 	addi	r3,r2,119
 804661c:	294b883a 	add	r5,r5,r5
 8046620:	003f5606 	br	804637c <__alt_data_end+0xfffc637c>
 8046624:	00c15504 	movi	r3,1364
 8046628:	18800536 	bltu	r3,r2,8046640 <_malloc_r+0x7e8>
 804662c:	3804d4ba 	srli	r2,r7,18
 8046630:	11401f44 	addi	r5,r2,125
 8046634:	10c01f04 	addi	r3,r2,124
 8046638:	294b883a 	add	r5,r5,r5
 804663c:	003f4f06 	br	804637c <__alt_data_end+0xfffc637c>
 8046640:	01403f84 	movi	r5,254
 8046644:	00c01f84 	movi	r3,126
 8046648:	003f4c06 	br	804637c <__alt_data_end+0xfffc637c>
 804664c:	98800117 	ldw	r2,4(r19)
 8046650:	003fa006 	br	80464d4 <__alt_data_end+0xfffc64d4>
 8046654:	8808d0fa 	srli	r4,r17,3
 8046658:	20800044 	addi	r2,r4,1
 804665c:	1085883a 	add	r2,r2,r2
 8046660:	003e9006 	br	80460a4 <__alt_data_end+0xfffc60a4>

08046664 <memset>:
 8046664:	20c000cc 	andi	r3,r4,3
 8046668:	2005883a 	mov	r2,r4
 804666c:	18004426 	beq	r3,zero,8046780 <memset+0x11c>
 8046670:	31ffffc4 	addi	r7,r6,-1
 8046674:	30004026 	beq	r6,zero,8046778 <memset+0x114>
 8046678:	2813883a 	mov	r9,r5
 804667c:	200d883a 	mov	r6,r4
 8046680:	2007883a 	mov	r3,r4
 8046684:	00000406 	br	8046698 <memset+0x34>
 8046688:	3a3fffc4 	addi	r8,r7,-1
 804668c:	31800044 	addi	r6,r6,1
 8046690:	38003926 	beq	r7,zero,8046778 <memset+0x114>
 8046694:	400f883a 	mov	r7,r8
 8046698:	18c00044 	addi	r3,r3,1
 804669c:	32400005 	stb	r9,0(r6)
 80466a0:	1a0000cc 	andi	r8,r3,3
 80466a4:	403ff81e 	bne	r8,zero,8046688 <__alt_data_end+0xfffc6688>
 80466a8:	010000c4 	movi	r4,3
 80466ac:	21c02d2e 	bgeu	r4,r7,8046764 <memset+0x100>
 80466b0:	29003fcc 	andi	r4,r5,255
 80466b4:	200c923a 	slli	r6,r4,8
 80466b8:	3108b03a 	or	r4,r6,r4
 80466bc:	200c943a 	slli	r6,r4,16
 80466c0:	218cb03a 	or	r6,r4,r6
 80466c4:	010003c4 	movi	r4,15
 80466c8:	21c0182e 	bgeu	r4,r7,804672c <memset+0xc8>
 80466cc:	3b3ffc04 	addi	r12,r7,-16
 80466d0:	6018d13a 	srli	r12,r12,4
 80466d4:	1a000104 	addi	r8,r3,4
 80466d8:	1ac00204 	addi	r11,r3,8
 80466dc:	6008913a 	slli	r4,r12,4
 80466e0:	1a800304 	addi	r10,r3,12
 80466e4:	1813883a 	mov	r9,r3
 80466e8:	21000504 	addi	r4,r4,20
 80466ec:	1909883a 	add	r4,r3,r4
 80466f0:	49800015 	stw	r6,0(r9)
 80466f4:	41800015 	stw	r6,0(r8)
 80466f8:	59800015 	stw	r6,0(r11)
 80466fc:	51800015 	stw	r6,0(r10)
 8046700:	42000404 	addi	r8,r8,16
 8046704:	4a400404 	addi	r9,r9,16
 8046708:	5ac00404 	addi	r11,r11,16
 804670c:	52800404 	addi	r10,r10,16
 8046710:	413ff71e 	bne	r8,r4,80466f0 <__alt_data_end+0xfffc66f0>
 8046714:	63000044 	addi	r12,r12,1
 8046718:	6018913a 	slli	r12,r12,4
 804671c:	39c003cc 	andi	r7,r7,15
 8046720:	010000c4 	movi	r4,3
 8046724:	1b07883a 	add	r3,r3,r12
 8046728:	21c00e2e 	bgeu	r4,r7,8046764 <memset+0x100>
 804672c:	1813883a 	mov	r9,r3
 8046730:	3811883a 	mov	r8,r7
 8046734:	010000c4 	movi	r4,3
 8046738:	49800015 	stw	r6,0(r9)
 804673c:	423fff04 	addi	r8,r8,-4
 8046740:	4a400104 	addi	r9,r9,4
 8046744:	223ffc36 	bltu	r4,r8,8046738 <__alt_data_end+0xfffc6738>
 8046748:	393fff04 	addi	r4,r7,-4
 804674c:	2008d0ba 	srli	r4,r4,2
 8046750:	39c000cc 	andi	r7,r7,3
 8046754:	21000044 	addi	r4,r4,1
 8046758:	2109883a 	add	r4,r4,r4
 804675c:	2109883a 	add	r4,r4,r4
 8046760:	1907883a 	add	r3,r3,r4
 8046764:	38000526 	beq	r7,zero,804677c <memset+0x118>
 8046768:	19cf883a 	add	r7,r3,r7
 804676c:	19400005 	stb	r5,0(r3)
 8046770:	18c00044 	addi	r3,r3,1
 8046774:	38fffd1e 	bne	r7,r3,804676c <__alt_data_end+0xfffc676c>
 8046778:	f800283a 	ret
 804677c:	f800283a 	ret
 8046780:	2007883a 	mov	r3,r4
 8046784:	300f883a 	mov	r7,r6
 8046788:	003fc706 	br	80466a8 <__alt_data_end+0xfffc66a8>

0804678c <_sbrk_r>:
 804678c:	defffd04 	addi	sp,sp,-12
 8046790:	dc000015 	stw	r16,0(sp)
 8046794:	04020174 	movhi	r16,2053
 8046798:	dc400115 	stw	r17,4(sp)
 804679c:	842ad104 	addi	r16,r16,-21692
 80467a0:	2023883a 	mov	r17,r4
 80467a4:	2809883a 	mov	r4,r5
 80467a8:	dfc00215 	stw	ra,8(sp)
 80467ac:	80000015 	stw	zero,0(r16)
 80467b0:	80470d40 	call	80470d4 <sbrk>
 80467b4:	00ffffc4 	movi	r3,-1
 80467b8:	10c00526 	beq	r2,r3,80467d0 <_sbrk_r+0x44>
 80467bc:	dfc00217 	ldw	ra,8(sp)
 80467c0:	dc400117 	ldw	r17,4(sp)
 80467c4:	dc000017 	ldw	r16,0(sp)
 80467c8:	dec00304 	addi	sp,sp,12
 80467cc:	f800283a 	ret
 80467d0:	80c00017 	ldw	r3,0(r16)
 80467d4:	183ff926 	beq	r3,zero,80467bc <__alt_data_end+0xfffc67bc>
 80467d8:	88c00015 	stw	r3,0(r17)
 80467dc:	003ff706 	br	80467bc <__alt_data_end+0xfffc67bc>

080467e0 <__sread>:
 80467e0:	defffe04 	addi	sp,sp,-8
 80467e4:	dc000015 	stw	r16,0(sp)
 80467e8:	2821883a 	mov	r16,r5
 80467ec:	2940038f 	ldh	r5,14(r5)
 80467f0:	dfc00115 	stw	ra,4(sp)
 80467f4:	8046be40 	call	8046be4 <_read_r>
 80467f8:	10000716 	blt	r2,zero,8046818 <__sread+0x38>
 80467fc:	80c01417 	ldw	r3,80(r16)
 8046800:	1887883a 	add	r3,r3,r2
 8046804:	80c01415 	stw	r3,80(r16)
 8046808:	dfc00117 	ldw	ra,4(sp)
 804680c:	dc000017 	ldw	r16,0(sp)
 8046810:	dec00204 	addi	sp,sp,8
 8046814:	f800283a 	ret
 8046818:	80c0030b 	ldhu	r3,12(r16)
 804681c:	18fbffcc 	andi	r3,r3,61439
 8046820:	80c0030d 	sth	r3,12(r16)
 8046824:	dfc00117 	ldw	ra,4(sp)
 8046828:	dc000017 	ldw	r16,0(sp)
 804682c:	dec00204 	addi	sp,sp,8
 8046830:	f800283a 	ret

08046834 <__seofread>:
 8046834:	0005883a 	mov	r2,zero
 8046838:	f800283a 	ret

0804683c <__swrite>:
 804683c:	2880030b 	ldhu	r2,12(r5)
 8046840:	defffb04 	addi	sp,sp,-20
 8046844:	dcc00315 	stw	r19,12(sp)
 8046848:	dc800215 	stw	r18,8(sp)
 804684c:	dc400115 	stw	r17,4(sp)
 8046850:	dc000015 	stw	r16,0(sp)
 8046854:	dfc00415 	stw	ra,16(sp)
 8046858:	10c0400c 	andi	r3,r2,256
 804685c:	2821883a 	mov	r16,r5
 8046860:	2023883a 	mov	r17,r4
 8046864:	3025883a 	mov	r18,r6
 8046868:	3827883a 	mov	r19,r7
 804686c:	18000526 	beq	r3,zero,8046884 <__swrite+0x48>
 8046870:	2940038f 	ldh	r5,14(r5)
 8046874:	01c00084 	movi	r7,2
 8046878:	000d883a 	mov	r6,zero
 804687c:	8046b840 	call	8046b84 <_lseek_r>
 8046880:	8080030b 	ldhu	r2,12(r16)
 8046884:	8140038f 	ldh	r5,14(r16)
 8046888:	10bbffcc 	andi	r2,r2,61439
 804688c:	980f883a 	mov	r7,r19
 8046890:	900d883a 	mov	r6,r18
 8046894:	8809883a 	mov	r4,r17
 8046898:	8080030d 	sth	r2,12(r16)
 804689c:	dfc00417 	ldw	ra,16(sp)
 80468a0:	dcc00317 	ldw	r19,12(sp)
 80468a4:	dc800217 	ldw	r18,8(sp)
 80468a8:	dc400117 	ldw	r17,4(sp)
 80468ac:	dc000017 	ldw	r16,0(sp)
 80468b0:	dec00504 	addi	sp,sp,20
 80468b4:	804691c1 	jmpi	804691c <_write_r>

080468b8 <__sseek>:
 80468b8:	defffe04 	addi	sp,sp,-8
 80468bc:	dc000015 	stw	r16,0(sp)
 80468c0:	2821883a 	mov	r16,r5
 80468c4:	2940038f 	ldh	r5,14(r5)
 80468c8:	dfc00115 	stw	ra,4(sp)
 80468cc:	8046b840 	call	8046b84 <_lseek_r>
 80468d0:	00ffffc4 	movi	r3,-1
 80468d4:	10c00826 	beq	r2,r3,80468f8 <__sseek+0x40>
 80468d8:	80c0030b 	ldhu	r3,12(r16)
 80468dc:	80801415 	stw	r2,80(r16)
 80468e0:	18c40014 	ori	r3,r3,4096
 80468e4:	80c0030d 	sth	r3,12(r16)
 80468e8:	dfc00117 	ldw	ra,4(sp)
 80468ec:	dc000017 	ldw	r16,0(sp)
 80468f0:	dec00204 	addi	sp,sp,8
 80468f4:	f800283a 	ret
 80468f8:	80c0030b 	ldhu	r3,12(r16)
 80468fc:	18fbffcc 	andi	r3,r3,61439
 8046900:	80c0030d 	sth	r3,12(r16)
 8046904:	dfc00117 	ldw	ra,4(sp)
 8046908:	dc000017 	ldw	r16,0(sp)
 804690c:	dec00204 	addi	sp,sp,8
 8046910:	f800283a 	ret

08046914 <__sclose>:
 8046914:	2940038f 	ldh	r5,14(r5)
 8046918:	804697c1 	jmpi	804697c <_close_r>

0804691c <_write_r>:
 804691c:	defffd04 	addi	sp,sp,-12
 8046920:	2805883a 	mov	r2,r5
 8046924:	dc000015 	stw	r16,0(sp)
 8046928:	04020174 	movhi	r16,2053
 804692c:	dc400115 	stw	r17,4(sp)
 8046930:	300b883a 	mov	r5,r6
 8046934:	842ad104 	addi	r16,r16,-21692
 8046938:	2023883a 	mov	r17,r4
 804693c:	380d883a 	mov	r6,r7
 8046940:	1009883a 	mov	r4,r2
 8046944:	dfc00215 	stw	ra,8(sp)
 8046948:	80000015 	stw	zero,0(r16)
 804694c:	80471c00 	call	80471c0 <write>
 8046950:	00ffffc4 	movi	r3,-1
 8046954:	10c00526 	beq	r2,r3,804696c <_write_r+0x50>
 8046958:	dfc00217 	ldw	ra,8(sp)
 804695c:	dc400117 	ldw	r17,4(sp)
 8046960:	dc000017 	ldw	r16,0(sp)
 8046964:	dec00304 	addi	sp,sp,12
 8046968:	f800283a 	ret
 804696c:	80c00017 	ldw	r3,0(r16)
 8046970:	183ff926 	beq	r3,zero,8046958 <__alt_data_end+0xfffc6958>
 8046974:	88c00015 	stw	r3,0(r17)
 8046978:	003ff706 	br	8046958 <__alt_data_end+0xfffc6958>

0804697c <_close_r>:
 804697c:	defffd04 	addi	sp,sp,-12
 8046980:	dc000015 	stw	r16,0(sp)
 8046984:	04020174 	movhi	r16,2053
 8046988:	dc400115 	stw	r17,4(sp)
 804698c:	842ad104 	addi	r16,r16,-21692
 8046990:	2023883a 	mov	r17,r4
 8046994:	2809883a 	mov	r4,r5
 8046998:	dfc00215 	stw	ra,8(sp)
 804699c:	80000015 	stw	zero,0(r16)
 80469a0:	8043b040 	call	8043b04 <close>
 80469a4:	00ffffc4 	movi	r3,-1
 80469a8:	10c00526 	beq	r2,r3,80469c0 <_close_r+0x44>
 80469ac:	dfc00217 	ldw	ra,8(sp)
 80469b0:	dc400117 	ldw	r17,4(sp)
 80469b4:	dc000017 	ldw	r16,0(sp)
 80469b8:	dec00304 	addi	sp,sp,12
 80469bc:	f800283a 	ret
 80469c0:	80c00017 	ldw	r3,0(r16)
 80469c4:	183ff926 	beq	r3,zero,80469ac <__alt_data_end+0xfffc69ac>
 80469c8:	88c00015 	stw	r3,0(r17)
 80469cc:	003ff706 	br	80469ac <__alt_data_end+0xfffc69ac>

080469d0 <_fclose_r>:
 80469d0:	28003926 	beq	r5,zero,8046ab8 <_fclose_r+0xe8>
 80469d4:	defffc04 	addi	sp,sp,-16
 80469d8:	dc400115 	stw	r17,4(sp)
 80469dc:	dc000015 	stw	r16,0(sp)
 80469e0:	dfc00315 	stw	ra,12(sp)
 80469e4:	dc800215 	stw	r18,8(sp)
 80469e8:	2023883a 	mov	r17,r4
 80469ec:	2821883a 	mov	r16,r5
 80469f0:	20000226 	beq	r4,zero,80469fc <_fclose_r+0x2c>
 80469f4:	20800e17 	ldw	r2,56(r4)
 80469f8:	10002726 	beq	r2,zero,8046a98 <_fclose_r+0xc8>
 80469fc:	8080030f 	ldh	r2,12(r16)
 8046a00:	1000071e 	bne	r2,zero,8046a20 <_fclose_r+0x50>
 8046a04:	0005883a 	mov	r2,zero
 8046a08:	dfc00317 	ldw	ra,12(sp)
 8046a0c:	dc800217 	ldw	r18,8(sp)
 8046a10:	dc400117 	ldw	r17,4(sp)
 8046a14:	dc000017 	ldw	r16,0(sp)
 8046a18:	dec00404 	addi	sp,sp,16
 8046a1c:	f800283a 	ret
 8046a20:	800b883a 	mov	r5,r16
 8046a24:	8809883a 	mov	r4,r17
 8046a28:	80450980 	call	8045098 <__sflush_r>
 8046a2c:	1025883a 	mov	r18,r2
 8046a30:	80800b17 	ldw	r2,44(r16)
 8046a34:	10000426 	beq	r2,zero,8046a48 <_fclose_r+0x78>
 8046a38:	81400717 	ldw	r5,28(r16)
 8046a3c:	8809883a 	mov	r4,r17
 8046a40:	103ee83a 	callr	r2
 8046a44:	10001616 	blt	r2,zero,8046aa0 <_fclose_r+0xd0>
 8046a48:	8080030b 	ldhu	r2,12(r16)
 8046a4c:	1080200c 	andi	r2,r2,128
 8046a50:	1000151e 	bne	r2,zero,8046aa8 <_fclose_r+0xd8>
 8046a54:	81400c17 	ldw	r5,48(r16)
 8046a58:	28000526 	beq	r5,zero,8046a70 <_fclose_r+0xa0>
 8046a5c:	80801004 	addi	r2,r16,64
 8046a60:	28800226 	beq	r5,r2,8046a6c <_fclose_r+0x9c>
 8046a64:	8809883a 	mov	r4,r17
 8046a68:	80458040 	call	8045804 <_free_r>
 8046a6c:	80000c15 	stw	zero,48(r16)
 8046a70:	81401117 	ldw	r5,68(r16)
 8046a74:	28000326 	beq	r5,zero,8046a84 <_fclose_r+0xb4>
 8046a78:	8809883a 	mov	r4,r17
 8046a7c:	80458040 	call	8045804 <_free_r>
 8046a80:	80001115 	stw	zero,68(r16)
 8046a84:	80456a00 	call	80456a0 <__sfp_lock_acquire>
 8046a88:	8000030d 	sth	zero,12(r16)
 8046a8c:	80456a40 	call	80456a4 <__sfp_lock_release>
 8046a90:	9005883a 	mov	r2,r18
 8046a94:	003fdc06 	br	8046a08 <__alt_data_end+0xfffc6a08>
 8046a98:	80456900 	call	8045690 <__sinit>
 8046a9c:	003fd706 	br	80469fc <__alt_data_end+0xfffc69fc>
 8046aa0:	04bfffc4 	movi	r18,-1
 8046aa4:	003fe806 	br	8046a48 <__alt_data_end+0xfffc6a48>
 8046aa8:	81400417 	ldw	r5,16(r16)
 8046aac:	8809883a 	mov	r4,r17
 8046ab0:	80458040 	call	8045804 <_free_r>
 8046ab4:	003fe706 	br	8046a54 <__alt_data_end+0xfffc6a54>
 8046ab8:	0005883a 	mov	r2,zero
 8046abc:	f800283a 	ret

08046ac0 <fclose>:
 8046ac0:	00820174 	movhi	r2,2053
 8046ac4:	10a3ea04 	addi	r2,r2,-28760
 8046ac8:	200b883a 	mov	r5,r4
 8046acc:	11000017 	ldw	r4,0(r2)
 8046ad0:	80469d01 	jmpi	80469d0 <_fclose_r>

08046ad4 <_fstat_r>:
 8046ad4:	defffd04 	addi	sp,sp,-12
 8046ad8:	2805883a 	mov	r2,r5
 8046adc:	dc000015 	stw	r16,0(sp)
 8046ae0:	04020174 	movhi	r16,2053
 8046ae4:	dc400115 	stw	r17,4(sp)
 8046ae8:	842ad104 	addi	r16,r16,-21692
 8046aec:	2023883a 	mov	r17,r4
 8046af0:	300b883a 	mov	r5,r6
 8046af4:	1009883a 	mov	r4,r2
 8046af8:	dfc00215 	stw	ra,8(sp)
 8046afc:	80000015 	stw	zero,0(r16)
 8046b00:	8046cb40 	call	8046cb4 <fstat>
 8046b04:	00ffffc4 	movi	r3,-1
 8046b08:	10c00526 	beq	r2,r3,8046b20 <_fstat_r+0x4c>
 8046b0c:	dfc00217 	ldw	ra,8(sp)
 8046b10:	dc400117 	ldw	r17,4(sp)
 8046b14:	dc000017 	ldw	r16,0(sp)
 8046b18:	dec00304 	addi	sp,sp,12
 8046b1c:	f800283a 	ret
 8046b20:	80c00017 	ldw	r3,0(r16)
 8046b24:	183ff926 	beq	r3,zero,8046b0c <__alt_data_end+0xfffc6b0c>
 8046b28:	88c00015 	stw	r3,0(r17)
 8046b2c:	003ff706 	br	8046b0c <__alt_data_end+0xfffc6b0c>

08046b30 <_isatty_r>:
 8046b30:	defffd04 	addi	sp,sp,-12
 8046b34:	dc000015 	stw	r16,0(sp)
 8046b38:	04020174 	movhi	r16,2053
 8046b3c:	dc400115 	stw	r17,4(sp)
 8046b40:	842ad104 	addi	r16,r16,-21692
 8046b44:	2023883a 	mov	r17,r4
 8046b48:	2809883a 	mov	r4,r5
 8046b4c:	dfc00215 	stw	ra,8(sp)
 8046b50:	80000015 	stw	zero,0(r16)
 8046b54:	8046da00 	call	8046da0 <isatty>
 8046b58:	00ffffc4 	movi	r3,-1
 8046b5c:	10c00526 	beq	r2,r3,8046b74 <_isatty_r+0x44>
 8046b60:	dfc00217 	ldw	ra,8(sp)
 8046b64:	dc400117 	ldw	r17,4(sp)
 8046b68:	dc000017 	ldw	r16,0(sp)
 8046b6c:	dec00304 	addi	sp,sp,12
 8046b70:	f800283a 	ret
 8046b74:	80c00017 	ldw	r3,0(r16)
 8046b78:	183ff926 	beq	r3,zero,8046b60 <__alt_data_end+0xfffc6b60>
 8046b7c:	88c00015 	stw	r3,0(r17)
 8046b80:	003ff706 	br	8046b60 <__alt_data_end+0xfffc6b60>

08046b84 <_lseek_r>:
 8046b84:	defffd04 	addi	sp,sp,-12
 8046b88:	2805883a 	mov	r2,r5
 8046b8c:	dc000015 	stw	r16,0(sp)
 8046b90:	04020174 	movhi	r16,2053
 8046b94:	dc400115 	stw	r17,4(sp)
 8046b98:	300b883a 	mov	r5,r6
 8046b9c:	842ad104 	addi	r16,r16,-21692
 8046ba0:	2023883a 	mov	r17,r4
 8046ba4:	380d883a 	mov	r6,r7
 8046ba8:	1009883a 	mov	r4,r2
 8046bac:	dfc00215 	stw	ra,8(sp)
 8046bb0:	80000015 	stw	zero,0(r16)
 8046bb4:	8046e800 	call	8046e80 <lseek>
 8046bb8:	00ffffc4 	movi	r3,-1
 8046bbc:	10c00526 	beq	r2,r3,8046bd4 <_lseek_r+0x50>
 8046bc0:	dfc00217 	ldw	ra,8(sp)
 8046bc4:	dc400117 	ldw	r17,4(sp)
 8046bc8:	dc000017 	ldw	r16,0(sp)
 8046bcc:	dec00304 	addi	sp,sp,12
 8046bd0:	f800283a 	ret
 8046bd4:	80c00017 	ldw	r3,0(r16)
 8046bd8:	183ff926 	beq	r3,zero,8046bc0 <__alt_data_end+0xfffc6bc0>
 8046bdc:	88c00015 	stw	r3,0(r17)
 8046be0:	003ff706 	br	8046bc0 <__alt_data_end+0xfffc6bc0>

08046be4 <_read_r>:
 8046be4:	defffd04 	addi	sp,sp,-12
 8046be8:	2805883a 	mov	r2,r5
 8046bec:	dc000015 	stw	r16,0(sp)
 8046bf0:	04020174 	movhi	r16,2053
 8046bf4:	dc400115 	stw	r17,4(sp)
 8046bf8:	300b883a 	mov	r5,r6
 8046bfc:	842ad104 	addi	r16,r16,-21692
 8046c00:	2023883a 	mov	r17,r4
 8046c04:	380d883a 	mov	r6,r7
 8046c08:	1009883a 	mov	r4,r2
 8046c0c:	dfc00215 	stw	ra,8(sp)
 8046c10:	80000015 	stw	zero,0(r16)
 8046c14:	8046fd80 	call	8046fd8 <read>
 8046c18:	00ffffc4 	movi	r3,-1
 8046c1c:	10c00526 	beq	r2,r3,8046c34 <_read_r+0x50>
 8046c20:	dfc00217 	ldw	ra,8(sp)
 8046c24:	dc400117 	ldw	r17,4(sp)
 8046c28:	dc000017 	ldw	r16,0(sp)
 8046c2c:	dec00304 	addi	sp,sp,12
 8046c30:	f800283a 	ret
 8046c34:	80c00017 	ldw	r3,0(r16)
 8046c38:	183ff926 	beq	r3,zero,8046c20 <__alt_data_end+0xfffc6c20>
 8046c3c:	88c00015 	stw	r3,0(r17)
 8046c40:	003ff706 	br	8046c20 <__alt_data_end+0xfffc6c20>

08046c44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8046c44:	defffd04 	addi	sp,sp,-12
 8046c48:	df000215 	stw	fp,8(sp)
 8046c4c:	df000204 	addi	fp,sp,8
 8046c50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8046c54:	0001883a 	nop
 8046c58:	e0bfff17 	ldw	r2,-4(fp)
 8046c5c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8046c60:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8046c64:	10000226 	beq	r2,zero,8046c70 <_exit+0x2c>
    ALT_SIM_FAIL();
 8046c68:	002af070 	cmpltui	zero,zero,43969
 8046c6c:	00000106 	br	8046c74 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8046c70:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8046c74:	003fff06 	br	8046c74 <__alt_data_end+0xfffc6c74>

08046c78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8046c78:	defffe04 	addi	sp,sp,-8
 8046c7c:	dfc00115 	stw	ra,4(sp)
 8046c80:	df000015 	stw	fp,0(sp)
 8046c84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8046c88:	d0a01017 	ldw	r2,-32704(gp)
 8046c8c:	10000326 	beq	r2,zero,8046c9c <alt_get_errno+0x24>
 8046c90:	d0a01017 	ldw	r2,-32704(gp)
 8046c94:	103ee83a 	callr	r2
 8046c98:	00000106 	br	8046ca0 <alt_get_errno+0x28>
 8046c9c:	d0a6f004 	addi	r2,gp,-25664
}
 8046ca0:	e037883a 	mov	sp,fp
 8046ca4:	dfc00117 	ldw	ra,4(sp)
 8046ca8:	df000017 	ldw	fp,0(sp)
 8046cac:	dec00204 	addi	sp,sp,8
 8046cb0:	f800283a 	ret

08046cb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8046cb4:	defffb04 	addi	sp,sp,-20
 8046cb8:	dfc00415 	stw	ra,16(sp)
 8046cbc:	df000315 	stw	fp,12(sp)
 8046cc0:	df000304 	addi	fp,sp,12
 8046cc4:	e13ffe15 	stw	r4,-8(fp)
 8046cc8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8046ccc:	e0bffe17 	ldw	r2,-8(fp)
 8046cd0:	10000616 	blt	r2,zero,8046cec <fstat+0x38>
 8046cd4:	e0bffe17 	ldw	r2,-8(fp)
 8046cd8:	10c00324 	muli	r3,r2,12
 8046cdc:	00820174 	movhi	r2,2053
 8046ce0:	10a27f04 	addi	r2,r2,-30212
 8046ce4:	1885883a 	add	r2,r3,r2
 8046ce8:	00000106 	br	8046cf0 <fstat+0x3c>
 8046cec:	0005883a 	mov	r2,zero
 8046cf0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8046cf4:	e0bffd17 	ldw	r2,-12(fp)
 8046cf8:	10001026 	beq	r2,zero,8046d3c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8046cfc:	e0bffd17 	ldw	r2,-12(fp)
 8046d00:	10800017 	ldw	r2,0(r2)
 8046d04:	10800817 	ldw	r2,32(r2)
 8046d08:	10000726 	beq	r2,zero,8046d28 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8046d0c:	e0bffd17 	ldw	r2,-12(fp)
 8046d10:	10800017 	ldw	r2,0(r2)
 8046d14:	10800817 	ldw	r2,32(r2)
 8046d18:	e17fff17 	ldw	r5,-4(fp)
 8046d1c:	e13ffd17 	ldw	r4,-12(fp)
 8046d20:	103ee83a 	callr	r2
 8046d24:	00000a06 	br	8046d50 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8046d28:	e0bfff17 	ldw	r2,-4(fp)
 8046d2c:	00c80004 	movi	r3,8192
 8046d30:	10c00115 	stw	r3,4(r2)
      return 0;
 8046d34:	0005883a 	mov	r2,zero
 8046d38:	00000506 	br	8046d50 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8046d3c:	8046c780 	call	8046c78 <alt_get_errno>
 8046d40:	1007883a 	mov	r3,r2
 8046d44:	00801444 	movi	r2,81
 8046d48:	18800015 	stw	r2,0(r3)
    return -1;
 8046d4c:	00bfffc4 	movi	r2,-1
  }
}
 8046d50:	e037883a 	mov	sp,fp
 8046d54:	dfc00117 	ldw	ra,4(sp)
 8046d58:	df000017 	ldw	fp,0(sp)
 8046d5c:	dec00204 	addi	sp,sp,8
 8046d60:	f800283a 	ret

08046d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8046d64:	defffe04 	addi	sp,sp,-8
 8046d68:	dfc00115 	stw	ra,4(sp)
 8046d6c:	df000015 	stw	fp,0(sp)
 8046d70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8046d74:	d0a01017 	ldw	r2,-32704(gp)
 8046d78:	10000326 	beq	r2,zero,8046d88 <alt_get_errno+0x24>
 8046d7c:	d0a01017 	ldw	r2,-32704(gp)
 8046d80:	103ee83a 	callr	r2
 8046d84:	00000106 	br	8046d8c <alt_get_errno+0x28>
 8046d88:	d0a6f004 	addi	r2,gp,-25664
}
 8046d8c:	e037883a 	mov	sp,fp
 8046d90:	dfc00117 	ldw	ra,4(sp)
 8046d94:	df000017 	ldw	fp,0(sp)
 8046d98:	dec00204 	addi	sp,sp,8
 8046d9c:	f800283a 	ret

08046da0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8046da0:	deffed04 	addi	sp,sp,-76
 8046da4:	dfc01215 	stw	ra,72(sp)
 8046da8:	df001115 	stw	fp,68(sp)
 8046dac:	df001104 	addi	fp,sp,68
 8046db0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8046db4:	e0bfff17 	ldw	r2,-4(fp)
 8046db8:	10000616 	blt	r2,zero,8046dd4 <isatty+0x34>
 8046dbc:	e0bfff17 	ldw	r2,-4(fp)
 8046dc0:	10c00324 	muli	r3,r2,12
 8046dc4:	00820174 	movhi	r2,2053
 8046dc8:	10a27f04 	addi	r2,r2,-30212
 8046dcc:	1885883a 	add	r2,r3,r2
 8046dd0:	00000106 	br	8046dd8 <isatty+0x38>
 8046dd4:	0005883a 	mov	r2,zero
 8046dd8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8046ddc:	e0bfef17 	ldw	r2,-68(fp)
 8046de0:	10000e26 	beq	r2,zero,8046e1c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8046de4:	e0bfef17 	ldw	r2,-68(fp)
 8046de8:	10800017 	ldw	r2,0(r2)
 8046dec:	10800817 	ldw	r2,32(r2)
 8046df0:	1000021e 	bne	r2,zero,8046dfc <isatty+0x5c>
    {
      return 1;
 8046df4:	00800044 	movi	r2,1
 8046df8:	00000d06 	br	8046e30 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8046dfc:	e0bff004 	addi	r2,fp,-64
 8046e00:	100b883a 	mov	r5,r2
 8046e04:	e13fff17 	ldw	r4,-4(fp)
 8046e08:	8046cb40 	call	8046cb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8046e0c:	e0bff117 	ldw	r2,-60(fp)
 8046e10:	10880020 	cmpeqi	r2,r2,8192
 8046e14:	10803fcc 	andi	r2,r2,255
 8046e18:	00000506 	br	8046e30 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8046e1c:	8046d640 	call	8046d64 <alt_get_errno>
 8046e20:	1007883a 	mov	r3,r2
 8046e24:	00801444 	movi	r2,81
 8046e28:	18800015 	stw	r2,0(r3)
    return 0;
 8046e2c:	0005883a 	mov	r2,zero
  }
}
 8046e30:	e037883a 	mov	sp,fp
 8046e34:	dfc00117 	ldw	ra,4(sp)
 8046e38:	df000017 	ldw	fp,0(sp)
 8046e3c:	dec00204 	addi	sp,sp,8
 8046e40:	f800283a 	ret

08046e44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8046e44:	defffe04 	addi	sp,sp,-8
 8046e48:	dfc00115 	stw	ra,4(sp)
 8046e4c:	df000015 	stw	fp,0(sp)
 8046e50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8046e54:	d0a01017 	ldw	r2,-32704(gp)
 8046e58:	10000326 	beq	r2,zero,8046e68 <alt_get_errno+0x24>
 8046e5c:	d0a01017 	ldw	r2,-32704(gp)
 8046e60:	103ee83a 	callr	r2
 8046e64:	00000106 	br	8046e6c <alt_get_errno+0x28>
 8046e68:	d0a6f004 	addi	r2,gp,-25664
}
 8046e6c:	e037883a 	mov	sp,fp
 8046e70:	dfc00117 	ldw	ra,4(sp)
 8046e74:	df000017 	ldw	fp,0(sp)
 8046e78:	dec00204 	addi	sp,sp,8
 8046e7c:	f800283a 	ret

08046e80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8046e80:	defff904 	addi	sp,sp,-28
 8046e84:	dfc00615 	stw	ra,24(sp)
 8046e88:	df000515 	stw	fp,20(sp)
 8046e8c:	df000504 	addi	fp,sp,20
 8046e90:	e13ffd15 	stw	r4,-12(fp)
 8046e94:	e17ffe15 	stw	r5,-8(fp)
 8046e98:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8046e9c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8046ea0:	e0bffd17 	ldw	r2,-12(fp)
 8046ea4:	10000616 	blt	r2,zero,8046ec0 <lseek+0x40>
 8046ea8:	e0bffd17 	ldw	r2,-12(fp)
 8046eac:	10c00324 	muli	r3,r2,12
 8046eb0:	00820174 	movhi	r2,2053
 8046eb4:	10a27f04 	addi	r2,r2,-30212
 8046eb8:	1885883a 	add	r2,r3,r2
 8046ebc:	00000106 	br	8046ec4 <lseek+0x44>
 8046ec0:	0005883a 	mov	r2,zero
 8046ec4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8046ec8:	e0bffc17 	ldw	r2,-16(fp)
 8046ecc:	10001026 	beq	r2,zero,8046f10 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8046ed0:	e0bffc17 	ldw	r2,-16(fp)
 8046ed4:	10800017 	ldw	r2,0(r2)
 8046ed8:	10800717 	ldw	r2,28(r2)
 8046edc:	10000926 	beq	r2,zero,8046f04 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8046ee0:	e0bffc17 	ldw	r2,-16(fp)
 8046ee4:	10800017 	ldw	r2,0(r2)
 8046ee8:	10800717 	ldw	r2,28(r2)
 8046eec:	e1bfff17 	ldw	r6,-4(fp)
 8046ef0:	e17ffe17 	ldw	r5,-8(fp)
 8046ef4:	e13ffc17 	ldw	r4,-16(fp)
 8046ef8:	103ee83a 	callr	r2
 8046efc:	e0bffb15 	stw	r2,-20(fp)
 8046f00:	00000506 	br	8046f18 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8046f04:	00bfde84 	movi	r2,-134
 8046f08:	e0bffb15 	stw	r2,-20(fp)
 8046f0c:	00000206 	br	8046f18 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8046f10:	00bfebc4 	movi	r2,-81
 8046f14:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8046f18:	e0bffb17 	ldw	r2,-20(fp)
 8046f1c:	1000070e 	bge	r2,zero,8046f3c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8046f20:	8046e440 	call	8046e44 <alt_get_errno>
 8046f24:	1007883a 	mov	r3,r2
 8046f28:	e0bffb17 	ldw	r2,-20(fp)
 8046f2c:	0085c83a 	sub	r2,zero,r2
 8046f30:	18800015 	stw	r2,0(r3)
    rc = -1;
 8046f34:	00bfffc4 	movi	r2,-1
 8046f38:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8046f3c:	e0bffb17 	ldw	r2,-20(fp)
}
 8046f40:	e037883a 	mov	sp,fp
 8046f44:	dfc00117 	ldw	ra,4(sp)
 8046f48:	df000017 	ldw	fp,0(sp)
 8046f4c:	dec00204 	addi	sp,sp,8
 8046f50:	f800283a 	ret

08046f54 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8046f54:	defffe04 	addi	sp,sp,-8
 8046f58:	df000115 	stw	fp,4(sp)
 8046f5c:	df000104 	addi	fp,sp,4
 8046f60:	e13fff15 	stw	r4,-4(fp)
}
 8046f64:	0001883a 	nop
 8046f68:	e037883a 	mov	sp,fp
 8046f6c:	df000017 	ldw	fp,0(sp)
 8046f70:	dec00104 	addi	sp,sp,4
 8046f74:	f800283a 	ret

08046f78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8046f78:	defffe04 	addi	sp,sp,-8
 8046f7c:	df000115 	stw	fp,4(sp)
 8046f80:	df000104 	addi	fp,sp,4
 8046f84:	e13fff15 	stw	r4,-4(fp)
}
 8046f88:	0001883a 	nop
 8046f8c:	e037883a 	mov	sp,fp
 8046f90:	df000017 	ldw	fp,0(sp)
 8046f94:	dec00104 	addi	sp,sp,4
 8046f98:	f800283a 	ret

08046f9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8046f9c:	defffe04 	addi	sp,sp,-8
 8046fa0:	dfc00115 	stw	ra,4(sp)
 8046fa4:	df000015 	stw	fp,0(sp)
 8046fa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8046fac:	d0a01017 	ldw	r2,-32704(gp)
 8046fb0:	10000326 	beq	r2,zero,8046fc0 <alt_get_errno+0x24>
 8046fb4:	d0a01017 	ldw	r2,-32704(gp)
 8046fb8:	103ee83a 	callr	r2
 8046fbc:	00000106 	br	8046fc4 <alt_get_errno+0x28>
 8046fc0:	d0a6f004 	addi	r2,gp,-25664
}
 8046fc4:	e037883a 	mov	sp,fp
 8046fc8:	dfc00117 	ldw	ra,4(sp)
 8046fcc:	df000017 	ldw	fp,0(sp)
 8046fd0:	dec00204 	addi	sp,sp,8
 8046fd4:	f800283a 	ret

08046fd8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8046fd8:	defff904 	addi	sp,sp,-28
 8046fdc:	dfc00615 	stw	ra,24(sp)
 8046fe0:	df000515 	stw	fp,20(sp)
 8046fe4:	df000504 	addi	fp,sp,20
 8046fe8:	e13ffd15 	stw	r4,-12(fp)
 8046fec:	e17ffe15 	stw	r5,-8(fp)
 8046ff0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8046ff4:	e0bffd17 	ldw	r2,-12(fp)
 8046ff8:	10000616 	blt	r2,zero,8047014 <read+0x3c>
 8046ffc:	e0bffd17 	ldw	r2,-12(fp)
 8047000:	10c00324 	muli	r3,r2,12
 8047004:	00820174 	movhi	r2,2053
 8047008:	10a27f04 	addi	r2,r2,-30212
 804700c:	1885883a 	add	r2,r3,r2
 8047010:	00000106 	br	8047018 <read+0x40>
 8047014:	0005883a 	mov	r2,zero
 8047018:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 804701c:	e0bffb17 	ldw	r2,-20(fp)
 8047020:	10002226 	beq	r2,zero,80470ac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8047024:	e0bffb17 	ldw	r2,-20(fp)
 8047028:	10800217 	ldw	r2,8(r2)
 804702c:	108000cc 	andi	r2,r2,3
 8047030:	10800060 	cmpeqi	r2,r2,1
 8047034:	1000181e 	bne	r2,zero,8047098 <read+0xc0>
        (fd->dev->read))
 8047038:	e0bffb17 	ldw	r2,-20(fp)
 804703c:	10800017 	ldw	r2,0(r2)
 8047040:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8047044:	10001426 	beq	r2,zero,8047098 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8047048:	e0bffb17 	ldw	r2,-20(fp)
 804704c:	10800017 	ldw	r2,0(r2)
 8047050:	10800517 	ldw	r2,20(r2)
 8047054:	e0ffff17 	ldw	r3,-4(fp)
 8047058:	180d883a 	mov	r6,r3
 804705c:	e17ffe17 	ldw	r5,-8(fp)
 8047060:	e13ffb17 	ldw	r4,-20(fp)
 8047064:	103ee83a 	callr	r2
 8047068:	e0bffc15 	stw	r2,-16(fp)
 804706c:	e0bffc17 	ldw	r2,-16(fp)
 8047070:	1000070e 	bge	r2,zero,8047090 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8047074:	8046f9c0 	call	8046f9c <alt_get_errno>
 8047078:	1007883a 	mov	r3,r2
 804707c:	e0bffc17 	ldw	r2,-16(fp)
 8047080:	0085c83a 	sub	r2,zero,r2
 8047084:	18800015 	stw	r2,0(r3)
          return -1;
 8047088:	00bfffc4 	movi	r2,-1
 804708c:	00000c06 	br	80470c0 <read+0xe8>
        }
        return rval;
 8047090:	e0bffc17 	ldw	r2,-16(fp)
 8047094:	00000a06 	br	80470c0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8047098:	8046f9c0 	call	8046f9c <alt_get_errno>
 804709c:	1007883a 	mov	r3,r2
 80470a0:	00800344 	movi	r2,13
 80470a4:	18800015 	stw	r2,0(r3)
 80470a8:	00000406 	br	80470bc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80470ac:	8046f9c0 	call	8046f9c <alt_get_errno>
 80470b0:	1007883a 	mov	r3,r2
 80470b4:	00801444 	movi	r2,81
 80470b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80470bc:	00bfffc4 	movi	r2,-1
}
 80470c0:	e037883a 	mov	sp,fp
 80470c4:	dfc00117 	ldw	ra,4(sp)
 80470c8:	df000017 	ldw	fp,0(sp)
 80470cc:	dec00204 	addi	sp,sp,8
 80470d0:	f800283a 	ret

080470d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80470d4:	defff904 	addi	sp,sp,-28
 80470d8:	df000615 	stw	fp,24(sp)
 80470dc:	df000604 	addi	fp,sp,24
 80470e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80470e4:	0005303a 	rdctl	r2,status
 80470e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80470ec:	e0fffe17 	ldw	r3,-8(fp)
 80470f0:	00bfff84 	movi	r2,-2
 80470f4:	1884703a 	and	r2,r3,r2
 80470f8:	1001703a 	wrctl	status,r2
  
  return context;
 80470fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8047100:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8047104:	d0a01517 	ldw	r2,-32684(gp)
 8047108:	10c000c4 	addi	r3,r2,3
 804710c:	00bfff04 	movi	r2,-4
 8047110:	1884703a 	and	r2,r3,r2
 8047114:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8047118:	d0e01517 	ldw	r3,-32684(gp)
 804711c:	e0bfff17 	ldw	r2,-4(fp)
 8047120:	1887883a 	add	r3,r3,r2
 8047124:	00820234 	movhi	r2,2056
 8047128:	10800004 	addi	r2,r2,0
 804712c:	10c0062e 	bgeu	r2,r3,8047148 <sbrk+0x74>
 8047130:	e0bffb17 	ldw	r2,-20(fp)
 8047134:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8047138:	e0bffa17 	ldw	r2,-24(fp)
 804713c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8047140:	00bfffc4 	movi	r2,-1
 8047144:	00000b06 	br	8047174 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8047148:	d0a01517 	ldw	r2,-32684(gp)
 804714c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8047150:	d0e01517 	ldw	r3,-32684(gp)
 8047154:	e0bfff17 	ldw	r2,-4(fp)
 8047158:	1885883a 	add	r2,r3,r2
 804715c:	d0a01515 	stw	r2,-32684(gp)
 8047160:	e0bffb17 	ldw	r2,-20(fp)
 8047164:	e0bffc15 	stw	r2,-16(fp)
 8047168:	e0bffc17 	ldw	r2,-16(fp)
 804716c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8047170:	e0bffd17 	ldw	r2,-12(fp)
} 
 8047174:	e037883a 	mov	sp,fp
 8047178:	df000017 	ldw	fp,0(sp)
 804717c:	dec00104 	addi	sp,sp,4
 8047180:	f800283a 	ret

08047184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8047184:	defffe04 	addi	sp,sp,-8
 8047188:	dfc00115 	stw	ra,4(sp)
 804718c:	df000015 	stw	fp,0(sp)
 8047190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8047194:	d0a01017 	ldw	r2,-32704(gp)
 8047198:	10000326 	beq	r2,zero,80471a8 <alt_get_errno+0x24>
 804719c:	d0a01017 	ldw	r2,-32704(gp)
 80471a0:	103ee83a 	callr	r2
 80471a4:	00000106 	br	80471ac <alt_get_errno+0x28>
 80471a8:	d0a6f004 	addi	r2,gp,-25664
}
 80471ac:	e037883a 	mov	sp,fp
 80471b0:	dfc00117 	ldw	ra,4(sp)
 80471b4:	df000017 	ldw	fp,0(sp)
 80471b8:	dec00204 	addi	sp,sp,8
 80471bc:	f800283a 	ret

080471c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80471c0:	defff904 	addi	sp,sp,-28
 80471c4:	dfc00615 	stw	ra,24(sp)
 80471c8:	df000515 	stw	fp,20(sp)
 80471cc:	df000504 	addi	fp,sp,20
 80471d0:	e13ffd15 	stw	r4,-12(fp)
 80471d4:	e17ffe15 	stw	r5,-8(fp)
 80471d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80471dc:	e0bffd17 	ldw	r2,-12(fp)
 80471e0:	10000616 	blt	r2,zero,80471fc <write+0x3c>
 80471e4:	e0bffd17 	ldw	r2,-12(fp)
 80471e8:	10c00324 	muli	r3,r2,12
 80471ec:	00820174 	movhi	r2,2053
 80471f0:	10a27f04 	addi	r2,r2,-30212
 80471f4:	1885883a 	add	r2,r3,r2
 80471f8:	00000106 	br	8047200 <write+0x40>
 80471fc:	0005883a 	mov	r2,zero
 8047200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8047204:	e0bffb17 	ldw	r2,-20(fp)
 8047208:	10002126 	beq	r2,zero,8047290 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 804720c:	e0bffb17 	ldw	r2,-20(fp)
 8047210:	10800217 	ldw	r2,8(r2)
 8047214:	108000cc 	andi	r2,r2,3
 8047218:	10001826 	beq	r2,zero,804727c <write+0xbc>
 804721c:	e0bffb17 	ldw	r2,-20(fp)
 8047220:	10800017 	ldw	r2,0(r2)
 8047224:	10800617 	ldw	r2,24(r2)
 8047228:	10001426 	beq	r2,zero,804727c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 804722c:	e0bffb17 	ldw	r2,-20(fp)
 8047230:	10800017 	ldw	r2,0(r2)
 8047234:	10800617 	ldw	r2,24(r2)
 8047238:	e0ffff17 	ldw	r3,-4(fp)
 804723c:	180d883a 	mov	r6,r3
 8047240:	e17ffe17 	ldw	r5,-8(fp)
 8047244:	e13ffb17 	ldw	r4,-20(fp)
 8047248:	103ee83a 	callr	r2
 804724c:	e0bffc15 	stw	r2,-16(fp)
 8047250:	e0bffc17 	ldw	r2,-16(fp)
 8047254:	1000070e 	bge	r2,zero,8047274 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8047258:	80471840 	call	8047184 <alt_get_errno>
 804725c:	1007883a 	mov	r3,r2
 8047260:	e0bffc17 	ldw	r2,-16(fp)
 8047264:	0085c83a 	sub	r2,zero,r2
 8047268:	18800015 	stw	r2,0(r3)
        return -1;
 804726c:	00bfffc4 	movi	r2,-1
 8047270:	00000c06 	br	80472a4 <write+0xe4>
      }
      return rval;
 8047274:	e0bffc17 	ldw	r2,-16(fp)
 8047278:	00000a06 	br	80472a4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 804727c:	80471840 	call	8047184 <alt_get_errno>
 8047280:	1007883a 	mov	r3,r2
 8047284:	00800344 	movi	r2,13
 8047288:	18800015 	stw	r2,0(r3)
 804728c:	00000406 	br	80472a0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8047290:	80471840 	call	8047184 <alt_get_errno>
 8047294:	1007883a 	mov	r3,r2
 8047298:	00801444 	movi	r2,81
 804729c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80472a0:	00bfffc4 	movi	r2,-1
}
 80472a4:	e037883a 	mov	sp,fp
 80472a8:	dfc00117 	ldw	ra,4(sp)
 80472ac:	df000017 	ldw	fp,0(sp)
 80472b0:	dec00204 	addi	sp,sp,8
 80472b4:	f800283a 	ret
